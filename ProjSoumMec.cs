using System;
using System.Drawing;
using System.Windows.Forms;
using VB = Microsoft.VisualBasic;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using static ControleurServeur.Program;
using Microsoft.Office.Interop.Excel;
using Application = Microsoft.Office.Interop.Excel.Application;
using ADODB;
using System.Data.SqlClient;
using TextBox = System.Windows.Forms.TextBox;
using System.Diagnostics;
using ControleurServeur;
using System.Collections.Generic;

namespace ControleurServeur
{
    internal class ProjSoumMec : Form
    {
        #region Windows Form Designer generated code 
        [DebuggerNonUserCode()]
        public ProjSoumMec() : base()
        {
            InitializeComponent();
        }
        [DebuggerNonUserCode()]
        protected override void Dispose(bool Disposing)
        {
            if (Disposing)
            {
                Dispose();
            }
            base.Dispose(Disposing);
        }
        internal static ToolTip ToolTip1;
        internal static ComboBox cmbOuvertFerme;
        internal static OpenFileDialog dlgExcelOpen;
        internal static SaveFileDialog dlgExcelSave;
        internal static FontDialog dlgExcelFont;
        internal static ColorDialog dlgExcelColor;
        internal static PrintDialog dlgExcelPrint;
        internal static System.Windows.Forms.Button cmdOKFRS;
        internal static System.Windows.Forms.Button cmdAnnulerFRS;
        internal static System.Windows.Forms.Button cmdSupprimerFRS;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_1;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_2;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_3;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_4;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_5;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_6;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_7;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_8;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_9;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_10;
        internal static ColumnHeader _lvwFournisseur_ColumnHeader_11;
        internal static ListView lvwFournisseur;
        internal static System.Windows.Forms.GroupBox fraFournisseur;
        internal static System.Windows.Forms.Button cmdAnnulerPieceTrouve;
        internal static System.Windows.Forms.Button cmdOKPieceTrouve;
        internal static ColumnHeader _lvwPieceTrouve_ColumnHeader_1;
        internal static ColumnHeader _lvwPieceTrouve_ColumnHeader_2;
        internal static ColumnHeader _lvwPieceTrouve_ColumnHeader_3;
        internal static ColumnHeader _lvwPieceTrouve_ColumnHeader_4;
        internal static ColumnHeader _lvwPieceTrouve_ColumnHeader_5;
        internal static ColumnHeader _lvwPieceTrouve_ColumnHeader_6;
        internal static ListView lvwPieceTrouve;
        internal static System.Windows.Forms.GroupBox fraPieceTrouve;
        internal static ColumnHeader _lvwHistorique_ColumnHeader_1;
        internal static ColumnHeader _lvwHistorique_ColumnHeader_2;
        internal static ColumnHeader _lvwHistorique_ColumnHeader_3;
        internal static ColumnHeader _lvwHistorique_ColumnHeader_4;
        internal static ListView lvwHistorique;
        internal static ColumnHeader _lvwBavard_ColumnHeader_1;
        internal static ColumnHeader _lvwBavard_ColumnHeader_2;
        internal static ColumnHeader _lvwBavard_ColumnHeader_3;
        internal static ColumnHeader _lvwBavard_ColumnHeader_4;
        internal static ColumnHeader _lvwBavard_ColumnHeader_5;
        internal static ListView lvwBavard;
        internal static MonthCalendar mvwDateFacturation;
        internal static MonthCalendar mvwDate;
        internal static System.Windows.Forms.Button cmdAnnulerDateRequise;
        internal static System.Windows.Forms.Button cmdOKDateRequise;
        internal static MonthCalendar mvwDateRequise;
        internal static System.Windows.Forms.GroupBox fraDateRequise;
        internal static TextBox txtCommentaire;
        internal static System.Windows.Forms.Button cmdOKCommentaire;
        internal static System.Windows.Forms.Button cmdAnnulerCommentaire;
        internal static System.Windows.Forms.GroupBox fraCommentaire;
        internal static TextBox txtPrixSpecial;
        internal static TextBox txtPrixList;
        internal static TextBox txtPrixNet;
        internal static ComboBox cmbfrs;
        internal static RadioButton optUSA;
        internal static RadioButton optCAN;
        internal static RadioButton optSpain;
        internal static System.Windows.Forms.Button cmdOKPrix;
        internal static System.Windows.Forms.Button cmdAnnulerPrix;
        internal static MaskedTextBox mskEscompte;
        internal static System.Windows.Forms.Label _Label1_0;
        internal static PictureBox imgCanada;
        internal static System.Windows.Forms.Label _Label1_14;
        internal static System.Windows.Forms.Label _Label1_16;
        internal static System.Windows.Forms.Label _Label1_19;
        internal static System.Windows.Forms.Label _Label1_20;
        internal static PictureBox imgSpain;
        internal static PictureBox imgEU;
        internal static System.Windows.Forms.GroupBox fraPrixPiece;
        internal static System.Windows.Forms.Button cmdAnglaisFrancais;
        internal static System.Windows.Forms.Button cmdReset;
        internal static System.Windows.Forms.Button cmdRapportFACT;
        internal static System.Windows.Forms.Button cmdTexte;
        internal static System.Windows.Forms.Button cmdDemande;
        internal static System.Windows.Forms.Button cmdSortieMagasin;
        internal static System.Windows.Forms.Button cmdMauvaisPrix;
        internal static System.Windows.Forms.Button cmdMaterielInutile;
        internal static System.Windows.Forms.Button cmdCreerProjet;
        internal static System.Windows.Forms.Button cmdCatalogue;
        internal static System.Windows.Forms.Button cmdBonCommande;
        internal static System.Windows.Forms.Button cmdRetour;
        internal static System.Windows.Forms.Button cmdExtra;
        internal static System.Windows.Forms.Button cmdCopier;
        internal static System.Windows.Forms.Button cmdImprimer;
        internal static System.Windows.Forms.Button cmdAjouter;
        internal static System.Windows.Forms.Button cmdFermer;
        internal static System.Windows.Forms.Button cmdAnnuler;
        internal static System.Windows.Forms.Button cmdEnregistrer;
        internal static System.Windows.Forms.Button cmdModifier;
        internal static System.Windows.Forms.Button cmdSupprimer;
        internal static System.Windows.Forms.CheckBox chkUR;
        internal static System.Windows.Forms.CheckBox chkCE;
        internal static System.Windows.Forms.CheckBox chkCUR;
        internal static System.Windows.Forms.CheckBox chkUL;
        internal static System.Windows.Forms.CheckBox chkCUL;
        internal static System.Windows.Forms.CheckBox chkCSA;
        internal static Panel picApprob;
        internal static TextBox txtDelais;
        internal static System.Windows.Forms.Button cmdDate;
        internal static System.Windows.Forms.Label Label21;
        internal static Panel fraCertifDelais;
        internal static TextBox txtPrixSoumission;
        internal static ComboBox cmbTransport;
        internal static TextBox txtTransport;
        internal static TextBox txtPrixReception;
        internal static System.Windows.Forms.Label lblPrixSoumission;
        internal static System.Windows.Forms.Label lblPrixReception;
        internal static System.Windows.Forms.Label Label26;
        internal static Panel fraFsTransMarq;
        internal static System.Windows.Forms.Button cmdRafraichir;
        internal static System.Windows.Forms.Button cmdTri;
        internal static TextBox txtTotalTemps;
        internal static TextBox txtTotalPieces;
        internal static TextBox txtProfit;
        internal static TextBox txtImprevus;
        internal static TextBox txtCommission;
        internal static TextBox txtPrixTotal;
        internal static System.Windows.Forms.Label Label8;
        internal static System.Windows.Forms.Label Label7;
        internal static System.Windows.Forms.Label Label5;
        internal static System.Windows.Forms.Label lblTotalPieces;
        internal static System.Windows.Forms.Label lblImprevus;
        internal static System.Windows.Forms.Label lblTotalTemps;
        internal static Panel fraPrix;
        internal static ComboBox cmbTri;
        internal static ComboBox cmbPieces;
        internal static TextBox txtCheminPhotos;
        internal static System.Windows.Forms.Button cmdBrowse;
        internal static System.Windows.Forms.Button cmdPhotos;
        internal static TextBox txtProjet;
        internal static ComboBox cmbContact;
        internal static TextBox txtContact;
        internal static ComboBox cmbClient;
        internal static TextBox txtClient;
        internal static TextBox txtNoSoumission;
        internal static ComboBox cmbProjSoum;
        internal static TextBox txtNoProjSoum;
        internal static ComboBox cmbChoix;
        internal static TextBox txtChoix;
        internal static Timer tmrTemps;
        internal static System.Windows.Forms.Button cmdHistorique;
        internal static System.Windows.Forms.Button cmdLegende;
        internal static System.Windows.Forms.Button cmdBavards;
        internal static System.Windows.Forms.Button cmdAjouterSection;
        internal static ComboBox cmbSections;
        internal static System.Windows.Forms.Button cmdDateFacturation;
        internal static TextBox txtDateFacturation;
        internal static System.Windows.Forms.Button cmdTemps;
        internal static TextBox txtForfait;
        internal static System.Windows.Forms.Button cmdForfait;
        internal static System.Windows.Forms.Button cmdEffacerForfait;
        internal static ColumnHeader _lvwPieces_ColumnHeader_1;
        internal static ColumnHeader _lvwPieces_ColumnHeader_2;
        internal static ColumnHeader _lvwPieces_ColumnHeader_3;
        internal static ColumnHeader _lvwPieces_ColumnHeader_4;
        internal static ColumnHeader _lvwPieces_ColumnHeader_5;
        internal static ListView lvwPieces;
        internal static ListView lvwSoumission;
        internal static System.Windows.Forms.Button cmdExport;
        internal static System.Windows.Forms.Button cmdReception;
        internal static System.Windows.Forms.Button cmdRechercherClient;
        internal static TextBox txtNbreManuel;
        internal static TextBox txtPrixManuel;
        internal static System.Windows.Forms.Label Label23;
        internal static System.Windows.Forms.Label Label22;
        internal static System.Windows.Forms.GroupBox fraManuel;
        internal static System.Windows.Forms.Label lblForfaitInitiale;
        internal static System.Windows.Forms.Label Label3;
        internal static System.Windows.Forms.Label lblDateFacturation;
        internal static System.Windows.Forms.Label lblPasTemps;
        internal static System.Windows.Forms.Label Label2;
        internal static System.Windows.Forms.Label lblNoSoumission;
        internal static System.Windows.Forms.Label Label6;
        internal static System.Windows.Forms.Label Label4;
        internal static System.Windows.Forms.Label lblSections;
        internal static System.Windows.Forms.Label lblPiece;
        internal static System.Windows.Forms.Label lblProjet;
        internal static System.Windows.Forms.Label lblTri;
        [DebuggerStepThrough()]
        private void InitializeComponent()
        {

            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProjSoumElec));
            ToolTip1 = new ToolTip();
            cmdForfait = new System.Windows.Forms.Button();
            cmdEffacerForfait = new System.Windows.Forms.Button();
            cmbOuvertFerme = new ComboBox();
            dlgExcelOpen = new OpenFileDialog();
            dlgExcelSave = new SaveFileDialog();
            dlgExcelFont = new FontDialog();
            dlgExcelColor = new ColorDialog();
            dlgExcelPrint = new PrintDialog();
            fraFournisseur = new System.Windows.Forms.GroupBox();
            cmdOKFRS = new System.Windows.Forms.Button();
            cmdAnnulerFRS = new System.Windows.Forms.Button();
            cmdSupprimerFRS = new System.Windows.Forms.Button();
            lvwFournisseur = new ListView();
            _lvwFournisseur_ColumnHeader_1 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_2 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_3 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_4 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_5 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_6 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_7 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_8 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_9 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_10 = new ColumnHeader();
            _lvwFournisseur_ColumnHeader_11 = new ColumnHeader();
            fraPieceTrouve = new System.Windows.Forms.GroupBox();
            cmdAnnulerPieceTrouve = new System.Windows.Forms.Button();
            cmdOKPieceTrouve = new System.Windows.Forms.Button();
            lvwPieceTrouve = new ListView();
            _lvwPieceTrouve_ColumnHeader_1 = new ColumnHeader();
            _lvwPieceTrouve_ColumnHeader_2 = new ColumnHeader();
            _lvwPieceTrouve_ColumnHeader_3 = new ColumnHeader();
            _lvwPieceTrouve_ColumnHeader_4 = new ColumnHeader();
            _lvwPieceTrouve_ColumnHeader_5 = new ColumnHeader();
            _lvwPieceTrouve_ColumnHeader_6 = new ColumnHeader();
            lvwHistorique = new ListView();
            _lvwHistorique_ColumnHeader_1 = new ColumnHeader();
            _lvwHistorique_ColumnHeader_2 = new ColumnHeader();
            _lvwHistorique_ColumnHeader_3 = new ColumnHeader();
            _lvwHistorique_ColumnHeader_4 = new ColumnHeader();
            lvwBavard = new ListView();
            _lvwBavard_ColumnHeader_1 = new ColumnHeader();
            _lvwBavard_ColumnHeader_2 = new ColumnHeader();
            _lvwBavard_ColumnHeader_3 = new ColumnHeader();
            _lvwBavard_ColumnHeader_4 = new ColumnHeader();
            _lvwBavard_ColumnHeader_5 = new ColumnHeader();
            mvwDateFacturation = new MonthCalendar();
            mvwDate = new MonthCalendar();
            fraDateRequise = new System.Windows.Forms.GroupBox();
            cmdAnnulerDateRequise = new System.Windows.Forms.Button();
            cmdOKDateRequise = new System.Windows.Forms.Button();
            mvwDateRequise = new MonthCalendar();
            fraCommentaire = new System.Windows.Forms.GroupBox();
            txtCommentaire = new TextBox();
            cmdOKCommentaire = new System.Windows.Forms.Button();
            cmdAnnulerCommentaire = new System.Windows.Forms.Button();
            fraPrixPiece = new System.Windows.Forms.GroupBox();
            txtPrixSpecial = new TextBox();
            txtPrixList = new TextBox();
            txtPrixNet = new TextBox();
            cmbfrs = new ComboBox();
            optUSA = new RadioButton();
            optCAN = new RadioButton();
            optSpain = new RadioButton();
            cmdOKPrix = new System.Windows.Forms.Button();
            cmdAnnulerPrix = new System.Windows.Forms.Button();
            mskEscompte = new MaskedTextBox();
            _Label1_0 = new System.Windows.Forms.Label();
            imgCanada = new PictureBox();
            _Label1_14 = new System.Windows.Forms.Label();
            _Label1_16 = new System.Windows.Forms.Label();
            _Label1_19 = new System.Windows.Forms.Label();
            _Label1_20 = new System.Windows.Forms.Label();
            imgSpain = new PictureBox();
            imgEU = new PictureBox();
            cmdAnglaisFrancais = new System.Windows.Forms.Button();
            cmdReset = new System.Windows.Forms.Button();
            cmdRapportFACT = new System.Windows.Forms.Button();
            cmdTexte = new System.Windows.Forms.Button();
            cmdDemande = new System.Windows.Forms.Button();
            cmdSortieMagasin = new System.Windows.Forms.Button();
            cmdMauvaisPrix = new System.Windows.Forms.Button();
            cmdMaterielInutile = new System.Windows.Forms.Button();
            cmdCreerProjet = new System.Windows.Forms.Button();
            cmdCatalogue = new System.Windows.Forms.Button();
            cmdBonCommande = new System.Windows.Forms.Button();
            cmdRetour = new System.Windows.Forms.Button();
            cmdExtra = new System.Windows.Forms.Button();
            cmdCopier = new System.Windows.Forms.Button();
            cmdImprimer = new System.Windows.Forms.Button();
            cmdAjouter = new System.Windows.Forms.Button();
            cmdFermer = new System.Windows.Forms.Button();
            cmdAnnuler = new System.Windows.Forms.Button();
            cmdEnregistrer = new System.Windows.Forms.Button();
            cmdModifier = new System.Windows.Forms.Button();
            cmdSupprimer = new System.Windows.Forms.Button();
            fraCertifDelais = new Panel();
            picApprob = new Panel();
            chkUR = new System.Windows.Forms.CheckBox();
            chkCE = new System.Windows.Forms.CheckBox();
            chkCUR = new System.Windows.Forms.CheckBox();
            chkUL = new System.Windows.Forms.CheckBox();
            chkCUL = new System.Windows.Forms.CheckBox();
            chkCSA = new System.Windows.Forms.CheckBox();
            txtDelais = new TextBox();
            cmdDate = new System.Windows.Forms.Button();
            Label21 = new System.Windows.Forms.Label();
            fraFsTransMarq = new Panel();
            txtPrixSoumission = new TextBox();
            cmbTransport = new ComboBox();
            txtTransport = new TextBox();
            txtPrixReception = new TextBox();
            lblPrixSoumission = new System.Windows.Forms.Label();
            lblPrixReception = new System.Windows.Forms.Label();
            Label26 = new System.Windows.Forms.Label();
            cmdRafraichir = new System.Windows.Forms.Button();
            cmdTri = new System.Windows.Forms.Button();
            fraPrix = new Panel();
            txtTotalTemps = new TextBox();
            txtTotalPieces = new TextBox();
            txtProfit = new TextBox();
            txtImprevus = new TextBox();
            txtCommission = new TextBox();
            txtPrixTotal = new TextBox();
            Label8 = new System.Windows.Forms.Label();
            Label7 = new System.Windows.Forms.Label();
            Label5 = new System.Windows.Forms.Label();
            lblTotalPieces = new System.Windows.Forms.Label();
            lblImprevus = new System.Windows.Forms.Label();
            lblTotalTemps = new System.Windows.Forms.Label();
            cmbTri = new ComboBox();
            cmbPieces = new ComboBox();
            txtCheminPhotos = new TextBox();
            cmdBrowse = new System.Windows.Forms.Button();
            cmdPhotos = new System.Windows.Forms.Button();
            txtProjet = new TextBox();
            cmbContact = new ComboBox();
            txtContact = new TextBox();
            cmbClient = new ComboBox();
            txtClient = new TextBox();
            txtNoSoumission = new TextBox();
            cmbProjSoum = new ComboBox();
            txtNoProjSoum = new TextBox();
            cmbChoix = new ComboBox();
            txtChoix = new TextBox();
            tmrTemps = new Timer(
);
            cmdHistorique = new System.Windows.Forms.Button();
            cmdLegende = new System.Windows.Forms.Button();
            cmdBavards = new System.Windows.Forms.Button();
            cmdAjouterSection = new System.Windows.Forms.Button();
            cmbSections = new ComboBox();
            cmdDateFacturation = new System.Windows.Forms.Button();
            txtDateFacturation = new TextBox();
            cmdTemps = new System.Windows.Forms.Button();
            txtForfait = new TextBox();
            lvwPieces = new ListView();
            _lvwPieces_ColumnHeader_1 = new ColumnHeader();
            _lvwPieces_ColumnHeader_2 = new ColumnHeader();
            _lvwPieces_ColumnHeader_3 = new ColumnHeader();
            _lvwPieces_ColumnHeader_4 = new ColumnHeader();
            _lvwPieces_ColumnHeader_5 = new ColumnHeader();
            lvwSoumission = new ListView();
            cmdExport = new System.Windows.Forms.Button();
            cmdReception = new System.Windows.Forms.Button();
            cmdRechercherClient = new System.Windows.Forms.Button();
            fraManuel = new System.Windows.Forms.GroupBox();
            txtNbreManuel = new TextBox();
            txtPrixManuel = new TextBox();
            Label23 = new System.Windows.Forms.Label();
            Label22 = new System.Windows.Forms.Label();
            lblForfaitInitiale = new System.Windows.Forms.Label();
            Label3 = new System.Windows.Forms.Label();
            lblDateFacturation = new System.Windows.Forms.Label();
            lblPasTemps = new System.Windows.Forms.Label();
            Label2 = new System.Windows.Forms.Label();
            lblNoSoumission = new System.Windows.Forms.Label();
            Label6 = new System.Windows.Forms.Label();
            Label4 = new System.Windows.Forms.Label();
            lblSections = new System.Windows.Forms.Label();
            lblPiece = new System.Windows.Forms.Label();
            lblProjet = new System.Windows.Forms.Label();
            lblTri = new System.Windows.Forms.Label();
            fraFournisseur.SuspendLayout();
            fraPieceTrouve.SuspendLayout();
            fraDateRequise.SuspendLayout();
            fraCommentaire.SuspendLayout();
            fraPrixPiece.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)imgCanada).BeginInit();
            ((System.ComponentModel.ISupportInitialize)imgSpain).BeginInit();
            ((System.ComponentModel.ISupportInitialize)imgEU).BeginInit();
            fraCertifDelais.SuspendLayout();
            picApprob.SuspendLayout();
            fraFsTransMarq.SuspendLayout();
            fraPrix.SuspendLayout();
            fraManuel.SuspendLayout();
            SuspendLayout();//cmdForfait
            cmdForfait.AutoSize = true;
            cmdForfait.BackColor = Color.Black;
            cmdForfait.FlatStyle = FlatStyle.Flat;
            cmdForfait.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdForfait.ForeColor = Color.White;
            cmdForfait.Location = new System.Drawing.Point(104, 140);
            cmdForfait.Name = "cmdForfait";
            cmdForfait.RightToLeft = RightToLeft.No;
            cmdForfait.Size = new Size(28, 26);
            cmdForfait.TabIndex = 56;
            cmdForfait.Text = "...";
            ToolTip1.SetToolTip(cmdForfait, "Ajoute un forfait");
            cmdForfait.UseVisualStyleBackColor = true;//cmdEffacerForfait
            cmdEffacerForfait.AutoSize = true;
            cmdEffacerForfait.BackColor = Color.Black;
            cmdEffacerForfait.FlatStyle = FlatStyle.Flat;
            cmdEffacerForfait.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdEffacerForfait.ForeColor = Color.White;
            cmdEffacerForfait.Location = new System.Drawing.Point(136, 140);
            cmdEffacerForfait.Name = "cmdEffacerForfait";
            cmdEffacerForfait.RightToLeft = RightToLeft.No;
            cmdEffacerForfait.Size = new Size(57, 26);
            cmdEffacerForfait.TabIndex = 57;
            cmdEffacerForfait.Text = "Effacer";
            ToolTip1.SetToolTip(cmdEffacerForfait, "Efface le forfait");
            cmdEffacerForfait.UseVisualStyleBackColor = true;//cmbOuvertFerme
            cmbOuvertFerme.BackColor = Color.Black;
            cmbOuvertFerme.DropDownStyle = ComboBoxStyle.DropDownList;
            cmbOuvertFerme.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbOuvertFerme.ForeColor = Color.White;
            cmbOuvertFerme.Items.AddRange(new object[] {
            "Ouverts",
            "Fermés"});
            cmbOuvertFerme.Location = new System.Drawing.Point(312, 12);
            cmbOuvertFerme.Name = "cmbOuvertFerme";
            cmbOuvertFerme.RightToLeft = RightToLeft.No;
            cmbOuvertFerme.Size = new Size(81, 22);
            cmbOuvertFerme.TabIndex = 140;
            cmbOuvertFerme.SelectedIndexChanged += new EventHandler(cmbOuvertFerme_SelectedIndexChanged);//fraFournisseur
            fraFournisseur.BackColor = Color.Black;
            fraFournisseur.Controls.Add(cmdOKFRS);
            fraFournisseur.Controls.Add(cmdAnnulerFRS);
            fraFournisseur.Controls.Add(fraPieceTrouve);
            fraFournisseur.Controls.Add(cmdSupprimerFRS);
            fraFournisseur.Controls.Add(lvwBavard);
            fraFournisseur.Controls.Add(lvwHistorique);
            fraFournisseur.Controls.Add(lvwFournisseur);
            fraFournisseur.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            fraFournisseur.ForeColor = Color.White;
            fraFournisseur.Location = new System.Drawing.Point(24, 57);
            fraFournisseur.Name = "fraFournisseur";
            fraFournisseur.Padding = new Padding(0);
            fraFournisseur.RightToLeft = RightToLeft.No;
            fraFournisseur.Size = new Size(761, 161);
            fraFournisseur.TabIndex = 20;
            fraFournisseur.TabStop = false;
            fraFournisseur.Text = "Fournisseurs";
            fraFournisseur.Visible = false;//cmdOKFRS
            cmdOKFRS.BackColor = Color.Black;
            cmdOKFRS.FlatStyle = FlatStyle.Flat;
            cmdOKFRS.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdOKFRS.ForeColor = Color.White;
            cmdOKFRS.Location = new System.Drawing.Point(680, 134);
            cmdOKFRS.Name = "cmdOKFRS";
            cmdOKFRS.RightToLeft = RightToLeft.No;
            cmdOKFRS.Size = new Size(73, 25);
            cmdOKFRS.TabIndex = 24;
            cmdOKFRS.Text = "OK";
            cmdOKFRS.UseVisualStyleBackColor = true;
            cmdOKFRS.Click += new EventHandler(cmdOKFRS_Click);//cmdAnnulerFRS
            cmdAnnulerFRS.BackColor = Color.Black;
            cmdAnnulerFRS.FlatStyle = FlatStyle.Flat;
            cmdAnnulerFRS.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnnulerFRS.ForeColor = Color.White;
            cmdAnnulerFRS.Location = new System.Drawing.Point(600, 134);
            cmdAnnulerFRS.Name = "cmdAnnulerFRS";
            cmdAnnulerFRS.RightToLeft = RightToLeft.No;
            cmdAnnulerFRS.Size = new Size(73, 25);
            cmdAnnulerFRS.TabIndex = 23;
            cmdAnnulerFRS.Text = "Annuler";
            cmdAnnulerFRS.UseVisualStyleBackColor = true;
            cmdAnnulerFRS.Click += new EventHandler(cmdAnnulerFRS_Click);//cmdSupprimerFRS
            cmdSupprimerFRS.BackColor = Color.Black;
            cmdSupprimerFRS.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdSupprimerFRS.ForeColor = Color.White;
            cmdSupprimerFRS.Location = new System.Drawing.Point(8, 134);
            cmdSupprimerFRS.Name = "cmdSupprimerFRS";
            cmdSupprimerFRS.RightToLeft = RightToLeft.No;
            cmdSupprimerFRS.Size = new Size(65, 25);
            cmdSupprimerFRS.TabIndex = 22;
            cmdSupprimerFRS.Text = "Supprimer";
            cmdSupprimerFRS.UseVisualStyleBackColor = true;
            cmdSupprimerFRS.Click += new EventHandler(cmdSupprimerFRS_Click);//lvwFournisseur
            lvwFournisseur.BackColor = SystemColors.Window;
            lvwFournisseur.Columns.AddRange(new ColumnHeader[] {
            _lvwFournisseur_ColumnHeader_1,
            _lvwFournisseur_ColumnHeader_2,
            _lvwFournisseur_ColumnHeader_3,
            _lvwFournisseur_ColumnHeader_4,
            _lvwFournisseur_ColumnHeader_5,
            _lvwFournisseur_ColumnHeader_6,
            _lvwFournisseur_ColumnHeader_7,
            _lvwFournisseur_ColumnHeader_8,
            _lvwFournisseur_ColumnHeader_9,
            _lvwFournisseur_ColumnHeader_10,
            _lvwFournisseur_ColumnHeader_11});
            lvwFournisseur.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lvwFournisseur.ForeColor = SystemColors.WindowText;
            lvwFournisseur.FullRowSelect = true;
            lvwFournisseur.GridLines = true;
            lvwFournisseur.HideSelection = false;
            lvwFournisseur.Location = new System.Drawing.Point(8, 22);
            lvwFournisseur.Name = "lvwFournisseur";
            lvwFournisseur.Size = new Size(745, 105);
            lvwFournisseur.TabIndex = 21;
            lvwFournisseur.UseCompatibleStateImageBehavior = false;
            lvwFournisseur.View = View.Details;
            lvwFournisseur.DoubleClick += new EventHandler(lvwFournisseur_DoubleClick);
            lvwFournisseur.KeyDown += new KeyEventHandler(lvwfournisseur_KeyDown);//_lvwFournisseur_ColumnHeader_1
            _lvwFournisseur_ColumnHeader_1.Text = "Fournisseur";
            _lvwFournisseur_ColumnHeader_1.Width = 236;//_lvwFournisseur_ColumnHeader_2
            _lvwFournisseur_ColumnHeader_2.Text = "Pers. Ress.";
            _lvwFournisseur_ColumnHeader_2.Width = 133;//_lvwFournisseur_ColumnHeader_3
            _lvwFournisseur_ColumnHeader_3.Text = "Date";
            _lvwFournisseur_ColumnHeader_3.Width = 117;//_lvwFournisseur_ColumnHeader_4
            _lvwFournisseur_ColumnHeader_4.Text = "Par";
            _lvwFournisseur_ColumnHeader_4.Width = 54;//_lvwFournisseur_ColumnHeader_5
            _lvwFournisseur_ColumnHeader_5.Text = "Valide";
            _lvwFournisseur_ColumnHeader_5.Width = 117;//_lvwFournisseur_ColumnHeader_6
            _lvwFournisseur_ColumnHeader_6.Text = "Prix listé";
            _lvwFournisseur_ColumnHeader_6.TextAlign = HorizontalAlignment.Right;
            _lvwFournisseur_ColumnHeader_6.Width = 108;//_lvwFournisseur_ColumnHeader_7
            _lvwFournisseur_ColumnHeader_7.Text = "Escompte";
            _lvwFournisseur_ColumnHeader_7.TextAlign = HorizontalAlignment.Right;
            _lvwFournisseur_ColumnHeader_7.Width = 105;//_lvwFournisseur_ColumnHeader_8
            _lvwFournisseur_ColumnHeader_8.Text = "Prix net";
            _lvwFournisseur_ColumnHeader_8.TextAlign = HorizontalAlignment.Right;
            _lvwFournisseur_ColumnHeader_8.Width = 108;//_lvwFournisseur_ColumnHeader_9
            _lvwFournisseur_ColumnHeader_9.Text = "Prix spécial";
            _lvwFournisseur_ColumnHeader_9.TextAlign = HorizontalAlignment.Right;
            _lvwFournisseur_ColumnHeader_9.Width = 115;//_lvwFournisseur_ColumnHeader_10
            _lvwFournisseur_ColumnHeader_10.Text = "Quoter";
            _lvwFournisseur_ColumnHeader_10.Width = 80;//_lvwFournisseur_ColumnHeader_11
            _lvwFournisseur_ColumnHeader_11.Text = "Stock";
            _lvwFournisseur_ColumnHeader_11.Width = 100;//fraPieceTrouve
            fraPieceTrouve.BackColor = Color.Black;
            fraPieceTrouve.Controls.Add(cmdAnnulerPieceTrouve);
            fraPieceTrouve.Controls.Add(cmdOKPieceTrouve);
            fraPieceTrouve.Controls.Add(lvwPieceTrouve);
            fraPieceTrouve.Controls.Add(fraDateRequise);
            fraPieceTrouve.Controls.Add(fraCommentaire);
            fraPieceTrouve.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            fraPieceTrouve.ForeColor = Color.White;
            fraPieceTrouve.Location = new System.Drawing.Point(8, 0);
            fraPieceTrouve.Name = "fraPieceTrouve";
            fraPieceTrouve.Padding = new Padding(0);
            fraPieceTrouve.RightToLeft = RightToLeft.No;
            fraPieceTrouve.Size = new Size(689, 185);
            fraPieceTrouve.TabIndex = 15;
            fraPieceTrouve.TabStop = false;
            fraPieceTrouve.Text = "Pièces trouvées";
            fraPieceTrouve.Visible = false;//cmdAnnulerPieceTrouve
            cmdAnnulerPieceTrouve.BackColor = Color.Black;
            cmdAnnulerPieceTrouve.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnnulerPieceTrouve.ForeColor = Color.White;
            cmdAnnulerPieceTrouve.Location = new System.Drawing.Point(528, 158);
            cmdAnnulerPieceTrouve.Name = "cmdAnnulerPieceTrouve";
            cmdAnnulerPieceTrouve.RightToLeft = RightToLeft.No;
            cmdAnnulerPieceTrouve.Size = new Size(73, 25);
            cmdAnnulerPieceTrouve.TabIndex = 17;
            cmdAnnulerPieceTrouve.Text = "Annuler";
            cmdAnnulerPieceTrouve.UseVisualStyleBackColor = true;
            cmdAnnulerPieceTrouve.Click += new EventHandler(cmdAnnulerPieceTrouve_Click);//cmdOKPieceTrouve
            cmdOKPieceTrouve.BackColor = Color.Black;
            cmdOKPieceTrouve.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdOKPieceTrouve.ForeColor = Color.White;
            cmdOKPieceTrouve.Location = new System.Drawing.Point(608, 158);
            cmdOKPieceTrouve.Name = "cmdOKPieceTrouve";
            cmdOKPieceTrouve.RightToLeft = RightToLeft.No;
            cmdOKPieceTrouve.Size = new Size(73, 25);
            cmdOKPieceTrouve.TabIndex = 18;
            cmdOKPieceTrouve.Text = "OK";
            cmdOKPieceTrouve.UseVisualStyleBackColor = true;
            cmdOKPieceTrouve.Click += new EventHandler(cmdOKPieceTrouve_Click);//lvwPieceTrouve
            lvwPieceTrouve.BackColor = SystemColors.Window;
            lvwPieceTrouve.Columns.AddRange(new ColumnHeader[] {
            _lvwPieceTrouve_ColumnHeader_1,
            _lvwPieceTrouve_ColumnHeader_2,
            _lvwPieceTrouve_ColumnHeader_3,
            _lvwPieceTrouve_ColumnHeader_4,
            _lvwPieceTrouve_ColumnHeader_5,
            _lvwPieceTrouve_ColumnHeader_6});
            lvwPieceTrouve.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lvwPieceTrouve.ForeColor = SystemColors.WindowText;
            lvwPieceTrouve.FullRowSelect = true;
            lvwPieceTrouve.GridLines = true;
            lvwPieceTrouve.HideSelection = false;
            lvwPieceTrouve.Location = new System.Drawing.Point(8, 22);
            lvwPieceTrouve.Name = "lvwPieceTrouve";
            lvwPieceTrouve.Size = new Size(673, 129);
            lvwPieceTrouve.TabIndex = 16;
            lvwPieceTrouve.UseCompatibleStateImageBehavior = false;
            lvwPieceTrouve.View = View.Details;
            lvwPieceTrouve.DoubleClick += new EventHandler(lvwPieceTrouve_DoubleClick);//_lvwPieceTrouve_ColumnHeader_1
            _lvwPieceTrouve_ColumnHeader_1.Text = "PIECE_GRB";
            _lvwPieceTrouve_ColumnHeader_1.Width = 161;//_lvwPieceTrouve_ColumnHeader_2
            _lvwPieceTrouve_ColumnHeader_2.Text = "No. d\'item";
            _lvwPieceTrouve_ColumnHeader_2.Width = 217;//_lvwPieceTrouve_ColumnHeader_3
            _lvwPieceTrouve_ColumnHeader_3.Text = "CatégorieFournisseur";
            _lvwPieceTrouve_ColumnHeader_3.Width = 170;//_lvwPieceTrouve_ColumnHeader_4
            _lvwPieceTrouve_ColumnHeader_4.Text = "Manufacturier";
            _lvwPieceTrouve_ColumnHeader_4.Width = 136;//_lvwPieceTrouve_ColumnHeader_5
            _lvwPieceTrouve_ColumnHeader_5.Text = "Description française";
            _lvwPieceTrouve_ColumnHeader_5.Width = 477;//_lvwPieceTrouve_ColumnHeader_6
            _lvwPieceTrouve_ColumnHeader_6.Text = "Description anglaise";
            _lvwPieceTrouve_ColumnHeader_6.Width = 477;//lvwHistorique
            lvwHistorique.BackColor = SystemColors.Window;
            lvwHistorique.Columns.AddRange(new ColumnHeader[] {
            _lvwHistorique_ColumnHeader_1,
            _lvwHistorique_ColumnHeader_2,
            _lvwHistorique_ColumnHeader_3,
            _lvwHistorique_ColumnHeader_4});
            lvwHistorique.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lvwHistorique.ForeColor = SystemColors.WindowText;
            lvwHistorique.FullRowSelect = true;
            lvwHistorique.GridLines = true;
            lvwHistorique.HideSelection = false;
            lvwHistorique.Location = new System.Drawing.Point(216, 85);
            lvwHistorique.Name = "lvwHistorique";
            lvwHistorique.Size = new Size(321, 105);
            lvwHistorique.TabIndex = 55;
            lvwHistorique.UseCompatibleStateImageBehavior = false;
            lvwHistorique.View = View.Details;
            lvwHistorique.Visible = false;
            lvwHistorique.Leave += new EventHandler(lvwHistorique_Leave);//_lvwHistorique_ColumnHeader_1
            _lvwHistorique_ColumnHeader_1.Text = "Nom de l\'employé";
            _lvwHistorique_ColumnHeader_1.Width = 214;//_lvwHistorique_ColumnHeader_2
            _lvwHistorique_ColumnHeader_2.Text = "Date";
            _lvwHistorique_ColumnHeader_2.Width = 117;//_lvwHistorique_ColumnHeader_3
            _lvwHistorique_ColumnHeader_3.Text = "Heure";
            _lvwHistorique_ColumnHeader_3.Width = 129;//_lvwHistorique_ColumnHeader_4
            _lvwHistorique_ColumnHeader_4.Width = 170;//lvwBavard
            lvwBavard.BackColor = SystemColors.Window;
            lvwBavard.Columns.AddRange(new ColumnHeader[] {
            _lvwBavard_ColumnHeader_1,
            _lvwBavard_ColumnHeader_2,
            _lvwBavard_ColumnHeader_3,
            _lvwBavard_ColumnHeader_4,
            _lvwBavard_ColumnHeader_5});
            lvwBavard.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lvwBavard.ForeColor = SystemColors.WindowText;
            lvwBavard.FullRowSelect = true;
            lvwBavard.GridLines = true;
            lvwBavard.HideSelection = false;
            lvwBavard.Location = new System.Drawing.Point(335, 107);
            lvwBavard.Name = "lvwBavard";
            lvwBavard.Size = new Size(321, 105);
            lvwBavard.TabIndex = 54;
            lvwBavard.UseCompatibleStateImageBehavior = false;
            lvwBavard.View = View.Details;
            lvwBavard.Visible = false;
            lvwBavard.Leave += new EventHandler(lvwBavard_Leave);//_lvwBavard_ColumnHeader_1
            _lvwBavard_ColumnHeader_1.Text = "Nom de l\'employé";
            _lvwBavard_ColumnHeader_1.Width = 214;//_lvwBavard_ColumnHeader_2
            _lvwBavard_ColumnHeader_2.Text = "Date";
            _lvwBavard_ColumnHeader_2.Width = 117;//_lvwBavard_ColumnHeader_3
            _lvwBavard_ColumnHeader_3.Text = "Heure";
            _lvwBavard_ColumnHeader_3.Width = 129;//_lvwBavard_ColumnHeader_4
            _lvwBavard_ColumnHeader_4.Text = "Qté";
            _lvwBavard_ColumnHeader_4.Width = 170;//_lvwBavard_ColumnHeader_5
            _lvwBavard_ColumnHeader_5.Text = "No. Item";
            _lvwBavard_ColumnHeader_5.Width = 170;//mvwDateFacturation
            mvwDateFacturation.BackColor = Color.Black;
            mvwDateFacturation.ForeColor = Color.White;
            mvwDateFacturation.Location = new System.Drawing.Point(797, 303);
            mvwDateFacturation.Name = "mvwDateFacturation";
            mvwDateFacturation.TabIndex = 141;//mvwDate
            mvwDate.BackColor = Color.Black;
            mvwDate.ForeColor = Color.White;
            mvwDate.Location = new System.Drawing.Point(797, 343);
            mvwDate.Name = "mvwDate";
            mvwDate.TabIndex = 142;//fraDateRequise
            fraDateRequise.BackColor = Color.Black;
            fraDateRequise.Controls.Add(cmdAnnulerDateRequise);
            fraDateRequise.Controls.Add(cmdOKDateRequise);
            fraDateRequise.Controls.Add(mvwDateRequise);
            fraDateRequise.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            fraDateRequise.ForeColor = Color.White;
            fraDateRequise.Location = new System.Drawing.Point(307, 113);
            fraDateRequise.Name = "fraDateRequise";
            fraDateRequise.Padding = new Padding(0);
            fraDateRequise.RightToLeft = RightToLeft.No;
            fraDateRequise.Size = new Size(321, 193);
            fraDateRequise.TabIndex = 89;
            fraDateRequise.TabStop = false;
            fraDateRequise.Text = "Date Requise";
            fraDateRequise.Visible = false;//cmdAnnulerDateRequise
            cmdAnnulerDateRequise.BackColor = Color.Black;
            cmdAnnulerDateRequise.FlatStyle = FlatStyle.Flat;
            cmdAnnulerDateRequise.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnnulerDateRequise.ForeColor = Color.White;
            cmdAnnulerDateRequise.Location = new System.Drawing.Point(232, 86);
            cmdAnnulerDateRequise.Name = "cmdAnnulerDateRequise";
            cmdAnnulerDateRequise.RightToLeft = RightToLeft.No;
            cmdAnnulerDateRequise.Size = new Size(73, 25);
            cmdAnnulerDateRequise.TabIndex = 95;
            cmdAnnulerDateRequise.Text = "Annuler";
            cmdAnnulerDateRequise.UseVisualStyleBackColor = true;
            cmdAnnulerDateRequise.Click += new EventHandler(cmdAnnulerDateRequise_Click);
            cmdAnnulerDateRequise.MouseUp += new MouseEventHandler(cmdAnnulerDateRequise_MouseUp);//cmdOKDateRequise
            cmdOKDateRequise.BackColor = Color.Black;
            cmdOKDateRequise.FlatStyle = FlatStyle.Flat;
            cmdOKDateRequise.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdOKDateRequise.ForeColor = Color.White;
            cmdOKDateRequise.Location = new System.Drawing.Point(232, 54);
            cmdOKDateRequise.Name = "cmdOKDateRequise";
            cmdOKDateRequise.RightToLeft = RightToLeft.No;
            cmdOKDateRequise.Size = new Size(73, 25);
            cmdOKDateRequise.TabIndex = 93;
            cmdOKDateRequise.Text = "OK";
            cmdOKDateRequise.UseVisualStyleBackColor = true;
            cmdOKDateRequise.Click += new EventHandler(cmdOKDateRequise_Click);
            cmdOKDateRequise.MouseUp += new MouseEventHandler(cmdOKDateRequise_MouseUp);//mvwDateRequise
            mvwDateRequise.BackColor = Color.Black;
            mvwDateRequise.ForeColor = Color.White;
            mvwDateRequise.Location = new System.Drawing.Point(0, 6);
            mvwDateRequise.Name = "mvwDateRequise";
            mvwDateRequise.TabIndex = 96;//fraCommentaire
            fraCommentaire.BackColor = Color.Black;
            fraCommentaire.Controls.Add(txtCommentaire);
            fraCommentaire.Controls.Add(cmdOKCommentaire);
            fraCommentaire.Controls.Add(cmdAnnulerCommentaire);
            fraCommentaire.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            fraCommentaire.ForeColor = Color.White;
            fraCommentaire.Location = new System.Drawing.Point(344, 88);
            fraCommentaire.Name = "fraCommentaire";
            fraCommentaire.Padding = new Padding(0);
            fraCommentaire.RightToLeft = RightToLeft.No;
            fraCommentaire.Size = new Size(321, 193);
            fraCommentaire.TabIndex = 96;
            fraCommentaire.TabStop = false;
            fraCommentaire.Text = "Commentaire";
            fraCommentaire.Visible = false;//txtCommentaire
            txtCommentaire.AcceptsReturn = true;
            txtCommentaire.BackColor = SystemColors.Window;
            txtCommentaire.Cursor = Cursors.IBeam;
            txtCommentaire.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtCommentaire.ForeColor = SystemColors.WindowText;
            txtCommentaire.Location = new System.Drawing.Point(16, 30);
            txtCommentaire.MaxLength = 0;
            txtCommentaire.Multiline = true;
            txtCommentaire.Name = "txtCommentaire";
            txtCommentaire.RightToLeft = RightToLeft.No;
            txtCommentaire.Size = new Size(217, 161);
            txtCommentaire.TabIndex = 97;//cmdOKCommentaire
            cmdOKCommentaire.BackColor = Color.Black;
            cmdOKCommentaire.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdOKCommentaire.ForeColor = Color.White;
            cmdOKCommentaire.Location = new System.Drawing.Point(240, 54);
            cmdOKCommentaire.Name = "cmdOKCommentaire";
            cmdOKCommentaire.RightToLeft = RightToLeft.No;
            cmdOKCommentaire.Size = new Size(73, 25);
            cmdOKCommentaire.TabIndex = 98;
            cmdOKCommentaire.Text = "OK";
            cmdOKCommentaire.UseVisualStyleBackColor = true;
            cmdOKCommentaire.Click += new EventHandler(cmdOKCommentaire_Click);//cmdAnnulerCommentaire
            cmdAnnulerCommentaire.BackColor = Color.Black;
            cmdAnnulerCommentaire.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnnulerCommentaire.ForeColor = Color.White;
            cmdAnnulerCommentaire.Location = new System.Drawing.Point(240, 86);
            cmdAnnulerCommentaire.Name = "cmdAnnulerCommentaire";
            cmdAnnulerCommentaire.RightToLeft = RightToLeft.No;
            cmdAnnulerCommentaire.Size = new Size(73, 25);
            cmdAnnulerCommentaire.TabIndex = 99;
            cmdAnnulerCommentaire.Text = "Annuler";
            cmdAnnulerCommentaire.UseVisualStyleBackColor = true;
            cmdAnnulerCommentaire.Click += new EventHandler(cmdAnnulerCommentaire_Click);//fraPrixPiece
            fraPrixPiece.BackColor = Color.Black;
            fraPrixPiece.Controls.Add(txtPrixSpecial);
            fraPrixPiece.Controls.Add(txtPrixList);
            fraPrixPiece.Controls.Add(txtPrixNet);
            fraPrixPiece.Controls.Add(cmbfrs);
            fraPrixPiece.Controls.Add(optUSA);
            fraPrixPiece.Controls.Add(optCAN);
            fraPrixPiece.Controls.Add(optSpain);
            fraPrixPiece.Controls.Add(cmdOKPrix);
            fraPrixPiece.Controls.Add(cmdAnnulerPrix);
            fraPrixPiece.Controls.Add(mskEscompte);
            fraPrixPiece.Controls.Add(_Label1_0);
            fraPrixPiece.Controls.Add(imgCanada);
            fraPrixPiece.Controls.Add(_Label1_14);
            fraPrixPiece.Controls.Add(_Label1_16);
            fraPrixPiece.Controls.Add(_Label1_19);
            fraPrixPiece.Controls.Add(_Label1_20);
            fraPrixPiece.Controls.Add(imgSpain);
            fraPrixPiece.Controls.Add(imgEU);
            fraPrixPiece.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            fraPrixPiece.ForeColor = Color.White;
            fraPrixPiece.Location = new System.Drawing.Point(56, 426);
            fraPrixPiece.Name = "fraPrixPiece";
            fraPrixPiece.Padding = new Padding(0);
            fraPrixPiece.RightToLeft = RightToLeft.No;
            fraPrixPiece.Size = new Size(593, 153);
            fraPrixPiece.TabIndex = 76;
            fraPrixPiece.TabStop = false;
            fraPrixPiece.Text = "Fournisseurs";
            fraPrixPiece.Visible = false;//txtPrixSpecial
            txtPrixSpecial.AcceptsReturn = true;
            txtPrixSpecial.BackColor = Color.White;
            txtPrixSpecial.Cursor = Cursors.IBeam;
            txtPrixSpecial.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtPrixSpecial.ForeColor = SystemColors.WindowText;
            txtPrixSpecial.Location = new System.Drawing.Point(328, 110);
            txtPrixSpecial.MaxLength = 0;
            txtPrixSpecial.Name = "txtPrixSpecial";
            txtPrixSpecial.RightToLeft = RightToLeft.No;
            txtPrixSpecial.Size = new Size(57, 20);
            txtPrixSpecial.TabIndex = 86;
            txtPrixSpecial.TextChanged += new EventHandler(txtPrixSpecial_TextChanged);
            txtPrixSpecial.Leave += new EventHandler(txtPrixSpecial_Leave);//txtPrixList
            txtPrixList.AcceptsReturn = true;
            txtPrixList.BackColor = Color.White;
            txtPrixList.Cursor = Cursors.IBeam;
            txtPrixList.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtPrixList.ForeColor = SystemColors.WindowText;
            txtPrixList.Location = new System.Drawing.Point(328, 38);
            txtPrixList.MaxLength = 0;
            txtPrixList.Name = "txtPrixList";
            txtPrixList.RightToLeft = RightToLeft.No;
            txtPrixList.Size = new Size(73, 20);
            txtPrixList.TabIndex = 80;
            txtPrixList.Leave += new EventHandler(txtPrixList_Leave);//txtPrixNet
            txtPrixNet.AcceptsReturn = true;
            txtPrixNet.BackColor = Color.White;
            txtPrixNet.Cursor = Cursors.IBeam;
            txtPrixNet.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtPrixNet.ForeColor = SystemColors.WindowText;
            txtPrixNet.Location = new System.Drawing.Point(328, 86);
            txtPrixNet.MaxLength = 0;
            txtPrixNet.Name = "txtPrixNet";
            txtPrixNet.RightToLeft = RightToLeft.No;
            txtPrixNet.Size = new Size(57, 20);
            txtPrixNet.TabIndex = 84;
            txtPrixNet.TextChanged += new EventHandler(txtPrixNet_TextChanged);
            txtPrixNet.Enter += new EventHandler(txtPrixNet_Enter);
            txtPrixNet.Leave += new EventHandler(txtPrixNet_Leave);//cmbfrs
            cmbfrs.BackColor = SystemColors.Window;
            cmbfrs.FlatStyle = FlatStyle.Flat;
            cmbfrs.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbfrs.ForeColor = SystemColors.WindowText;
            cmbfrs.Location = new System.Drawing.Point(16, 38);
            cmbfrs.Name = "cmbfrs";
            cmbfrs.RightToLeft = RightToLeft.No;
            cmbfrs.Size = new Size(185, 22);
            cmbfrs.TabIndex = 78;//optUSA
            optUSA.BackColor = Color.Black;
            optUSA.FlatStyle = FlatStyle.Flat;
            optUSA.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            optUSA.ForeColor = Color.White;
            optUSA.Location = new System.Drawing.Point(488, 22);
            optUSA.Name = "optUSA";
            optUSA.RightToLeft = RightToLeft.No;
            optUSA.Size = new Size(49, 17);
            optUSA.TabIndex = 88;
            optUSA.TabStop = true;
            optUSA.Text = "USA";
            optUSA.UseVisualStyleBackColor = true;
            optUSA.CheckedChanged += new EventHandler(optUSA_CheckedChanged);//optCAN
            optCAN.BackColor = Color.Black;
            optCAN.Checked = true;
            optCAN.FlatStyle = FlatStyle.Flat;
            optCAN.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            optCAN.ForeColor = Color.White;
            optCAN.Location = new System.Drawing.Point(440, 22);
            optCAN.Name = "optCAN";
            optCAN.RightToLeft = RightToLeft.No;
            optCAN.Size = new Size(49, 17);
            optCAN.TabIndex = 87;
            optCAN.TabStop = true;
            optCAN.Text = "CAN";
            optCAN.UseVisualStyleBackColor = true;
            optCAN.CheckedChanged += new EventHandler(optCAN_CheckedChanged);//optSpain
            optSpain.BackColor = Color.Black;
            optSpain.FlatStyle = FlatStyle.Flat;
            optSpain.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            optSpain.ForeColor = Color.White;
            optSpain.Location = new System.Drawing.Point(536, 22);
            optSpain.Name = "optSpain";
            optSpain.RightToLeft = RightToLeft.No;
            optSpain.Size = new Size(49, 17);
            optSpain.TabIndex = 90;
            optSpain.TabStop = true;
            optSpain.Text = "SPA";
            optSpain.UseVisualStyleBackColor = true;
            optSpain.CheckedChanged += new EventHandler(optSpain_CheckedChanged);//cmdOKPrix
            cmdOKPrix.BackColor = Color.Black;
            cmdOKPrix.FlatStyle = FlatStyle.Flat;
            cmdOKPrix.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdOKPrix.ForeColor = Color.White;
            cmdOKPrix.Location = new System.Drawing.Point(496, 126);
            cmdOKPrix.Name = "cmdOKPrix";
            cmdOKPrix.RightToLeft = RightToLeft.No;
            cmdOKPrix.Size = new Size(73, 25);
            cmdOKPrix.TabIndex = 94;
            cmdOKPrix.Text = "OK";
            cmdOKPrix.UseVisualStyleBackColor = true;
            cmdOKPrix.Click += new EventHandler(cmdOKPrix_Click);//cmdAnnulerPrix
            cmdAnnulerPrix.BackColor = Color.Black;
            cmdAnnulerPrix.FlatStyle = FlatStyle.Flat;
            cmdAnnulerPrix.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnnulerPrix.ForeColor = Color.White;
            cmdAnnulerPrix.Location = new System.Drawing.Point(416, 126);
            cmdAnnulerPrix.Name = "cmdAnnulerPrix";
            cmdAnnulerPrix.RightToLeft = RightToLeft.No;
            cmdAnnulerPrix.Size = new Size(73, 25);
            cmdAnnulerPrix.TabIndex = 92;
            cmdAnnulerPrix.Text = "Annuler";
            cmdAnnulerPrix.UseVisualStyleBackColor = true;
            cmdAnnulerPrix.Click += new EventHandler(cmdAnnulerPrix_Click);//mskEscompte
            mskEscompte.AllowPromptAsInput = false;
            mskEscompte.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            mskEscompte.Location = new System.Drawing.Point(328, 62);
            mskEscompte.Name = "mskEscompte";
            mskEscompte.Size = new Size(57, 20);
            mskEscompte.TabIndex = 82;//_Label1_0
            _Label1_0.BackColor = Color.Transparent;
            _Label1_0.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            _Label1_0.ForeColor = Color.White;
            _Label1_0.Location = new System.Drawing.Point(248, 110);
            _Label1_0.Name = "_Label1_0";
            _Label1_0.RightToLeft = RightToLeft.No;
            _Label1_0.Size = new Size(81, 17);
            _Label1_0.TabIndex = 85;
            _Label1_0.Text = "Prix Spécial :";//imgCanada
            imgCanada.Image = (Image)resources.GetObject("imgCanada.Image");
            imgCanada.Location = new System.Drawing.Point(456, 46);
            imgCanada.Name = "imgCanada";
            imgCanada.Size = new Size(112, 71);
            imgCanada.SizeMode = PictureBoxSizeMode.StretchImage;
            imgCanada.TabIndex = 95;
            imgCanada.TabStop = false;
            imgCanada.Visible = false;//_Label1_14
            _Label1_14.BackColor = Color.Transparent;
            _Label1_14.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            _Label1_14.ForeColor = Color.White;
            _Label1_14.Location = new System.Drawing.Point(16, 22);
            _Label1_14.Name = "_Label1_14";
            _Label1_14.RightToLeft = RightToLeft.No;
            _Label1_14.Size = new Size(81, 17);
            _Label1_14.TabIndex = 77;
            _Label1_14.Text = "Distributeur :";//_Label1_16
            _Label1_16.BackColor = Color.Transparent;
            _Label1_16.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            _Label1_16.ForeColor = Color.White;
            _Label1_16.Location = new System.Drawing.Point(248, 38);
            _Label1_16.Name = "_Label1_16";
            _Label1_16.RightToLeft = RightToLeft.No;
            _Label1_16.Size = new Size(65, 17);
            _Label1_16.TabIndex = 79;
            _Label1_16.Text = "Prix Listé :";//_Label1_19
            _Label1_19.BackColor = Color.Transparent;
            _Label1_19.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            _Label1_19.ForeColor = Color.White;
            _Label1_19.Location = new System.Drawing.Point(248, 62);
            _Label1_19.Name = "_Label1_19";
            _Label1_19.RightToLeft = RightToLeft.No;
            _Label1_19.Size = new Size(73, 17);
            _Label1_19.TabIndex = 81;
            _Label1_19.Text = "Escompte :";//_Label1_20
            _Label1_20.BackColor = Color.Transparent;
            _Label1_20.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            _Label1_20.ForeColor = Color.White;
            _Label1_20.Location = new System.Drawing.Point(248, 86);
            _Label1_20.Name = "_Label1_20";
            _Label1_20.RightToLeft = RightToLeft.No;
            _Label1_20.Size = new Size(73, 17);
            _Label1_20.TabIndex = 83;
            _Label1_20.Text = "Prix Net :";//imgSpain
            imgSpain.Image = (Image)resources.GetObject("imgSpain.Image");
            imgSpain.Location = new System.Drawing.Point(456, 46);
            imgSpain.Name = "imgSpain";
            imgSpain.Size = new Size(112, 71);
            imgSpain.SizeMode = PictureBoxSizeMode.StretchImage;
            imgSpain.TabIndex = 96;
            imgSpain.TabStop = false;
            imgSpain.Visible = false;//imgEU
            imgEU.Image = (Image)resources.GetObject("imgEU.Image");
            imgEU.Location = new System.Drawing.Point(456, 46);
            imgEU.Name = "imgEU";
            imgEU.Size = new Size(112, 71);
            imgEU.SizeMode = PictureBoxSizeMode.StretchImage;
            imgEU.TabIndex = 97;
            imgEU.TabStop = false;
            imgEU.Visible = false;//cmdAnglaisFrancais
            cmdAnglaisFrancais.BackColor = Color.Black;
            cmdAnglaisFrancais.FlatStyle = FlatStyle.Flat;
            cmdAnglaisFrancais.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnglaisFrancais.ForeColor = Color.White;
            cmdAnglaisFrancais.Location = new System.Drawing.Point(80, 610);
            cmdAnglaisFrancais.Name = "cmdAnglaisFrancais";
            cmdAnglaisFrancais.RightToLeft = RightToLeft.No;
            cmdAnglaisFrancais.Size = new Size(65, 25);
            cmdAnglaisFrancais.TabIndex = 102;
            cmdAnglaisFrancais.Text = "Anglais";
            cmdAnglaisFrancais.UseVisualStyleBackColor = true;
            cmdAnglaisFrancais.Click += new EventHandler(cmdAnglaisFrancais_Click);//cmdReset
            cmdReset.BackColor = Color.Black;
            cmdReset.FlatStyle = FlatStyle.Flat;
            cmdReset.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdReset.ForeColor = Color.White;
            cmdReset.Location = new System.Drawing.Point(224, 610);
            cmdReset.Name = "cmdReset";
            cmdReset.RightToLeft = RightToLeft.No;
            cmdReset.Size = new Size(65, 25);
            cmdReset.TabIndex = 107;
            cmdReset.Text = "Reset";
            cmdReset.UseVisualStyleBackColor = true;
            cmdReset.Visible = false;
            cmdReset.Click += new EventHandler(cmdReset_Click);//cmdRapportFACT
            cmdRapportFACT.BackColor = Color.Black;
            cmdRapportFACT.FlatStyle = FlatStyle.Flat;
            cmdRapportFACT.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdRapportFACT.ForeColor = Color.White;
            cmdRapportFACT.Location = new System.Drawing.Point(152, 610);
            cmdRapportFACT.Name = "cmdRapportFACT";
            cmdRapportFACT.RightToLeft = RightToLeft.No;
            cmdRapportFACT.Size = new Size(65, 25);
            cmdRapportFACT.TabIndex = 106;
            cmdRapportFACT.Text = "Fact";
            cmdRapportFACT.UseVisualStyleBackColor = true;
            cmdRapportFACT.Click += new EventHandler(cmdRapportFACT_Click);//cmdTexte
            cmdTexte.BackColor = Color.Black;
            cmdTexte.FlatStyle = FlatStyle.Flat;
            cmdTexte.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdTexte.ForeColor = Color.White;
            cmdTexte.Location = new System.Drawing.Point(8, 610);
            cmdTexte.Name = "cmdTexte";
            cmdTexte.RightToLeft = RightToLeft.No;
            cmdTexte.Size = new Size(65, 25);
            cmdTexte.TabIndex = 101;
            cmdTexte.Text = "Texte";
            cmdTexte.UseVisualStyleBackColor = true;
            cmdTexte.Click += new EventHandler(cmdTexte_Click);//cmdDemande
            cmdDemande.BackColor = Color.Black;
            cmdDemande.FlatStyle = FlatStyle.Flat;
            cmdDemande.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdDemande.ForeColor = Color.White;
            cmdDemande.Location = new System.Drawing.Point(152, 610);
            cmdDemande.Name = "cmdDemande";
            cmdDemande.RightToLeft = RightToLeft.No;
            cmdDemande.Size = new Size(65, 25);
            cmdDemande.TabIndex = 103;
            cmdDemande.Text = "Demande";
            cmdDemande.UseVisualStyleBackColor = true;
            cmdDemande.Click += new EventHandler(cmdDemande_Click);//cmdSortieMagasin
            cmdSortieMagasin.BackColor = Color.Black;
            cmdSortieMagasin.FlatStyle = FlatStyle.Flat;
            cmdSortieMagasin.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdSortieMagasin.ForeColor = Color.White;
            cmdSortieMagasin.Location = new System.Drawing.Point(360, 610);
            cmdSortieMagasin.Name = "cmdSortieMagasin";
            cmdSortieMagasin.RightToLeft = RightToLeft.No;
            cmdSortieMagasin.Size = new Size(65, 25);
            cmdSortieMagasin.TabIndex = 111;
            cmdSortieMagasin.Text = "Magasin";
            cmdSortieMagasin.UseVisualStyleBackColor = true;
            cmdSortieMagasin.Click += new EventHandler(cmdSortieMagasin_Click);//cmdMauvaisPrix
            cmdMauvaisPrix.BackColor = Color.Black;
            cmdMauvaisPrix.FlatStyle = FlatStyle.Flat;
            cmdMauvaisPrix.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdMauvaisPrix.ForeColor = Color.White;
            cmdMauvaisPrix.Location = new System.Drawing.Point(216, 610);
            cmdMauvaisPrix.Name = "cmdMauvaisPrix";
            cmdMauvaisPrix.RightToLeft = RightToLeft.No;
            cmdMauvaisPrix.Size = new Size(65, 25);
            cmdMauvaisPrix.TabIndex = 105;
            cmdMauvaisPrix.Text = "Prix";
            cmdMauvaisPrix.UseVisualStyleBackColor = true;
            cmdMauvaisPrix.Click += new EventHandler(cmdMauvaisPrix_Click);//cmdMaterielInutile
            cmdMaterielInutile.BackColor = Color.Black;
            cmdMaterielInutile.FlatStyle = FlatStyle.Flat;
            cmdMaterielInutile.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdMaterielInutile.ForeColor = Color.White;
            cmdMaterielInutile.Location = new System.Drawing.Point(360, 610);
            cmdMaterielInutile.Name = "cmdMaterielInutile";
            cmdMaterielInutile.RightToLeft = RightToLeft.No;
            cmdMaterielInutile.Size = new Size(65, 25);
            cmdMaterielInutile.TabIndex = 113;
            cmdMaterielInutile.Text = "Inutile";
            cmdMaterielInutile.UseVisualStyleBackColor = true;
            cmdMaterielInutile.Click += new EventHandler(cmdMaterielInutile_Click);//cmdCreerProjet
            cmdCreerProjet.BackColor = Color.Black;
            cmdCreerProjet.FlatStyle = FlatStyle.Flat;
            cmdCreerProjet.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdCreerProjet.ForeColor = Color.White;
            cmdCreerProjet.Location = new System.Drawing.Point(288, 610);
            cmdCreerProjet.Name = "cmdCreerProjet";
            cmdCreerProjet.RightToLeft = RightToLeft.No;
            cmdCreerProjet.Size = new Size(65, 25);
            cmdCreerProjet.TabIndex = 109;
            cmdCreerProjet.Text = "Créer proj.";
            cmdCreerProjet.UseVisualStyleBackColor = true;
            cmdCreerProjet.Click += new EventHandler(cmdCreerProjet_Click);//cmdCatalogue
            cmdCatalogue.BackColor = Color.Black;
            cmdCatalogue.FlatStyle = FlatStyle.Flat;
            cmdCatalogue.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdCatalogue.ForeColor = Color.White;
            cmdCatalogue.Location = new System.Drawing.Point(360, 610);
            cmdCatalogue.Name = "cmdCatalogue";
            cmdCatalogue.RightToLeft = RightToLeft.No;
            cmdCatalogue.Size = new Size(65, 25);
            cmdCatalogue.TabIndex = 112;
            cmdCatalogue.Text = "Catalogue";
            cmdCatalogue.UseVisualStyleBackColor = true;
            cmdCatalogue.Click += new EventHandler(cmdCatalogue_Click);//cmdBonCommande
            cmdBonCommande.BackColor = Color.Black;
            cmdBonCommande.FlatStyle = FlatStyle.Flat;
            cmdBonCommande.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdBonCommande.ForeColor = Color.White;
            cmdBonCommande.Location = new System.Drawing.Point(224, 610);
            cmdBonCommande.Name = "cmdBonCommande";
            cmdBonCommande.RightToLeft = RightToLeft.No;
            cmdBonCommande.Size = new Size(65, 25);
            cmdBonCommande.TabIndex = 110;
            cmdBonCommande.Text = "Bon Com.";
            cmdBonCommande.UseVisualStyleBackColor = true;
            cmdBonCommande.Visible = false;
            cmdBonCommande.Click += new EventHandler(cmdBonCommande_Click);//cmdRetour
            cmdRetour.BackColor = Color.Black;
            cmdRetour.FlatStyle = FlatStyle.Flat;
            cmdRetour.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdRetour.ForeColor = Color.White;
            cmdRetour.Location = new System.Drawing.Point(360, 610);
            cmdRetour.Name = "cmdRetour";
            cmdRetour.RightToLeft = RightToLeft.No;
            cmdRetour.Size = new Size(65, 25);
            cmdRetour.TabIndex = 114;
            cmdRetour.Text = "Retour";
            cmdRetour.UseVisualStyleBackColor = true;
            cmdRetour.Click += new EventHandler(cmdRetour_Click);//cmdExtra
            cmdExtra.BackColor = Color.Black;
            cmdExtra.FlatStyle = FlatStyle.Flat;
            cmdExtra.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdExtra.ForeColor = Color.White;
            cmdExtra.Location = new System.Drawing.Point(152, 610);
            cmdExtra.Name = "cmdExtra";
            cmdExtra.RightToLeft = RightToLeft.No;
            cmdExtra.Size = new Size(65, 25);
            cmdExtra.TabIndex = 104;
            cmdExtra.Text = "Extra";
            cmdExtra.UseVisualStyleBackColor = true;
            cmdExtra.Click += new EventHandler(cmdExtra_Click);//cmdCopier
            cmdCopier.BackColor = Color.Black;
            cmdCopier.FlatStyle = FlatStyle.Flat;
            cmdCopier.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdCopier.ForeColor = Color.White;
            cmdCopier.Location = new System.Drawing.Point(432, 610);
            cmdCopier.Name = "cmdCopier";
            cmdCopier.RightToLeft = RightToLeft.No;
            cmdCopier.Size = new Size(65, 25);
            cmdCopier.TabIndex = 115;
            cmdCopier.Text = "Copier";
            cmdCopier.UseVisualStyleBackColor = true;
            cmdCopier.Click += new EventHandler(cmdCopier_Click);//cmdImprimer
            cmdImprimer.BackColor = Color.Black;
            cmdImprimer.FlatStyle = FlatStyle.Flat;
            cmdImprimer.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdImprimer.ForeColor = Color.White;
            cmdImprimer.Location = new System.Drawing.Point(8, 610);
            cmdImprimer.Name = "cmdImprimer";
            cmdImprimer.RightToLeft = RightToLeft.No;
            cmdImprimer.Size = new Size(65, 25);
            cmdImprimer.TabIndex = 100;
            cmdImprimer.Text = "Imprimer";
            cmdImprimer.UseVisualStyleBackColor = true;
            cmdImprimer.Click += new EventHandler(cmdImprimer_Click);//cmdAjouter
            cmdAjouter.BackColor = Color.Black;
            cmdAjouter.FlatStyle = FlatStyle.Flat;
            cmdAjouter.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAjouter.ForeColor = Color.White;
            cmdAjouter.Location = new System.Drawing.Point(504, 610);
            cmdAjouter.Name = "cmdAjouter";
            cmdAjouter.RightToLeft = RightToLeft.No;
            cmdAjouter.Size = new Size(65, 25);
            cmdAjouter.TabIndex = 116;
            cmdAjouter.Text = "Ajouter";
            cmdAjouter.UseVisualStyleBackColor = true;
            cmdAjouter.Click += new EventHandler(Cmdajouter_Click);//cmdFermer
            cmdFermer.BackColor = Color.Black;
            cmdFermer.FlatStyle = FlatStyle.Flat;
            cmdFermer.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdFermer.ForeColor = Color.White;
            cmdFermer.Location = new System.Drawing.Point(720, 610);
            cmdFermer.Name = "cmdFermer";
            cmdFermer.RightToLeft = RightToLeft.No;
            cmdFermer.Size = new Size(65, 25);
            cmdFermer.TabIndex = 121;
            cmdFermer.Text = "Fermer";
            cmdFermer.UseVisualStyleBackColor = true;
            cmdFermer.Click += new EventHandler(Cmdfermer_Click);//cmdAnnuler
            cmdAnnuler.BackColor = Color.Black;
            cmdAnnuler.FlatStyle = FlatStyle.Flat;
            cmdAnnuler.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdAnnuler.ForeColor = Color.White;
            cmdAnnuler.Location = new System.Drawing.Point(648, 610);
            cmdAnnuler.Name = "cmdAnnuler";
            cmdAnnuler.RightToLeft = RightToLeft.No;
            cmdAnnuler.Size = new Size(65, 25);
            cmdAnnuler.TabIndex = 119;
            cmdAnnuler.Text = "Annuler";
            cmdAnnuler.UseVisualStyleBackColor = true;
            cmdAnnuler.Click += new EventHandler(cmdAnnuler_Click);//cmdEnregistrer
            cmdEnregistrer.BackColor = Color.Black;
            cmdEnregistrer.FlatStyle = FlatStyle.Flat;
            cmdEnregistrer.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdEnregistrer.ForeColor = Color.White;
            cmdEnregistrer.Location = new System.Drawing.Point(576, 610);
            cmdEnregistrer.Name = "cmdEnregistrer";
            cmdEnregistrer.RightToLeft = RightToLeft.No;
            cmdEnregistrer.Size = new Size(65, 25);
            cmdEnregistrer.TabIndex = 117;
            cmdEnregistrer.Text = "Enregistrer";
            cmdEnregistrer.UseVisualStyleBackColor = true;
            cmdEnregistrer.Click += new EventHandler(cmdEnregistrer_Click);//cmdModifier
            cmdModifier.BackColor = Color.Black;
            cmdModifier.FlatStyle = FlatStyle.Flat;
            cmdModifier.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdModifier.ForeColor = Color.White;
            cmdModifier.Location = new System.Drawing.Point(648, 610);
            cmdModifier.Name = "cmdModifier";
            cmdModifier.RightToLeft = RightToLeft.No;
            cmdModifier.Size = new Size(65, 25);
            cmdModifier.TabIndex = 120;
            cmdModifier.Text = "Modifier";
            cmdModifier.UseVisualStyleBackColor = true;
            cmdModifier.Click += new EventHandler(cmdModintier_Click1);//cmdSupprimer
            cmdSupprimer.BackColor = Color.Black;
            cmdSupprimer.FlatStyle = FlatStyle.Flat;
            cmdSupprimer.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdSupprimer.ForeColor = Color.White;
            cmdSupprimer.Location = new System.Drawing.Point(576, 610);
            cmdSupprimer.Name = "cmdSupprimer";
            cmdSupprimer.RightToLeft = RightToLeft.No;
            cmdSupprimer.Size = new Size(65, 25);
            cmdSupprimer.TabIndex = 118;
            cmdSupprimer.Text = "Supprimer";
            cmdSupprimer.UseVisualStyleBackColor = true;
            cmdSupprimer.Click += new EventHandler(cmdsupprimer_Click);//fraCertifDelais
            fraCertifDelais.AutoSize = true;
            fraCertifDelais.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            fraCertifDelais.BackColor = Color.Black;
            fraCertifDelais.Controls.Add(picApprob);
            fraCertifDelais.Controls.Add(txtDelais);
            fraCertifDelais.Controls.Add(cmdDate);
            fraCertifDelais.Controls.Add(Label21);
            fraCertifDelais.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            fraCertifDelais.ForeColor = Color.White;
            fraCertifDelais.Location = new System.Drawing.Point(632, 156);
            fraCertifDelais.Name = "fraCertifDelais";
            fraCertifDelais.RightToLeft = RightToLeft.No;
            fraCertifDelais.Size = new Size(151, 82);
            fraCertifDelais.TabIndex = 42;
            fraCertifDelais.Text = "Frame1";//picApprob
            picApprob.AutoSize = true;
            picApprob.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            picApprob.BackColor = Color.Black;
            picApprob.Controls.Add(chkUR);
            picApprob.Controls.Add(chkCE);
            picApprob.Controls.Add(chkCUR);
            picApprob.Controls.Add(chkUL);
            picApprob.Controls.Add(chkCUL);
            picApprob.Controls.Add(chkCSA);
            picApprob.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            picApprob.ForeColor = Color.White;
            picApprob.Location = new System.Drawing.Point(0, 14);
            picApprob.Name = "picApprob";
            picApprob.RightToLeft = RightToLeft.No;
            picApprob.Size = new Size(148, 42);
            picApprob.TabIndex = 43;
            picApprob.TabStop = true;//chkUR
            chkUR.BackColor = Color.Black;
            chkUR.CheckAlign = ContentAlignment.MiddleRight;
            chkUR.FlatStyle = FlatStyle.Flat;
            chkUR.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            chkUR.ForeColor = Color.White;
            chkUR.Location = new System.Drawing.Point(104, 6);
            chkUR.Name = "chkUR";
            chkUR.RightToLeft = RightToLeft.No;
            chkUR.Size = new Size(41, 17);
            chkUR.TabIndex = 46;
            chkUR.Text = "UR";
            chkUR.UseVisualStyleBackColor = true;//chkCE
            chkCE.BackColor = Color.Black;
            chkCE.CheckAlign = ContentAlignment.MiddleRight;
            chkCE.FlatStyle = FlatStyle.Flat;
            chkCE.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            chkCE.ForeColor = Color.White;
            chkCE.Location = new System.Drawing.Point(104, 22);
            chkCE.Name = "chkCE";
            chkCE.RightToLeft = RightToLeft.No;
            chkCE.Size = new Size(41, 17);
            chkCE.TabIndex = 49;
            chkCE.Text = "CE";
            chkCE.UseVisualStyleBackColor = true;//chkCUR
            chkCUR.BackColor = Color.Black;
            chkCUR.CheckAlign = ContentAlignment.MiddleRight;
            chkCUR.FlatStyle = FlatStyle.Flat;
            chkCUR.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            chkCUR.ForeColor = Color.White;
            chkCUR.Location = new System.Drawing.Point(48, 22);
            chkCUR.Name = "chkCUR";
            chkCUR.RightToLeft = RightToLeft.No;
            chkCUR.Size = new Size(49, 17);
            chkCUR.TabIndex = 47;
            chkCUR.Text = "cUR";
            chkCUR.UseVisualStyleBackColor = true;//chkUL
            chkUL.BackColor = Color.Black;
            chkUL.CheckAlign = ContentAlignment.MiddleRight;
            chkUL.FlatStyle = FlatStyle.Flat;
            chkUL.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            chkUL.ForeColor = Color.White;
            chkUL.Location = new System.Drawing.Point(56, 6);
            chkUL.Name = "chkUL";
            chkUL.RightToLeft = RightToLeft.No;
            chkUL.Size = new Size(41, 17);
            chkUL.TabIndex = 45;
            chkUL.Text = "UL";
            chkUL.UseVisualStyleBackColor = true;//chkCUL
            chkCUL.BackColor = Color.Black;
            chkCUL.CheckAlign = ContentAlignment.MiddleRight;
            chkCUL.FlatStyle = FlatStyle.Flat;
            chkCUL.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            chkCUL.ForeColor = Color.White;
            chkCUL.Location = new System.Drawing.Point(0, 22);
            chkCUL.Name = "chkCUL";
            chkCUL.RightToLeft = RightToLeft.No;
            chkCUL.Size = new Size(49, 17);
            chkCUL.TabIndex = 48;
            chkCUL.Text = "cUL";
            chkCUL.UseVisualStyleBackColor = true;//chkCSA
            chkCSA.BackColor = Color.Black;
            chkCSA.CheckAlign = ContentAlignment.MiddleRight;
            chkCSA.FlatStyle = FlatStyle.Flat;
            chkCSA.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            chkCSA.ForeColor = Color.White;
            chkCSA.Location = new System.Drawing.Point(0, 6);
            chkCSA.Name = "chkCSA";
            chkCSA.RightToLeft = RightToLeft.No;
            chkCSA.Size = new Size(49, 17);
            chkCSA.TabIndex = 44;
            chkCSA.Text = "CSA";
            chkCSA.UseVisualStyleBackColor = true;//txtDelais
            txtDelais.AcceptsReturn = true;
            txtDelais.BackColor = SystemColors.Window;
            txtDelais.Cursor = Cursors.IBeam;
            txtDelais.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtDelais.ForeColor = SystemColors.WindowText;
            txtDelais.Location = new System.Drawing.Point(48, 58);
            txtDelais.MaxLength = 0;
            txtDelais.Name = "txtDelais";
            txtDelais.ReadOnly = true;
            txtDelais.RightToLeft = RightToLeft.No;
            txtDelais.Size = new Size(65, 20);
            txtDelais.TabIndex = 50;//cmdDate
            cmdDate.BackColor = Color.Black;
            cmdDate.FlatStyle = FlatStyle.Flat;
            cmdDate.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            cmdDate.ForeColor = Color.White;
            cmdDate.Location = new System.Drawing.Point(120, 58);
            cmdDate.Name = "cmdDate";
            cmdDate.RightToLeft = RightToLeft.No;
            cmdDate.Size = new Size(25, 21);
            cmdDate.TabIndex = 52;
            cmdDate.Text = "...";
            cmdDate.UseVisualStyleBackColor = true;
            cmdDate.Visible = false;
            cmdDate.Click += new EventHandler(cmdDate_Click);//Label21
            Label21.BackColor = Color.Transparent;
            Label21.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label21.ForeColor = Color.White;
            Label21.Location = new System.Drawing.Point(16, 58);
            Label21.Name = "Label21";
            Label21.RightToLeft = RightToLeft.No;
            Label21.Size = new Size(33, 17);
            Label21.TabIndex = 51;
            Label21.Text = "Delais";//fraFsTransMarq
            fraFsTransMarq.BackColor = Color.Black;
            fraFsTransMarq.Controls.Add(txtPrixSoumission);
            fraFsTransMarq.Controls.Add(cmbTransport);
            fraFsTransMarq.Controls.Add(txtTransport);
            fraFsTransMarq.Controls.Add(txtPrixReception);
            fraFsTransMarq.Controls.Add(lblPrixSoumission);
            fraFsTransMarq.Controls.Add(lblPrixReception);
            fraFsTransMarq.Controls.Add(Label26);
            fraFsTransMarq.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            fraFsTransMarq.ForeColor = Color.White;
            fraFsTransMarq.Location = new System.Drawing.Point(847, 12);
            fraFsTransMarq.Name = "fraFsTransMarq";
            fraFsTransMarq.RightToLeft = RightToLeft.No;
            fraFsTransMarq.Size = new Size(137, 81);
            fraFsTransMarq.TabIndex = 33;//txtPrixSoumission
            txtPrixSoumission.AcceptsReturn = true;
            txtPrixSoumission.BackColor = Color.Black;
            txtPrixSoumission.Cursor = Cursors.IBeam;
            txtPrixSoumission.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtPrixSoumission.ForeColor = Color.White;
            txtPrixSoumission.Location = new System.Drawing.Point(72, 62);
            txtPrixSoumission.MaxLength = 0;
            txtPrixSoumission.Name = "txtPrixSoumission";
            txtPrixSoumission.ReadOnly = true;
            txtPrixSoumission.RightToLeft = RightToLeft.No;
            txtPrixSoumission.Size = new Size(65, 20);
            txtPrixSoumission.TabIndex = 40;//cmbTransport
            cmbTransport.BackColor = Color.Black;
            cmbTransport.DropDownStyle = ComboBoxStyle.DropDownList;
            cmbTransport.FlatStyle = FlatStyle.Flat;
            cmbTransport.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbTransport.ForeColor = Color.White;
            cmbTransport.Items.AddRange(new object[] {
            "Client",
            "Fab Granby"});
            cmbTransport.Location = new System.Drawing.Point(64, 6);
            cmbTransport.Name = "cmbTransport";
            cmbTransport.RightToLeft = RightToLeft.No;
            cmbTransport.Size = new Size(73, 22);
            cmbTransport.Sorted = true;
            cmbTransport.TabIndex = 34;
            cmbTransport.Visible = false;//txtTransport
            txtTransport.AcceptsReturn = true;
            txtTransport.BackColor = SystemColors.Window;
            txtTransport.Cursor = Cursors.IBeam;
            txtTransport.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtTransport.ForeColor = SystemColors.WindowText;
            txtTransport.Location = new System.Drawing.Point(64, 6);
            txtTransport.MaxLength = 0;
            txtTransport.Name = "txtTransport";
            txtTransport.ReadOnly = true;
            txtTransport.RightToLeft = RightToLeft.No;
            txtTransport.Size = new Size(73, 20);
            txtTransport.TabIndex = 35;
            txtTransport.Text = "Text1";//txtPrixReception
            txtPrixReception.AcceptsReturn = true;
            txtPrixReception.BackColor = Color.Black;
            txtPrixReception.Cursor = Cursors.IBeam;
            txtPrixReception.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtPrixReception.ForeColor = Color.White;
            txtPrixReception.Location = new System.Drawing.Point(72, 38);
            txtPrixReception.MaxLength = 0;
            txtPrixReception.Name = "txtPrixReception";
            txtPrixReception.ReadOnly = true;
            txtPrixReception.RightToLeft = RightToLeft.No;
            txtPrixReception.Size = new Size(65, 20);
            txtPrixReception.TabIndex = 38;//lblPrixSoumission
            lblPrixSoumission.BackColor = Color.Transparent;
            lblPrixSoumission.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblPrixSoumission.ForeColor = Color.White;
            lblPrixSoumission.Location = new System.Drawing.Point(0, 62);
            lblPrixSoumission.Name = "lblPrixSoumission";
            lblPrixSoumission.RightToLeft = RightToLeft.No;
            lblPrixSoumission.Size = new Size(81, 17);
            lblPrixSoumission.TabIndex = 39;
            lblPrixSoumission.Text = "$ Soumission : ";//lblPrixReception
            lblPrixReception.BackColor = Color.Transparent;
            lblPrixReception.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblPrixReception.ForeColor = Color.White;
            lblPrixReception.Location = new System.Drawing.Point(0, 38);
            lblPrixReception.Name = "lblPrixReception";
            lblPrixReception.RightToLeft = RightToLeft.No;
            lblPrixReception.Size = new Size(81, 17);
            lblPrixReception.TabIndex = 37;
            lblPrixReception.Text = "$ Réception : ";//Label26
            Label26.BackColor = Color.Transparent;
            Label26.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label26.ForeColor = Color.White;
            Label26.Location = new System.Drawing.Point(8, 6);
            Label26.Name = "Label26";
            Label26.RightToLeft = RightToLeft.No;
            Label26.Size = new Size(57, 17);
            Label26.TabIndex = 36;
            Label26.Text = "Transport";//cmdRafraichir
            cmdRafraichir.AutoSize = true;
            cmdRafraichir.BackColor = Color.Black;
            cmdRafraichir.FlatStyle = FlatStyle.Flat;
            cmdRafraichir.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdRafraichir.ForeColor = Color.White;
            cmdRafraichir.Location = new System.Drawing.Point(544, 196);
            cmdRafraichir.Name = "cmdRafraichir";
            cmdRafraichir.RightToLeft = RightToLeft.No;
            cmdRafraichir.Size = new Size(66, 26);
            cmdRafraichir.TabIndex = 66;
            cmdRafraichir.Text = "Rafraichir";
            cmdRafraichir.UseVisualStyleBackColor = true;
            cmdRafraichir.Click += new EventHandler(cmdRafraichir_Click);//cmdTri
            cmdTri.AutoSize = true;
            cmdTri.BackColor = Color.Black;
            cmdTri.FlatStyle = FlatStyle.Flat;
            cmdTri.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdTri.ForeColor = Color.White;
            cmdTri.Location = new System.Drawing.Point(544, 216);
            cmdTri.Name = "cmdTri";
            cmdTri.RightToLeft = RightToLeft.No;
            cmdTri.Size = new Size(65, 26);
            cmdTri.TabIndex = 73;
            cmdTri.Text = "Trier";
            cmdTri.UseVisualStyleBackColor = true;
            cmdTri.Click += new EventHandler(cmdTri_Click);//fraPrix
            fraPrix.BackColor = Color.Black;
            fraPrix.Controls.Add(txtTotalTemps);
            fraPrix.Controls.Add(txtTotalPieces);
            fraPrix.Controls.Add(txtProfit);
            fraPrix.Controls.Add(txtImprevus);
            fraPrix.Controls.Add(txtCommission);
            fraPrix.Controls.Add(txtPrixTotal);
            fraPrix.Controls.Add(Label8);
            fraPrix.Controls.Add(Label7);
            fraPrix.Controls.Add(Label5);
            fraPrix.Controls.Add(lblTotalPieces);
            fraPrix.Controls.Add(lblImprevus);
            fraPrix.Controls.Add(lblTotalTemps);
            fraPrix.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            fraPrix.ForeColor = Color.White;
            fraPrix.Location = new System.Drawing.Point(847, 118);
            fraPrix.Name = "fraPrix";
            fraPrix.RightToLeft = RightToLeft.No;
            fraPrix.Size = new Size(177, 161);
            fraPrix.TabIndex = 53;
            fraPrix.Text = "Frame1";//txtTotalTemps
            txtTotalTemps.AcceptsReturn = true;
            txtTotalTemps.BackColor = SystemColors.Window;
            txtTotalTemps.BorderStyle = BorderStyle.FixedSingle;
            txtTotalTemps.Cursor = Cursors.IBeam;
            txtTotalTemps.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtTotalTemps.ForeColor = SystemColors.WindowText;
            txtTotalTemps.Location = new System.Drawing.Point(80, 14);
            txtTotalTemps.MaxLength = 0;
            txtTotalTemps.Name = "txtTotalTemps";
            txtTotalTemps.ReadOnly = true;
            txtTotalTemps.RightToLeft = RightToLeft.No;
            txtTotalTemps.Size = new Size(89, 20);
            txtTotalTemps.TabIndex = 128;
            txtTotalTemps.TextAlign = HorizontalAlignment.Right;//txtTotalPieces
            txtTotalPieces.AcceptsReturn = true;
            txtTotalPieces.BackColor = SystemColors.Window;
            txtTotalPieces.BorderStyle = BorderStyle.FixedSingle;
            txtTotalPieces.Cursor = Cursors.IBeam;
            txtTotalPieces.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtTotalPieces.ForeColor = SystemColors.WindowText;
            txtTotalPieces.Location = new System.Drawing.Point(80, 38);
            txtTotalPieces.MaxLength = 0;
            txtTotalPieces.Name = "txtTotalPieces";
            txtTotalPieces.ReadOnly = true;
            txtTotalPieces.RightToLeft = RightToLeft.No;
            txtTotalPieces.Size = new Size(89, 20);
            txtTotalPieces.TabIndex = 127;
            txtTotalPieces.TextAlign = HorizontalAlignment.Right;//txtProfit
            txtProfit.AcceptsReturn = true;
            txtProfit.BackColor = SystemColors.Window;
            txtProfit.BorderStyle = BorderStyle.FixedSingle;
            txtProfit.Cursor = Cursors.IBeam;
            txtProfit.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtProfit.ForeColor = SystemColors.WindowText;
            txtProfit.Location = new System.Drawing.Point(80, 62);
            txtProfit.MaxLength = 0;
            txtProfit.Name = "txtProfit";
            txtProfit.ReadOnly = true;
            txtProfit.RightToLeft = RightToLeft.No;
            txtProfit.Size = new Size(89, 20);
            txtProfit.TabIndex = 126;
            txtProfit.TextAlign = HorizontalAlignment.Right;//txtImprevus
            txtImprevus.AcceptsReturn = true;
            txtImprevus.BackColor = SystemColors.Window;
            txtImprevus.BorderStyle = BorderStyle.FixedSingle;
            txtImprevus.Cursor = Cursors.IBeam;
            txtImprevus.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtImprevus.ForeColor = SystemColors.WindowText;
            txtImprevus.Location = new System.Drawing.Point(80, 86);
            txtImprevus.MaxLength = 0;
            txtImprevus.Name = "txtImprevus";
            txtImprevus.ReadOnly = true;
            txtImprevus.RightToLeft = RightToLeft.No;
            txtImprevus.Size = new Size(89, 20);
            txtImprevus.TabIndex = 125;
            txtImprevus.TextAlign = HorizontalAlignment.Right;//txtCommission
            txtCommission.AcceptsReturn = true;
            txtCommission.BackColor = SystemColors.Window;
            txtCommission.BorderStyle = BorderStyle.FixedSingle;
            txtCommission.Cursor = Cursors.IBeam;
            txtCommission.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtCommission.ForeColor = SystemColors.WindowText;
            txtCommission.Location = new System.Drawing.Point(80, 110);
            txtCommission.MaxLength = 0;
            txtCommission.Name = "txtCommission";
            txtCommission.ReadOnly = true;
            txtCommission.RightToLeft = RightToLeft.No;
            txtCommission.Size = new Size(89, 20);
            txtCommission.TabIndex = 124;
            txtCommission.TextAlign = HorizontalAlignment.Right;//txtPrixTotal
            txtPrixTotal.AcceptsReturn = true;
            txtPrixTotal.BackColor = Color.White;
            txtPrixTotal.BorderStyle = BorderStyle.FixedSingle;
            txtPrixTotal.Cursor = Cursors.IBeam;
            txtPrixTotal.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            txtPrixTotal.ForeColor = Color.Red;
            txtPrixTotal.Location = new System.Drawing.Point(80, 134);
            txtPrixTotal.MaxLength = 0;
            txtPrixTotal.Name = "txtPrixTotal";
            txtPrixTotal.ReadOnly = true;
            txtPrixTotal.RightToLeft = RightToLeft.No;
            txtPrixTotal.Size = new Size(89, 20);
            txtPrixTotal.TabIndex = 123;
            txtPrixTotal.Text = "0";
            txtPrixTotal.TextAlign = HorizontalAlignment.Right;//Label8
            Label8.AutoSize = true;
            Label8.BackColor = Color.Transparent;
            Label8.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label8.ForeColor = Color.White;
            Label8.Location = new System.Drawing.Point(8, 110);
            Label8.Name = "Label8";
            Label8.RightToLeft = RightToLeft.No;
            Label8.Size = new Size(75, 14);
            Label8.TabIndex = 134;
            Label8.Text = "Administration";
            Label8.TextAlign = ContentAlignment.TopRight;//Label7
            Label7.AutoSize = true;
            Label7.BackColor = Color.Transparent;
            Label7.Font = new System.Drawing.Font("Tahoma", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            Label7.ForeColor = Color.White;
            Label7.Location = new System.Drawing.Point(16, 134);
            Label7.Name = "Label7";
            Label7.RightToLeft = RightToLeft.No;
            Label7.Size = new Size(61, 13);
            Label7.TabIndex = 133;
            Label7.Text = "Prix Total";
            Label7.TextAlign = ContentAlignment.TopRight;//Label5
            Label5.AutoSize = true;
            Label5.BackColor = Color.Transparent;
            Label5.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label5.ForeColor = Color.White;
            Label5.Location = new System.Drawing.Point(16, 62);
            Label5.Name = "Label5";
            Label5.RightToLeft = RightToLeft.No;
            Label5.Size = new Size(32, 14);
            Label5.TabIndex = 132;
            Label5.Text = "Profit";
            Label5.TextAlign = ContentAlignment.TopRight;//lblTotalPieces
            lblTotalPieces.AutoSize = true;
            lblTotalPieces.BackColor = Color.Transparent;
            lblTotalPieces.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblTotalPieces.ForeColor = Color.White;
            lblTotalPieces.Location = new System.Drawing.Point(16, 38);
            lblTotalPieces.Name = "lblTotalPieces";
            lblTotalPieces.RightToLeft = RightToLeft.No;
            lblTotalPieces.Size = new Size(64, 14);
            lblTotalPieces.TabIndex = 131;
            lblTotalPieces.Text = "Total Pièces";
            lblTotalPieces.TextAlign = ContentAlignment.TopRight;//lblImprevus
            lblImprevus.AutoSize = true;
            lblImprevus.BackColor = Color.Transparent;
            lblImprevus.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblImprevus.ForeColor = Color.White;
            lblImprevus.Location = new System.Drawing.Point(16, 86);
            lblImprevus.Name = "lblImprevus";
            lblImprevus.RightToLeft = RightToLeft.No;
            lblImprevus.Size = new Size(51, 14);
            lblImprevus.TabIndex = 130;
            lblImprevus.Text = "Imprévus";
            lblImprevus.TextAlign = ContentAlignment.TopRight;//lblTotalTemps
            lblTotalTemps.AutoSize = true;
            lblTotalTemps.BackColor = Color.Transparent;
            lblTotalTemps.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblTotalTemps.ForeColor = Color.White;
            lblTotalTemps.Location = new System.Drawing.Point(16, 14);
            lblTotalTemps.Name = "lblTotalTemps";
            lblTotalTemps.RightToLeft = RightToLeft.No;
            lblTotalTemps.Size = new Size(63, 14);
            lblTotalTemps.TabIndex = 129;
            lblTotalTemps.Text = "Total Temps";
            lblTotalTemps.TextAlign = ContentAlignment.TopRight;//cmbTri
            cmbTri.BackColor = SystemColors.Window;
            cmbTri.DropDownStyle = ComboBoxStyle.DropDownList;
            cmbTri.FlatStyle = FlatStyle.Flat;
            cmbTri.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbTri.ForeColor = SystemColors.WindowText;
            cmbTri.Items.AddRange(new object[] {
            "PIECE_GRB",
            "No. d\'item",
            "Manufacturier",
            "Description française",
            "Description anglaise"});
            cmbTri.Location = new System.Drawing.Point(424, 212);
            cmbTri.Name = "cmbTri";
            cmbTri.RightToLeft = RightToLeft.No;
            cmbTri.Size = new Size(113, 22);
            cmbTri.TabIndex = 72;//cmbPieces
            cmbPieces.BackColor = SystemColors.Window;
            cmbPieces.FlatStyle = FlatStyle.Flat;
            cmbPieces.Font = new System.Drawing.Font("Tahoma", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            cmbPieces.ForeColor = SystemColors.WindowText;
            cmbPieces.Location = new System.Drawing.Point(312, 212);
            cmbPieces.Name = "cmbPieces";
            cmbPieces.RightToLeft = RightToLeft.No;
            cmbPieces.Size = new Size(97, 21);
            cmbPieces.TabIndex = 71;
            cmbPieces.Visible = false;
            cmbPieces.SelectedIndexChanged += new EventHandler(cmbPieces_SelectedIndexChanged);//txtCheminPhotos
            txtCheminPhotos.AcceptsReturn = true;
            txtCheminPhotos.BackColor = Color.Black;
            txtCheminPhotos.Cursor = Cursors.IBeam;
            txtCheminPhotos.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtCheminPhotos.ForeColor = Color.White;
            txtCheminPhotos.Location = new System.Drawing.Point(48, 81);
            txtCheminPhotos.MaxLength = 0;
            txtCheminPhotos.Name = "txtCheminPhotos";
            txtCheminPhotos.RightToLeft = RightToLeft.No;
            txtCheminPhotos.Size = new Size(153, 20);
            txtCheminPhotos.TabIndex = 25;
            txtCheminPhotos.KeyDown += new KeyEventHandler(txtCheminPhotos_KeyDown);//cmdBrowse
            cmdBrowse.AutoSize = true;
            cmdBrowse.BackColor = Color.Black;
            cmdBrowse.FlatStyle = FlatStyle.Flat;
            cmdBrowse.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdBrowse.ForeColor = Color.White;
            cmdBrowse.Location = new System.Drawing.Point(216, 78);
            cmdBrowse.Name = "cmdBrowse";
            cmdBrowse.RightToLeft = RightToLeft.No;
            cmdBrowse.Size = new Size(28, 26);
            cmdBrowse.TabIndex = 27;
            cmdBrowse.Text = "...";
            cmdBrowse.UseVisualStyleBackColor = true;
            cmdBrowse.Click += new EventHandler(cmdBrowse_Click);//cmdPhotos
            cmdPhotos.AutoSize = true;
            cmdPhotos.BackColor = Color.Black;
            cmdPhotos.FlatStyle = FlatStyle.Flat;
            cmdPhotos.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdPhotos.ForeColor = Color.White;
            cmdPhotos.Location = new System.Drawing.Point(246, 78);
            cmdPhotos.Name = "cmdPhotos";
            cmdPhotos.RightToLeft = RightToLeft.No;
            cmdPhotos.Size = new Size(59, 26);
            cmdPhotos.TabIndex = 28;
            cmdPhotos.Text = "Afficher";
            cmdPhotos.UseVisualStyleBackColor = true;
            cmdPhotos.Click += new EventHandler(cmdPhotos_Click);//txtProjet
            txtProjet.AcceptsReturn = true;
            txtProjet.BackColor = SystemColors.Window;
            txtProjet.Cursor = Cursors.IBeam;
            txtProjet.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtProjet.ForeColor = SystemColors.WindowText;
            txtProjet.Location = new System.Drawing.Point(392, 124);
            txtProjet.MaxLength = 0;
            txtProjet.Name = "txtProjet";
            txtProjet.RightToLeft = RightToLeft.No;
            txtProjet.Size = new Size(249, 20);
            txtProjet.TabIndex = 11;//cmbContact
            cmbContact.BackColor = Color.Black;
            cmbContact.FlatStyle = FlatStyle.Flat;
            cmbContact.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbContact.ForeColor = SystemColors.WindowText;
            cmbContact.Location = new System.Drawing.Point(392, 100);
            cmbContact.Name = "cmbContact";
            cmbContact.RightToLeft = RightToLeft.No;
            cmbContact.Size = new Size(177, 22);
            cmbContact.Sorted = true;
            cmbContact.TabIndex = 13;//txtContact
            txtContact.AcceptsReturn = true;
            txtContact.BackColor = Color.Black;
            txtContact.Cursor = Cursors.IBeam;
            txtContact.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtContact.ForeColor = SystemColors.WindowText;
            txtContact.Location = new System.Drawing.Point(392, 100);
            txtContact.MaxLength = 0;
            txtContact.Name = "txtContact";
            txtContact.ReadOnly = true;
            txtContact.RightToLeft = RightToLeft.No;
            txtContact.Size = new Size(177, 20);
            txtContact.TabIndex = 14;
            txtContact.Text = "Text1";//cmbClient
            cmbClient.BackColor = Color.Black;
            cmbClient.FlatStyle = FlatStyle.Flat;
            cmbClient.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbClient.ForeColor = SystemColors.WindowText;
            cmbClient.Location = new System.Drawing.Point(392, 76);
            cmbClient.Name = "cmbClient";
            cmbClient.RightToLeft = RightToLeft.No;
            cmbClient.Size = new Size(177, 22);
            cmbClient.Sorted = true;
            cmbClient.TabIndex = 8;
            cmbClient.SelectedIndexChanged += new EventHandler(cmbclient_SelectedIndexChanged);//txtClient
            txtClient.AcceptsReturn = true;
            txtClient.BackColor = Color.Black;
            txtClient.Cursor = Cursors.IBeam;
            txtClient.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtClient.ForeColor = SystemColors.WindowText;
            txtClient.Location = new System.Drawing.Point(392, 76);
            txtClient.MaxLength = 0;
            txtClient.Name = "txtClient";
            txtClient.ReadOnly = true;
            txtClient.RightToLeft = RightToLeft.No;
            txtClient.Size = new Size(177, 20);
            txtClient.TabIndex = 6;
            txtClient.Text = "Text1";//txtNoSoumission
            txtNoSoumission.AcceptsReturn = true;
            txtNoSoumission.BackColor = Color.Black;
            txtNoSoumission.BorderStyle = BorderStyle.FixedSingle;
            txtNoSoumission.Cursor = Cursors.IBeam;
            txtNoSoumission.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtNoSoumission.ForeColor = Color.White;
            txtNoSoumission.Location = new System.Drawing.Point(595, 14);
            txtNoSoumission.MaxLength = 0;
            txtNoSoumission.Name = "txtNoSoumission";
            txtNoSoumission.ReadOnly = true;
            txtNoSoumission.RightToLeft = RightToLeft.No;
            txtNoSoumission.Size = new Size(94, 20);
            txtNoSoumission.TabIndex = 5;//cmbProjSoum
            cmbProjSoum.BackColor = Color.Black;
            cmbProjSoum.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbProjSoum.ForeColor = Color.White;
            cmbProjSoum.Location = new System.Drawing.Point(408, 12);
            cmbProjSoum.Name = "cmbProjSoum";
            cmbProjSoum.RightToLeft = RightToLeft.No;
            cmbProjSoum.Size = new Size(113, 22);
            cmbProjSoum.TabIndex = 3;
            cmbProjSoum.Text = "cmbProjSoum";
            cmbProjSoum.SelectedIndexChanged += new EventHandler(cmbProjSoum_SelectedIndexChanged);//txtNoProjSoum
            txtNoProjSoum.AcceptsReturn = true;
            txtNoProjSoum.BackColor = SystemColors.Window;
            txtNoProjSoum.Cursor = Cursors.IBeam;
            txtNoProjSoum.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtNoProjSoum.ForeColor = SystemColors.WindowText;
            txtNoProjSoum.Location = new System.Drawing.Point(408, 12);
            txtNoProjSoum.MaxLength = 0;
            txtNoProjSoum.Name = "txtNoProjSoum";
            txtNoProjSoum.ReadOnly = true;
            txtNoProjSoum.RightToLeft = RightToLeft.No;
            txtNoProjSoum.Size = new Size(113, 20);
            txtNoProjSoum.TabIndex = 2;
            txtNoProjSoum.Visible = false;//cmbChoix
            cmbChoix.BackColor = Color.Black;
            cmbChoix.DropDownStyle = ComboBoxStyle.DropDownList;
            cmbChoix.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmbChoix.ForeColor = Color.White;
            cmbChoix.Items.AddRange(new object[] {
            "Soumission",
            "Projet"});
            cmbChoix.Location = new System.Drawing.Point(224, 12);
            cmbChoix.Name = "cmbChoix";
            cmbChoix.RightToLeft = RightToLeft.No;
            cmbChoix.Size = new Size(81, 22);
            cmbChoix.TabIndex = 0;
            cmbChoix.SelectedIndexChanged += new EventHandler(cmbChoix_SelectedIndexChanged);//txtChoix
            txtChoix.AcceptsReturn = true;
            txtChoix.BackColor = SystemColors.Window;
            txtChoix.Cursor = Cursors.IBeam;
            txtChoix.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtChoix.ForeColor = SystemColors.WindowText;
            txtChoix.Location = new System.Drawing.Point(224, 12);
            txtChoix.MaxLength = 0;
            txtChoix.Name = "txtChoix";
            txtChoix.ReadOnly = true;
            txtChoix.RightToLeft = RightToLeft.No;
            txtChoix.Size = new Size(81, 20);
            txtChoix.TabIndex = 1;
            txtChoix.Text = "Text1";//tmrTemps
            tmrTemps.Interval = 1000;
            tmrTemps.Tick += new EventHandler(tmrTemps_Tick);//cmdHistorique
            cmdHistorique.BackColor = Color.Black;
            cmdHistorique.FlatStyle = FlatStyle.Flat;
            cmdHistorique.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdHistorique.ForeColor = Color.White;
            cmdHistorique.Location = new System.Drawing.Point(0, 232);
            cmdHistorique.Name = "cmdHistorique";
            cmdHistorique.RightToLeft = RightToLeft.No;
            cmdHistorique.Size = new Size(153, 26);
            cmdHistorique.TabIndex = 59;
            cmdHistorique.Text = "Historique des modifications";
            cmdHistorique.UseVisualStyleBackColor = true;
            cmdHistorique.Click += new EventHandler(cmdHistorique_Click);//cmdLegende
            cmdLegende.AutoSize = true;
            cmdLegende.BackColor = Color.Black;
            cmdLegende.FlatStyle = FlatStyle.Flat;
            cmdLegende.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdLegende.ForeColor = Color.White;
            cmdLegende.Location = new System.Drawing.Point(104, 180);
            cmdLegende.Name = "cmdLegende";
            cmdLegende.RightToLeft = RightToLeft.No;
            cmdLegende.Size = new Size(61, 26);
            cmdLegende.TabIndex = 60;
            cmdLegende.Text = "Légende";
            cmdLegende.UseVisualStyleBackColor = true;//cmdBavards
            cmdBavards.AutoSize = true;
            cmdBavards.BackColor = Color.Black;
            cmdBavards.FlatStyle = FlatStyle.Flat;
            cmdBavards.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdBavards.ForeColor = Color.White;
            cmdBavards.Location = new System.Drawing.Point(168, 180);
            cmdBavards.Name = "cmdBavards";
            cmdBavards.RightToLeft = RightToLeft.No;
            cmdBavards.Size = new Size(57, 26);
            cmdBavards.TabIndex = 61;
            cmdBavards.Text = "Bavard";
            cmdBavards.UseVisualStyleBackColor = true;
            cmdBavards.Click += new EventHandler(cmdBavards_Click);//cmdAjouterSection
            cmdAjouterSection.BackColor = Color.Black;
            cmdAjouterSection.FlatStyle = FlatStyle.Flat;
            cmdAjouterSection.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            cmdAjouterSection.ForeColor = Color.White;
            cmdAjouterSection.Location = new System.Drawing.Point(216, 212);
            cmdAjouterSection.Name = "cmdAjouterSection";
            cmdAjouterSection.RightToLeft = RightToLeft.No;
            cmdAjouterSection.Size = new Size(25, 21);
            cmdAjouterSection.TabIndex = 69;
            cmdAjouterSection.Text = "...";
            cmdAjouterSection.UseVisualStyleBackColor = true;
            cmdAjouterSection.Visible = false;
            cmdAjouterSection.Click += new EventHandler(cmdAjouterSection_Click);//cmbSections
            cmbSections.BackColor = SystemColors.Window;
            cmbSections.DropDownStyle = ComboBoxStyle.DropDownList;
            cmbSections.FlatStyle = FlatStyle.Flat;
            cmbSections.Font = new System.Drawing.Font("Tahoma", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            cmbSections.ForeColor = SystemColors.WindowText;
            cmbSections.Items.AddRange(new object[] {
            "cmbSections"});
            cmbSections.Location = new System.Drawing.Point(64, 212);
            cmbSections.Name = "cmbSections";
            cmbSections.RightToLeft = RightToLeft.No;
            cmbSections.Size = new Size(145, 21);
            cmbSections.TabIndex = 67;
            cmbSections.Visible = false;//cmdDateFacturation
            cmdDateFacturation.BackColor = Color.Black;
            cmdDateFacturation.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            cmdDateFacturation.ForeColor = Color.White;
            cmdDateFacturation.Location = new System.Drawing.Point(72, 188);
            cmdDateFacturation.Name = "cmdDateFacturation";
            cmdDateFacturation.RightToLeft = RightToLeft.No;
            cmdDateFacturation.Size = new Size(25, 21);
            cmdDateFacturation.TabIndex = 64;
            cmdDateFacturation.Text = "...";
            cmdDateFacturation.UseVisualStyleBackColor = true;
            cmdDateFacturation.Visible = false;
            cmdDateFacturation.Click += new EventHandler(cmdDateFacturation_Click);//txtDateFacturation
            txtDateFacturation.AcceptsReturn = true;
            txtDateFacturation.BackColor = SystemColors.Window;
            txtDateFacturation.Cursor = Cursors.IBeam;
            txtDateFacturation.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtDateFacturation.ForeColor = SystemColors.WindowText;
            txtDateFacturation.Location = new System.Drawing.Point(0, 188);
            txtDateFacturation.MaxLength = 0;
            txtDateFacturation.Name = "txtDateFacturation";
            txtDateFacturation.ReadOnly = true;
            txtDateFacturation.RightToLeft = RightToLeft.No;
            txtDateFacturation.Size = new Size(65, 20);
            txtDateFacturation.TabIndex = 63;//cmdTemps
            cmdTemps.AutoSize = true;
            cmdTemps.BackColor = Color.Black;
            cmdTemps.FlatStyle = FlatStyle.Flat;
            cmdTemps.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdTemps.ForeColor = Color.White;
            cmdTemps.Location = new System.Drawing.Point(0, 116);
            cmdTemps.Name = "cmdTemps";
            cmdTemps.RightToLeft = RightToLeft.No;
            cmdTemps.Size = new Size(57, 26);
            cmdTemps.TabIndex = 29;
            cmdTemps.Text = "Temps";
            cmdTemps.UseVisualStyleBackColor = true;
            cmdTemps.Click += new EventHandler(cmdTemps_Click1);//txtForfait
            txtForfait.AcceptsReturn = true;
            txtForfait.BackColor = SystemColors.Window;
            txtForfait.Cursor = Cursors.IBeam;
            txtForfait.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtForfait.ForeColor = SystemColors.WindowText;
            txtForfait.Location = new System.Drawing.Point(104, 116);
            txtForfait.MaxLength = 0;
            txtForfait.Name = "txtForfait";
            txtForfait.ReadOnly = true;
            txtForfait.RightToLeft = RightToLeft.No;
            txtForfait.Size = new Size(65, 20);
            txtForfait.TabIndex = 31;//lvwPieces
            lvwPieces.BackColor = SystemColors.Window;
            lvwPieces.Columns.AddRange(new ColumnHeader[] {
            _lvwPieces_ColumnHeader_1,
            _lvwPieces_ColumnHeader_2,
            _lvwPieces_ColumnHeader_3,
            _lvwPieces_ColumnHeader_4,
            _lvwPieces_ColumnHeader_5});
            lvwPieces.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lvwPieces.ForeColor = SystemColors.WindowText;
            lvwPieces.FullRowSelect = true;
            lvwPieces.GridLines = true;
            lvwPieces.HideSelection = false;
            lvwPieces.Location = new System.Drawing.Point(8, 322);
            lvwPieces.Name = "lvwPieces";
            lvwPieces.Size = new Size(777, 129);
            lvwPieces.TabIndex = 74;
            lvwPieces.UseCompatibleStateImageBehavior = false;
            lvwPieces.View = View.Details;
            lvwPieces.ColumnClick += new ColumnClickEventHandler(lvwPieces_ColumnClick);
            lvwPieces.DoubleClick += new EventHandler(lvwPieces_DoubleClick);//_lvwPieces_ColumnHeader_1
            _lvwPieces_ColumnHeader_1.Text = "PIECE_GRB";
            _lvwPieces_ColumnHeader_1.Width = 161;//_lvwPieces_ColumnHeader_2
            _lvwPieces_ColumnHeader_2.Text = "No. d\'item";
            _lvwPieces_ColumnHeader_2.Width = 217;//_lvwPieces_ColumnHeader_3
            _lvwPieces_ColumnHeader_3.Text = "Manufacturier";
            _lvwPieces_ColumnHeader_3.Width = 136;//_lvwPieces_ColumnHeader_4
            _lvwPieces_ColumnHeader_4.Text = "Description française";
            _lvwPieces_ColumnHeader_4.Width = 477;//_lvwPieces_ColumnHeader_5
            _lvwPieces_ColumnHeader_5.Text = "Description anglaise";
            _lvwPieces_ColumnHeader_5.Width = 477;//lvwSoumission
            lvwSoumission.BackColor = SystemColors.Window;
            lvwSoumission.CheckBoxes = true;
            lvwSoumission.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lvwSoumission.ForeColor = SystemColors.WindowText;
            lvwSoumission.FullRowSelect = true;
            lvwSoumission.GridLines = true;
            lvwSoumission.HideSelection = false;
            lvwSoumission.Location = new System.Drawing.Point(8, 322);
            lvwSoumission.Name = "lvwSoumission";
            lvwSoumission.Size = new Size(777, 281);
            lvwSoumission.TabIndex = 75;
            lvwSoumission.UseCompatibleStateImageBehavior = false;
            lvwSoumission.View = View.Details;
            lvwSoumission.DoubleClick += new EventHandler(lvwSoumission_DoubleClick1);//cmdExport
            cmdExport.AutoSize = true;
            cmdExport.BackColor = Color.Black;
            cmdExport.FlatStyle = FlatStyle.Flat;
            cmdExport.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdExport.ForeColor = Color.White;
            cmdExport.Location = new System.Drawing.Point(229, 180);
            cmdExport.Name = "cmdExport";
            cmdExport.RightToLeft = RightToLeft.No;
            cmdExport.Size = new Size(60, 26);
            cmdExport.TabIndex = 62;
            cmdExport.Text = "Exporter";
            cmdExport.UseVisualStyleBackColor = true;
            cmdExport.Visible = false;//cmdReception
            cmdReception.BackColor = Color.Black;
            cmdReception.FlatStyle = FlatStyle.Flat;
            cmdReception.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdReception.ForeColor = Color.White;
            cmdReception.Location = new System.Drawing.Point(216, 610);
            cmdReception.Name = "cmdReception";
            cmdReception.RightToLeft = RightToLeft.No;
            cmdReception.Size = new Size(65, 25);
            cmdReception.TabIndex = 108;
            cmdReception.Text = "Réception";
            cmdReception.UseVisualStyleBackColor = true;
            cmdReception.Click += new EventHandler(cmdReception_Click);//cmdRechercherClient
            cmdRechercherClient.AutoSize = true;
            cmdRechercherClient.BackColor = Color.Black;
            cmdRechercherClient.FlatStyle = FlatStyle.Flat;
            cmdRechercherClient.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            cmdRechercherClient.ForeColor = Color.White;
            cmdRechercherClient.Location = new System.Drawing.Point(576, 76);
            cmdRechercherClient.Name = "cmdRechercherClient";
            cmdRechercherClient.RightToLeft = RightToLeft.No;
            cmdRechercherClient.Size = new Size(28, 26);
            cmdRechercherClient.TabIndex = 122;
            cmdRechercherClient.Text = "...";
            cmdRechercherClient.UseVisualStyleBackColor = true;//fraManuel
            fraManuel.BackColor = Color.Black;
            fraManuel.Controls.Add(txtNbreManuel);
            fraManuel.Controls.Add(txtPrixManuel);
            fraManuel.Controls.Add(Label23);
            fraManuel.Controls.Add(Label22);
            fraManuel.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            fraManuel.ForeColor = Color.White;
            fraManuel.Location = new System.Drawing.Point(336, 156);
            fraManuel.Name = "fraManuel";
            fraManuel.Padding = new Padding(0);
            fraManuel.RightToLeft = RightToLeft.No;
            fraManuel.Size = new Size(129, 41);
            fraManuel.TabIndex = 135;
            fraManuel.TabStop = false;
            fraManuel.Text = "Manuels";//txtNbreManuel
            txtNbreManuel.AcceptsReturn = true;
            txtNbreManuel.BackColor = SystemColors.Window;
            txtNbreManuel.Cursor = Cursors.IBeam;
            txtNbreManuel.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtNbreManuel.ForeColor = SystemColors.WindowText;
            txtNbreManuel.Location = new System.Drawing.Point(32, 22);
            txtNbreManuel.MaxLength = 4;
            txtNbreManuel.Name = "txtNbreManuel";
            txtNbreManuel.RightToLeft = RightToLeft.No;
            txtNbreManuel.Size = new Size(25, 20);
            txtNbreManuel.TabIndex = 137;
            txtNbreManuel.Text = "0";//txtPrixManuel
            txtPrixManuel.AcceptsReturn = true;
            txtPrixManuel.BackColor = SystemColors.Window;
            txtPrixManuel.Cursor = Cursors.IBeam;
            txtPrixManuel.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            txtPrixManuel.ForeColor = SystemColors.WindowText;
            txtPrixManuel.Location = new System.Drawing.Point(88, 22);
            txtPrixManuel.MaxLength = 0;
            txtPrixManuel.Name = "txtPrixManuel";
            txtPrixManuel.RightToLeft = RightToLeft.No;
            txtPrixManuel.Size = new Size(33, 20);
            txtPrixManuel.TabIndex = 136;
            txtPrixManuel.Text = "0";
            txtPrixManuel.TextChanged += new EventHandler(txtPrixManuel_TextChanged);//Label23
            Label23.BackColor = Color.Transparent;
            Label23.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label23.ForeColor = Color.White;
            Label23.Location = new System.Drawing.Point(8, 22);
            Label23.Name = "Label23";
            Label23.RightToLeft = RightToLeft.No;
            Label23.Size = new Size(33, 17);
            Label23.TabIndex = 139;
            Label23.Text = "Nbre";//Label22
            Label22.BackColor = Color.Transparent;
            Label22.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label22.ForeColor = Color.White;
            Label22.Location = new System.Drawing.Point(64, 22);
            Label22.Name = "Label22";
            Label22.RightToLeft = RightToLeft.No;
            Label22.Size = new Size(41, 17);
            Label22.TabIndex = 138;
            Label22.Text = "Prix";//lblForfaitInitiale
            lblForfaitInitiale.BackColor = Color.Transparent;
            lblForfaitInitiale.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblForfaitInitiale.ForeColor = Color.White;
            lblForfaitInitiale.Location = new System.Drawing.Point(176, 116);
            lblForfaitInitiale.Name = "lblForfaitInitiale";
            lblForfaitInitiale.RightToLeft = RightToLeft.No;
            lblForfaitInitiale.Size = new Size(41, 17);
            lblForfaitInitiale.TabIndex = 32;
            lblForfaitInitiale.Text = "Par : ";//Label3
            Label3.BackColor = Color.Transparent;
            Label3.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label3.ForeColor = Color.White;
            Label3.Location = new System.Drawing.Point(64, 116);
            Label3.Name = "Label3";
            Label3.RightToLeft = RightToLeft.No;
            Label3.Size = new Size(41, 17);
            Label3.TabIndex = 30;
            Label3.Text = "Forfait :";//lblDateFacturation
            lblDateFacturation.AutoSize = true;
            lblDateFacturation.BackColor = Color.Transparent;
            lblDateFacturation.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblDateFacturation.ForeColor = Color.White;
            lblDateFacturation.Location = new System.Drawing.Point(0, 172);
            lblDateFacturation.Name = "lblDateFacturation";
            lblDateFacturation.RightToLeft = RightToLeft.No;
            lblDateFacturation.Size = new Size(84, 14);
            lblDateFacturation.TabIndex = 58;
            lblDateFacturation.Text = "Date facturation";//lblPasTemps
            lblPasTemps.BackColor = Color.Transparent;
            lblPasTemps.Font = new System.Drawing.Font("Arial", 12F, FontStyle.Bold, GraphicsUnit.Point, 0);
            lblPasTemps.ForeColor = Color.Red;
            lblPasTemps.Location = new System.Drawing.Point(4, 53);
            lblPasTemps.Name = "lblPasTemps";
            lblPasTemps.RightToLeft = RightToLeft.No;
            lblPasTemps.Size = new Size(209, 25);
            lblPasTemps.TabIndex = 9;
            lblPasTemps.Text = "Vérifier le temps";
            lblPasTemps.TextAlign = ContentAlignment.TopCenter;
            lblPasTemps.Visible = false;//Label2
            Label2.AutoSize = true;
            Label2.BackColor = Color.Transparent;
            Label2.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label2.ForeColor = Color.White;
            Label2.Location = new System.Drawing.Point(5, 84);
            Label2.Name = "Label2";
            Label2.RightToLeft = RightToLeft.No;
            Label2.Size = new Size(49, 14);
            Label2.TabIndex = 26;
            Label2.Text = "Photos : ";//lblNoSoumission
            lblNoSoumission.AutoSize = true;
            lblNoSoumission.BackColor = Color.Transparent;
            lblNoSoumission.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblNoSoumission.ForeColor = Color.White;
            lblNoSoumission.Location = new System.Drawing.Point(527, 15);
            lblNoSoumission.Name = "lblNoSoumission";
            lblNoSoumission.RightToLeft = RightToLeft.No;
            lblNoSoumission.Size = new Size(62, 14);
            lblNoSoumission.TabIndex = 4;
            lblNoSoumission.Text = "Soumission";//Label6
            Label6.BackColor = Color.Transparent;
            Label6.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label6.ForeColor = Color.White;
            Label6.Location = new System.Drawing.Point(352, 100);
            Label6.Name = "Label6";
            Label6.RightToLeft = RightToLeft.No;
            Label6.Size = new Size(41, 17);
            Label6.TabIndex = 12;
            Label6.Text = "Contact";//Label4
            Label4.BackColor = Color.Transparent;
            Label4.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            Label4.ForeColor = Color.White;
            Label4.Location = new System.Drawing.Point(360, 76);
            Label4.Name = "Label4";
            Label4.RightToLeft = RightToLeft.No;
            Label4.Size = new Size(33, 17);
            Label4.TabIndex = 7;
            Label4.Text = "Client";//lblSections
            lblSections.BackColor = Color.Transparent;
            lblSections.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            lblSections.ForeColor = Color.White;
            lblSections.Location = new System.Drawing.Point(0, 212);
            lblSections.Name = "lblSections";
            lblSections.RightToLeft = RightToLeft.No;
            lblSections.Size = new Size(73, 17);
            lblSections.TabIndex = 68;
            lblSections.Text = "Sections :";
            lblSections.Visible = false;//lblPiece
            lblPiece.BackColor = Color.Transparent;
            lblPiece.Font = new System.Drawing.Font("Arial", 8.25F, FontStyle.Bold, GraphicsUnit.Point, 0);
            lblPiece.ForeColor = Color.White;
            lblPiece.Location = new System.Drawing.Point(248, 212);
            lblPiece.Name = "lblPiece";
            lblPiece.RightToLeft = RightToLeft.No;
            lblPiece.Size = new Size(65, 17);
            lblPiece.TabIndex = 70;
            lblPiece.Text = "CatégorieFournisseur :";
            lblPiece.Visible = false;//lblProjet
            lblProjet.BackColor = Color.Transparent;
            lblProjet.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblProjet.ForeColor = Color.White;
            lblProjet.Location = new System.Drawing.Point(328, 124);
            lblProjet.Name = "lblProjet";
            lblProjet.RightToLeft = RightToLeft.No;
            lblProjet.Size = new Size(57, 17);
            lblProjet.TabIndex = 10;
            lblProjet.Text = "Description";//lblTri
            lblTri.BackColor = Color.Transparent;
            lblTri.Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            lblTri.ForeColor = Color.White;
            lblTri.Location = new System.Drawing.Point(424, 196);
            lblTri.Name = "lblTri";
            lblTri.RightToLeft = RightToLeft.No;
            lblTri.Size = new Size(57, 17);
            lblTri.TabIndex = 65;
            lblTri.Text = "Trier par :";//ProjSoumElec
            AutoScaleDimensions = new SizeF(6F, 14F);
            AutoScaleMode = AutoScaleMode.Font;
            AutoSize = true;
            AutoSizeMode = AutoSizeMode.GrowAndShrink;
            BackColor = Color.Black;
            BackgroundImage = ControleurServeur.Properties.Resources.drapeauGRB;
            BackgroundImageLayout = ImageLayout.None;
            ClientSize = new Size(1032, 644);
            Controls.Add(cmbOuvertFerme);
            Controls.Add(fraFournisseur);
            Controls.Add(mvwDateFacturation);
            Controls.Add(mvwDate);
            Controls.Add(fraPrixPiece);
            Controls.Add(cmdAnglaisFrancais);
            Controls.Add(cmdReset);
            Controls.Add(cmdRapportFACT);
            Controls.Add(cmdTexte);
            Controls.Add(cmdDemande);
            Controls.Add(cmdSortieMagasin);
            Controls.Add(cmdMauvaisPrix);
            Controls.Add(cmdMaterielInutile);
            Controls.Add(cmdCreerProjet);
            Controls.Add(cmdCatalogue);
            Controls.Add(cmdBonCommande);
            Controls.Add(cmdRetour);
            Controls.Add(cmdExtra);
            Controls.Add(cmdCopier);
            Controls.Add(cmdImprimer);
            Controls.Add(cmdAjouter);
            Controls.Add(cmdFermer);
            Controls.Add(cmdAnnuler);
            Controls.Add(cmdEnregistrer);
            Controls.Add(cmdModifier);
            Controls.Add(cmdSupprimer);
            Controls.Add(fraCertifDelais);
            Controls.Add(fraFsTransMarq);
            Controls.Add(cmdRafraichir);
            Controls.Add(cmdTri);
            Controls.Add(fraPrix);
            Controls.Add(cmbTri);
            Controls.Add(cmbPieces);
            Controls.Add(txtCheminPhotos);
            Controls.Add(cmdBrowse);
            Controls.Add(cmdPhotos);
            Controls.Add(txtProjet);
            Controls.Add(cmbContact);
            Controls.Add(txtContact);
            Controls.Add(cmbClient);
            Controls.Add(txtClient);
            Controls.Add(txtNoSoumission);
            Controls.Add(cmbProjSoum);
            Controls.Add(txtNoProjSoum);
            Controls.Add(cmbChoix);
            Controls.Add(txtChoix);
            Controls.Add(cmdHistorique);
            Controls.Add(cmdLegende);
            Controls.Add(cmdBavards);
            Controls.Add(cmdAjouterSection);
            Controls.Add(cmbSections);
            Controls.Add(cmdDateFacturation);
            Controls.Add(txtDateFacturation);
            Controls.Add(cmdTemps);
            Controls.Add(txtForfait);
            Controls.Add(cmdForfait);
            Controls.Add(cmdEffacerForfait);
            Controls.Add(lvwPieces);
            Controls.Add(lvwSoumission);
            Controls.Add(cmdExport);
            Controls.Add(cmdReception);
            Controls.Add(cmdRechercherClient);
            Controls.Add(fraManuel);
            Controls.Add(lblForfaitInitiale);
            Controls.Add(Label3);
            Controls.Add(lblDateFacturation);
            Controls.Add(lblPasTemps);
            Controls.Add(Label2);
            Controls.Add(lblNoSoumission);
            Controls.Add(Label6);
            Controls.Add(Label4);
            Controls.Add(lblSections);
            Controls.Add(lblPiece);
            Controls.Add(lblProjet);
            Controls.Add(lblTri);
            Font = new System.Drawing.Font("Arial", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);
            ForeColor = Color.White;
            Location = new System.Drawing.Point(15, 43);
            Name = "ProjSoumElec";
            RightToLeft = RightToLeft.No;
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Projets / Soumissions Électriques";
            WindowState = FormWindowState.Maximized;
            FormClosing += new FormClosingEventHandler(ProjSoumMec_FormClosing);
            FormClosed += new FormClosedEventHandler(ProjSoumMec_FormClosed);
            Load += new EventHandler(ProjSoumMec_Load);
            Resize += new EventHandler(ProjSoumMec_Resize);
            fraFournisseur.ResumeLayout(false);
            fraPieceTrouve.ResumeLayout(false);
            fraDateRequise.ResumeLayout(false);
            fraCommentaire.ResumeLayout(false);
            fraCommentaire.PerformLayout();
            fraPrixPiece.ResumeLayout(false);
            fraPrixPiece.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)imgCanada).EndInit();
            ((System.ComponentModel.ISupportInitialize)imgSpain).EndInit();
            ((System.ComponentModel.ISupportInitialize)imgEU).EndInit();
            fraCertifDelais.ResumeLayout(false);
            fraCertifDelais.PerformLayout();
            picApprob.ResumeLayout(false);
            fraFsTransMarq.ResumeLayout(false);
            fraFsTransMarq.PerformLayout();
            fraPrix.ResumeLayout(false);
            fraPrix.PerformLayout();
            fraManuel.ResumeLayout(false);
            fraManuel.PerformLayout();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion
        private const int I_COL_SOUM_QUANTITE = 0;
        private const int I_COL_SOUM_PIECE = 1;
        private const int I_COL_SOUM_DESCR = 2;
        private const int I_COL_SOUM_MANUFACT = 3;
        private const int I_COL_SOUM_PRIX_LIST = 4;
        private const int I_COL_SOUM_ESCOMPTE = 5;
        private const int I_COL_SOUM_PRIX_NET = 6;
        private const int I_COL_SOUM_DISTRIB = 7;
        private const int I_COL_SOUM_TEMPS = 8;
        private const int I_COL_SOUM_MONTAGE = 9;
        private const int I_COL_SOUM_TOTAL = 10;
        private const int I_COL_SOUM_PROFIT = 11;
        private const int I_COL_SOUM_COMMENTAIRE = 12;
        private const int I_COL_SOUM_ID = 13;
        private const int I_COL_SOUM_FACTURATION = 14;
        private const int I_COL_SOUM_DATE_COMMANDE = 15;
        private const int I_COL_SOUM_DATE_REQUISE = 16;
        private const int I_COL_SOUM_NOM_COMMANDE = 17;
        private const int I_COL_SOUM_NO_SEQUENTIEL = 18;
        private const int I_COL_SOUM_PROVENANCE = 19;
        private const int I_COL_SOUMISSION_PROV = 13;
        private const int I_COL_SOUM_SP_QUANTITE = 0;
        private const int I_COL_SOUM_SP_PIECE = 1;
        private const int I_COL_SOUM_SP_DESCR = 2;
        private const int I_COL_SOUM_SP_MANUFACT = 3;
        private const int I_COL_SOUM_SP_DISTRIB = 4;
        private const int I_COL_SOUM_SP_TEMPS = 5;
        private const int I_COL_SOUM_SP_MONTAGE = 6;
        private const int I_COL_SOUM_SP_COMMENTAIRE = 7;
        private const int I_COL_SOUM_SP_ID = 8;
        private const int I_COL_SOUM_SP_DATE_COMMANDE = 9;
        private const int I_COL_SOUM_SP_DATE_REQUISE = 10;
        private const int I_COL_SOUM_SP_NOM_COMMANDE = 11;
        private const int I_COL_SOUM_SP_NO_SEQUENTIEL = 12;
        private const int I_COL_SOUM_SP_PROVENANCE = 13;
        private const int I_COL_SOUMISSION_SP_PROV = 8;
        private const int I_COL_PIECES_PIECE_GRB = 0;
        private const int I_COL_PIECES_NO_ITEM = 1;
        private const int I_COL_PIECES_MANUFACT = 2;
        private const int I_COL_PIECES_DESCR_FR = 3;
        private const int I_COL_PIECES_DESCR_EN = 4;
        private const int I_COL_RECH_PIECE_GRB = 0;
        private const int I_COL_RECH_NO_ITEM = 1;
        private const int I_COL_RECH_CATEGORIE = 2;
        private const int I_COL_RECH_MANUFACT = 3;
        private const int I_COL_RECH_DESCR_FR = 4;
        private const int I_COL_RECH_DESCR_EN = 5;
        private const int I_COL_FRS_FRS = 0;
        private const int I_COL_FRS_PERS_RESS = 1;
        private const int I_COL_FRS_DATE = 2;
        private const int I_COL_FRS_ENTRER_PAR = 3;
        private const int I_COL_FRS_VALIDE = 4;
        private const int I_COL_FRS_PRIX_LIST = 5;
        private const int I_COL_FRS_ESCOMPTE = 6;
        private const int I_COL_FRS_PRIX_NET = 7;
        private const int I_COL_FRS_PRIX_SP = 8;
        private const int I_COL_FRS_QUOTER = 9;
        private const int I_COL_FRS_STOCK = 10;
        private const int I_COL_MODIF_EMPLOYE = 0;
        private const int I_COL_MODIF_DATE = 1;
        private const int I_COL_MODIF_HEURE = 2;
        private const int I_COL_MODIF_MONTANT = 3;
        private const int I_COL_SUPP_EMPLOYE = 0;
        private const int I_COL_SUPP_DATE = 1;
        private const int I_COL_SUPP_HEURE = 2;
        private const int I_COL_SUPP_QTE = 3;
        private const int I_COL_SUPP_NO_ITEM = 4;
        private const int I_TRANS_FAB_GRANBY = 0;
        private const int I_TRANS_CLIENT = 1;
        private const int I_IDX_FS_DIX_MOINS = 1;
        private const int I_IDX_FS_DIX = 2;
        private const int I_IDX_FS_QUINZE = 3;
        private const int I_IDX_FS_VINGT = 4;
        private const int I_IDX_FS_VINGT_CINQ = 5;
        private const int I_IDX_FS_CINQUANTE = 6;
        private const int I_IDX_FS_CENT = 7;
        private const int I_IDX_SOUMISSION = 0;
        private const int I_IDX_PROJET = 1;
        private const int I_CMB_OUVERT = 0;
        private const int I_CMB_TOUS = 1;
        private const int I_CMB_PIECE_GRB = 0;
        private const int I_CMB_PIECE = 1;
        private const int I_CMB_FABRICANT = 2;
        private const int I_CMB_DESCR_FR = 3;
        private const int I_CMB_DESCR_EN = 4;
        private const string S_PAS_SOUS_SECTION = "PAS DE SOUS-SECTION";
        private const int I_TOP_AFFICHAGE = 3000;
        private const int I_HEIGHT_AFFICHAGE = 3930;
        private string m_sProfit;
        private string m_sCommission;
        private string m_sImprevue;
        private string m_sTri;
        private int m_iCol;
        private bool m_bResize;
        private bool m_bModeAjout;
        private bool m_bModeAffichage;
        private string m_sSousSection;
        internal static bool m_bDroitPrix;
        private bool m_bModintProj;
        private bool m_bModintSoum;
        private bool m_bModintBonCommande;
        private bool m_bComboChoix;
        private EnumMode m_eMode;
        private EnumLangage m_eLangage;
        private string m_sAncienProjSoum;
        private bool m_bSupprimer;
        internal static bool m_bSansTemps;
        private bool m_bPieceInutile;
        internal static bool m_bAnnulerChemin;
        internal static string m_sChemin;
        private bool m_bRecherchePiece;
        private bool m_bMauvaisPrix;
        private bool m_bEnregistrement;
        private List<String> m_collDateSupp;
        private List<String> m_collHeureSupp;
        private List<String> m_collQteSupp;
        private List<String> m_collNoItemSupp;
        private bool m_bChangementFRS;
        internal static string m_sTempsDessin;
        internal static string m_sTempsFabrication;
        internal static string m_sTempsAssemblage;
        internal static string m_sTempsProgInterface;
        internal static string m_sTempsProgAutomate;
        internal static string m_sTempsProgRobot;
        internal static string m_sTempsVision;
        internal static string m_sTempsTest;
        internal static string m_sTempsInstallation;
        internal static string m_sTempsMiseService;
        internal static string m_sTempsFormation;
        internal static string m_sTempsGestion;
        internal static string m_sTempsShipping;
        internal static string m_sNbrePersonne;
        internal static string m_sTempsHebergement;
        internal static string m_sTempsRepas;
        internal static string m_sTempsTransport;
        internal static string m_sTempsUniteMobile;
        internal static string m_sPrixEmballage;
        internal static string m_sTauxHebergement1;
        internal static string m_sTauxHebergement2;
        internal static string m_sTauxRepas;
        internal static string m_sTauxTransport;
        internal static string m_sTauxUniteMobile;
        internal static string m_sTauxDessin;
        internal static string m_sTauxFabrication;
        internal static string m_sTauxAssemblage;
        internal static string m_sTauxProgInterface;
        internal static string m_sTauxProgAutomate;
        internal static string m_sTauxProgRobot;
        internal static string m_sTauxVision;
        internal static string m_sTauxTest;
        internal static string m_sTauxInstallation;
        internal static string m_sTauxMiseService;
        internal static string m_sTauxFormation;
        internal static string m_sTauxGestion;
        internal static string m_sTauxShipping;
        internal static bool m_bTempsDejaOuvert;
        private string m_sTexteRecherche;
        private CopiePiece[] m_arr_tyCopie;
        private int m_iNbreCopie;
        internal static bool m_bModintFournisseurBC;
        private string m_sLiaison;
        private bool m_bExtra;
        private bool m_bMonthViewHasFocus;
        internal static bool m_bTransfertJobCancel;
        private bool m_bChangementChoix;
        internal static bool m_bValide;
        internal static bool bTrigger;
        internal static bool bFlag;
        private EnumType m_eType;
        private struct CopiePiece
        {
            public bool bChecked;
            public string sQuantite;
            public string sPiece;
            public string sDescr;
            public string sManufact;
            public string sPrixList;
            public string sEscompte;
            public string sPrixNet;
            public string sFRS;
            public string sTemps;
            public string sMontage;
            public string sTotal;
            public string sProfit;
            public string sDescrTag;
            public string sPrixListTag;
            public string sFRSTag;
            public Color lColor;
        }
        Color lColor;
        internal static string m_sTempsCoupe;
        internal static string m_sTempsMachinage;
        internal static string m_sTempsSoudure;
        internal static string m_sTempsPeinture;
        internal static bool m_bTempsProjLock;
        internal static string m_sTempsCoupeConc;
        internal static string m_sTempsDessinConc;
        internal static string m_sTempsMachinageConc;
        internal static string m_sTempsSoudureConc;
        internal static string m_sTempsPeintureConc;
        internal static string m_sTempsAssemblageConc;
        internal static string m_sTempsTestConc;
        internal static string m_sTempsInstallationConc;
        internal static string m_sTempsFormationConc;
        internal static string m_sTempsGestionConc;
        internal static string m_sTempsShippingConc;
        internal static string m_sTempsPrototypeConc;
        internal static string m_sTempsDessinProj;
        internal static string m_sTempsCoupeProj;
        internal static string m_sTempsMachinageProj;
        internal static string m_sTempsSoudureProj;
        internal static string m_sTempsAssemblageProj;
        internal static string m_sTempsPeintureProj;
        internal static string m_sTempsTestProj;
        internal static string m_sTempsInstallationProj;
        internal static string m_sTempsFormationProj;
        internal static string m_sTempsGestionProj;
        internal static string m_sTempsShippingProj;
        internal static string m_sTempsPrototypeProj;
        internal static string m_sTauxCoupe;
        internal static string m_sTauxMachinage;
        internal static string m_sTauxSoudure;
        internal static string m_sTauxPeinture;

        public bool PeutFermer()
        {
            bool PeutFermerRet = default;
            try
            {
                if (m_eMode == EnumMode.MODE_INACTIF) { PeutFermerRet = true; } else { PeutFermerRet = false; }
                return PeutFermerRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "PeutFermer", ex); return false;
            }
        }
        //Initialisation des variables comprises dans la configuration
        private void InitialiserVariables(string sNoProjSoum)
        {
            try
            {
                ADODB.Recordset rstConfig;
                ADODB.Recordset rstProjSoum;
                rstProjSoum = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET) { rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } else { 
                    rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); }
                if (!rstProjSoum.EOF)
                {
                    m_sProfit = rstProjSoum.Fields["Profit"].Value;
                    m_sCommission = rstProjSoum.Fields["Commission"].Value;
                    m_sImprevue = rstProjSoum.Fields["Imprevue"].Value;
                }
                else
                {
                    rstConfig = new Recordset();
                    rstConfig.Open("SELECT * FROM Config", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    m_sProfit = rstConfig.Fields["ProfitMec"].Value;
                    m_sCommission = rstConfig.Fields["Commission"].Value;
                    m_sImprevue = rstConfig.Fields["Imprévus"].Value;
                    rstConfig.Close();
                    rstConfig = default;
                }
                rstProjSoum.Close();
                rstProjSoum = default;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "InitialiserVariables", ex);
            }
        }
        private void ActiverBoutonsGroupe()
        {
            try
            {
                bool bModint;
                if (g_bAffichageProjetsMec)
                {
                    cmbChoix.Visible = true;
                    m_bComboChoix = true;
                    m_eType = EnumType.TYPE_PROJET;
                    bModint = g_bModificationProjetsMec;
                }
                else
                {
                    cmbChoix.Visible = false;
                    m_bComboChoix = false;
                    if (g_bAffichageProjetsMec)
                    {
                        txtChoix.Text = "Projet";
                        m_eType = EnumType.TYPE_PROJET;
                        bModint = g_bModificationProjetsMec;
                    }
                    else
                    {
                        txtChoix.Text = "Soumission";
                        m_eType = EnumType.TYPE_SOUMISSION;
                        bModint = g_bModificationSoumissionsMec;
                    }
                }
                m_bModintProj = g_bModificationProjetsMec;
                m_bModintSoum = g_bModificationSoumissionsMec;
                m_bModintBonCommande = g_bModificationBC;
                m_bSupprimer = g_bSuppressionProjets;
                cmdAjouter.Enabled = bModint;
                cmdSupprimer.Enabled = bModint;
                cmdModifier.Enabled = bModint;
                cmdCopier.Enabled = bModint;
                cmdCreerProjet.Enabled = bModint;
                cmdBonCommande.Enabled = m_bModintBonCommande;
                cmdImprimer.Enabled = bModint;
                cmdDemande.Enabled = bModint;
                cmdAnglaisFrancais.Enabled = bModint;
                cmdExtra.Enabled = bModint;
                cmdSupprimerFRS.Visible = g_bModificationCatalogueMec;
                cmdRetour.Enabled = g_bModificationRetourMarchandise;
                cmdReception.Enabled = g_bModificationReception;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ActiverBoutonsGroupe", ex);
            }
        }
        private void AfficherProjSoum(string sNoProjSoum)
        {
            try
            {
                m_bPieceInutile = false;
                m_bChangementFRS = false;
                m_bRecherchePiece = false;
                m_bModeAffichage = true;
                ViderChamps();
                RemplirComboProjSoum(sNoProjSoum);
                BarrerChamps(true);
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AfficherProjSoum", ex);
            }
        }
        private void AfficherControles(EnumMode eMode)
        {
            try
            {
                var bAjouter = default(bool);
                var bModintier = default(bool);
                var bSupprimer = default(bool);
                var bEnregistrer = default(bool);
                var bAnnuler = default(bool);
                var bFermer = default(bool);
                var bImprimer = default(bool);
                var bCmbClient = default(bool);
                var bCmbContact = default(bool);
                var bCmbProjSoum = default(bool);
                var bCmbTransport = default(bool);
                var bCmbChoix = default(bool);
                var bCmbOuvertFerme = default(bool);
                var bSection = default(bool);
                var bPieces = default(bool);
                var bDate = default(bool);
                var bTexte = default(bool);
                var bCreerProjet = default(bool);
                var bHistorique = default(bool);
                var bCopier = default(bool);
                var bBonCommande = default(bool);
                var bTri = default(bool);
                var bDemande = default(bool);
                var bExtra = default(bool);
                var bCatalogue = default(bool);
                var bBrowseChemin = default(bool);
                var bInutile = default(bool);
                var bMauvaisPrix = default(bool);
                var bRapportFact = default(bool);
                var bDateFacture = default(bool);
                var bSortiMagasin = default(bool);
                var bRetour = default(bool);
                var bForfait = default(bool);
                var bExporter = default(bool);
                var bReception = default(bool);
                var bAnglaisFrancais = default(bool);
                var bRechercheClient = default(bool);
                m_eMode = eMode;
                switch (eMode)
                {
                    case EnumMode.MODE_MODIF:
                        {
                            bEnregistrer = true; bAnnuler = true; bSection = true; bPieces = true; bTexte = true; bTri = true;
                            if (m_eType == EnumType.TYPE_SOUMISSION | m_eType == EnumType.TYPE_PROJET & txtNoProjSoum.Text.Substring(3, 1) != "3") { bCmbClient = true; bCmbContact = true; bRechercheClient = true; }
                            bCmbTransport = true; bDate = true; bCatalogue = true; bBrowseChemin = true; bMauvaisPrix = true; bForfait = true;
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                bInutile = true;
                                if (g_bModificationReception) { bSortiMagasin = true; }
                                if (g_bModificationFacturation) { bDateFacture = true; }
                            }
                            break;
                        }
                    case EnumMode.MODE_INACTIF:
                        {
                            bModintier = true; bFermer = true; bImprimer = true; bCmbProjSoum = true; bCmbChoix = true; bCmbOuvertFerme = true; bHistorique = true; bDemande = true; bExporter = true; bAnglaisFrancais = true; bAjouter = true;
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                bBonCommande = true; bExtra = true;
                                if (g_bModificationRetourMarchandise) { bRetour = true; }
                                if (g_bModificationFacturation) { bRapportFact = true; }
                                if (g_bModificationReception) { bReception = true; }
                                if (m_bSupprimer == true) { bSupprimer = true; }
                            }
                            else
                            {
                                bSupprimer = true; bCopier = true;
                                if (VerintierSiDejaProjet() == false) { bCreerProjet = true; }
                            }
                            break;
                        }
                }
                cmdAjouter.Visible = bAjouter;
                cmdModifier.Visible = bModintier;
                cmdSupprimer.Visible = bSupprimer;
                cmdEnregistrer.Visible = bEnregistrer;
                cmdAnnuler.Visible = bAnnuler;
                cmdFermer.Visible = bFermer;
                cmdImprimer.Visible = bImprimer;
                cmdRapportFACT.Visible = bRapportFact;
                cmdDate.Visible = bDate;
                cmdTexte.Visible = bTexte;
                cmdHistorique.Visible = bHistorique;
                cmdCopier.Visible = bCopier;
                cmdBonCommande.Visible = bBonCommande;
                cmdCreerProjet.Visible = bCreerProjet;
                cmdDemande.Visible = bDemande;
                cmdExtra.Visible = bExtra;
                cmdCatalogue.Visible = bCatalogue;
                cmdBrowse.Visible = bBrowseChemin;
                cmdMaterielInutile.Visible = bInutile;
                cmdMauvaisPrix.Visible = bMauvaisPrix;
                cmdSortieMagasin.Visible = bSortiMagasin;
                cmdRetour.Visible = bRetour;
                cmdForfait.Visible = bForfait;
                cmdEffacerForfait.Visible = bForfait;
                cmdExport.Visible = bExporter;
                cmdReception.Visible = bReception;
                cmdAnglaisFrancais.Visible = bAnglaisFrancais;
                lblDateFacturation.Visible = bDateFacture;
                txtDateFacturation.Visible = bDateFacture;
                cmdDateFacturation.Visible = bDateFacture;
                cmbClient.Visible = bCmbClient;
                txtClient.Visible = !bCmbClient;
                cmbContact.Visible = bCmbContact;
                txtContact.Visible = !bCmbContact;
                cmbTransport.Visible = bCmbTransport;
                txtTransport.Visible = !bCmbTransport;
                if (m_bComboChoix == true)
                {
                    cmbChoix.Visible = bCmbChoix;
                    txtChoix.Visible = !bCmbChoix;
                }
                cmbOuvertFerme.Visible = bCmbOuvertFerme;
                cmbProjSoum.Visible = bCmbProjSoum;
                txtNoProjSoum.Visible = !bCmbProjSoum;
                lblSections.Visible = bSection;
                cmbSections.Visible = bSection;
                cmdAjouterSection.Visible = bSection;
                lblPiece.Visible = bPieces;
                cmbPieces.Visible = bPieces;
                lvwPieces.Visible = bPieces;
                lblTri.Visible = bTri;
                cmbTri.Visible = bTri;
                cmdTri.Visible = bTri;
                cmdRafraichir.Visible = bTri;
                fraPrix.Visible = m_bDroitPrix;
                cmdRechercherClient.Visible = bRechercheClient;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AfficherControles", ex);
            }
        }
        private void InitialiserTempsTaux(bool bEmpty)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                string sTable;
                string sChamps;
                m_bTempsDejaOuvert = false;
                if (bEmpty == true)
                {
                    m_sTempsDessin = "0";
                    m_sTempsFabrication = "0";
                    m_sTempsAssemblage = "0";
                    m_sTempsProgInterface = "0";
                    m_sTempsProgAutomate = "0";
                    m_sTempsProgRobot = "0";
                    m_sTempsVision = "0";
                    m_sTempsTest = "0";
                    m_sTempsInstallation = "0";
                    m_sTempsMiseService = "0";
                    m_sTempsFormation = "0";
                    m_sTempsGestion = "0";
                    m_sTempsShipping = "0";
                    m_sNbrePersonne = "0";
                    m_sTempsHebergement = "0";
                    m_sTempsRepas = "0";
                    m_sTempsTransport = "0";
                    m_sTempsUniteMobile = "0";
                    m_sPrixEmballage = "0";
                    m_sTauxHebergement1 = "0";
                    m_sTauxHebergement2 = "0";
                    m_sTauxRepas = "0";
                    m_sTauxTransport = "0";
                    m_sTauxUniteMobile = "0";
                    m_sTauxDessin = "0";
                    m_sTauxFabrication = "0";
                    m_sTauxAssemblage = "0";
                    m_sTauxProgInterface = "0";
                    m_sTauxProgAutomate = "0";
                    m_sTauxProgRobot = "0";
                    m_sTauxVision = "0";
                    m_sTauxTest = "0";
                    m_sTauxInstallation = "0";
                    m_sTauxMiseService = "0";
                    m_sTauxFormation = "0";
                    m_sTauxGestion = "0";
                    m_sTauxShipping = "0";
                }
                else
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        sTable = "ProjetMec";
                        sChamps = "IDProjet";
                    }
                    else
                    {
                        sTable = "SoumissionMec";
                        sChamps = "IDSoumission";
                    }
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (m_eType == EnumType.TYPE_SOUMISSION)
                    {
                        if (!(rstProjSoum.Fields["TempsDessin"].Value is DBNull)) { m_sTempsDessin = rstProjSoum.Fields["TempsDessin"].Value; } else { m_sTempsDessin = "0"; }
                        if (!(rstProjSoum.Fields["TempsFabrication"].Value is DBNull)) { m_sTempsFabrication = rstProjSoum.Fields["TempsFabrication"].Value; } else { m_sTempsFabrication = "0"; }
                        if (!(rstProjSoum.Fields["TempsAssemblage"].Value is DBNull)) { m_sTempsAssemblage = rstProjSoum.Fields["TempsAssemblage"].Value; } else { m_sTempsAssemblage = "0"; }
                        if (!(rstProjSoum.Fields["TempsProgInterface"].Value is DBNull)) { m_sTempsProgInterface = rstProjSoum.Fields["TempsProgInterface"].Value; } else { m_sTempsProgInterface = "0"; }
                        if (!(rstProjSoum.Fields["TempsProgAutomate"].Value is DBNull)) { m_sTempsProgAutomate = rstProjSoum.Fields["TempsProgAutomate"].Value; } else { m_sTempsProgAutomate = "0"; }
                        if (!(rstProjSoum.Fields["TempsProgRobot"].Value is DBNull)) { m_sTempsProgRobot = rstProjSoum.Fields["TempsProgRobot"].Value; } else { m_sTempsProgRobot = "0"; }
                        if (!(rstProjSoum.Fields["TempsVision"].Value is DBNull)) { m_sTempsVision = rstProjSoum.Fields["TempsVision"].Value; } else { m_sTempsVision = "0"; }
                        if (!(rstProjSoum.Fields["TempsTest"].Value is DBNull)) { m_sTempsTest = rstProjSoum.Fields["TempsTest"].Value; } else { m_sTempsTest = "0"; }
                        if (!(rstProjSoum.Fields["TempsInstallation"].Value is DBNull)) { m_sTempsInstallation = rstProjSoum.Fields["TempsInstallation"].Value; } else { m_sTempsInstallation = "0"; }
                        if (!(rstProjSoum.Fields["TempsMiseService"].Value is DBNull)) { m_sTempsMiseService = rstProjSoum.Fields["TempsMiseService"].Value; } else { m_sTempsMiseService = "0"; }
                        if (!(rstProjSoum.Fields["TempsFormation"].Value is DBNull)) { m_sTempsFormation = rstProjSoum.Fields["TempsFormation"].Value; } else { m_sTempsFormation = "0"; }
                        if (!(rstProjSoum.Fields["TempsGestion"].Value is DBNull)) { m_sTempsGestion = rstProjSoum.Fields["TempsGestion"].Value; } else { m_sTempsGestion = "0"; }
                        if (!(rstProjSoum.Fields["TempsShipping"].Value is DBNull)) { m_sTempsShipping = rstProjSoum.Fields["TempsShipping"].Value; } else { m_sTempsShipping = "0"; }
                    }
                    else
                    {
                        InitialiserTempsReel();
                    }
                    if (!(rstProjSoum.Fields["TauxDessin"].Value is DBNull)) { m_sTauxDessin = rstProjSoum.Fields["TauxDessin"].Value; } else { m_sTauxDessin = "0"; }
                    if (!(rstProjSoum.Fields["TauxFabrication"].Value is DBNull)) { m_sTauxFabrication = rstProjSoum.Fields["TauxFabrication"].Value; } else { m_sTauxFabrication = "0"; }
                    if (!(rstProjSoum.Fields["TauxAssemblage"].Value is DBNull)) { m_sTauxAssemblage = rstProjSoum.Fields["TauxAssemblage"].Value; } else { m_sTauxAssemblage = "0"; }
                    if (!(rstProjSoum.Fields["TauxProgInterface"].Value is DBNull)) { m_sTauxProgInterface = rstProjSoum.Fields["TauxProgInterface"].Value; } else { m_sTauxProgInterface = "0"; }
                    if (!(rstProjSoum.Fields["TauxProgAutomate"].Value is DBNull)) { m_sTauxProgAutomate = rstProjSoum.Fields["TauxProgAutomate"].Value; } else { m_sTauxProgAutomate = "0"; }
                    if (!(rstProjSoum.Fields["TauxProgRobot"].Value is DBNull)) { m_sTauxProgRobot = rstProjSoum.Fields["TauxProgRobot"].Value; } else { m_sTauxProgRobot = "0"; }
                    if (!(rstProjSoum.Fields["TauxVision"].Value is DBNull)) { m_sTauxVision = rstProjSoum.Fields["TauxVision"].Value; } else { m_sTauxVision = "0"; }
                    if (!(rstProjSoum.Fields["TauxTest"].Value is DBNull)) { m_sTauxTest = rstProjSoum.Fields["TauxTest"].Value; } else { m_sTauxTest = "0"; }
                    if (!(rstProjSoum.Fields["TauxInstallation"].Value is DBNull)) { m_sTauxInstallation = rstProjSoum.Fields["TauxInstallation"].Value; } else { m_sTauxInstallation = "0"; }
                    if (!(rstProjSoum.Fields["TauxMiseService"].Value is DBNull)) { m_sTauxMiseService = rstProjSoum.Fields["TauxMiseService"].Value; } else { m_sTauxMiseService = "0"; }
                    if (!(rstProjSoum.Fields["TauxFormation"].Value is DBNull)) { m_sTauxFormation = rstProjSoum.Fields["TauxFormation"].Value; } else { m_sTauxFormation = "0"; }
                    if (!(rstProjSoum.Fields["TauxGestion"].Value is DBNull)) { m_sTauxGestion = rstProjSoum.Fields["TauxGestion"].Value; } else { m_sTauxGestion = "0"; }
                    if (!(rstProjSoum.Fields["TauxShipping"].Value is DBNull)) { m_sTauxShipping = rstProjSoum.Fields["TauxShipping"].Value; } else { m_sTauxShipping = "0"; }
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        m_sNbrePersonne = "0";
                        m_sTempsHebergement = "0";
                        m_sTempsRepas = "0";
                        m_sTempsTransport = "0";
                        m_sTempsUniteMobile = "0";
                    }
                    else
                    {
                        if (!(rstProjSoum.Fields["NbrePersonne"].Value is DBNull)) { m_sNbrePersonne = rstProjSoum.Fields["NbrePersonne"].Value; } else { m_sNbrePersonne = "0"; }
                        if (!(rstProjSoum.Fields["TempsHebergement"].Value is DBNull)) { m_sTempsHebergement = rstProjSoum.Fields["TempsHebergement"].Value; } else { m_sTempsHebergement = "0"; }
                        if (!(rstProjSoum.Fields["TempsRepas"].Value is DBNull)) { m_sTempsRepas = rstProjSoum.Fields["TempsRepas"].Value; } else { m_sTempsRepas = "0"; }
                        if (!(rstProjSoum.Fields["TempsTransport"].Value is DBNull)) { m_sTempsTransport = rstProjSoum.Fields["TempsTransport"].Value; } else { m_sTempsTransport = "0"; }
                        if (!(rstProjSoum.Fields["TempsUniteMobile"].Value is DBNull)) { m_sTempsUniteMobile = rstProjSoum.Fields["TempsUniteMobile"].Value; } else { m_sTempsUniteMobile = "0"; }
                    }
                    if (!(rstProjSoum.Fields["PrixEmballage"].Value is DBNull)) { m_sPrixEmballage = rstProjSoum.Fields["PrixEmballage"].Value; } else { m_sPrixEmballage = "0"; }
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        m_sTauxHebergement1 = "0";
                        m_sTauxHebergement2 = "0";
                        m_sTauxRepas = "0";
                        m_sTauxTransport = "0";
                        m_sTauxUniteMobile = "0";
                    }
                    else
                    {
                        if (!(rstProjSoum.Fields["TauxHebergement1"].Value is DBNull)) { m_sTauxHebergement1 = rstProjSoum.Fields["TauxHebergement1"].Value; } else { m_sTauxHebergement1 = "0"; }
                        if (!(rstProjSoum.Fields["TauxHebergement2"].Value is DBNull)) { m_sTauxHebergement2 = rstProjSoum.Fields["TauxHebergement2"].Value; } else { m_sTauxHebergement2 = "0"; }
                        if (!(rstProjSoum.Fields["TauxRepas"].Value is DBNull)) { m_sTauxRepas = rstProjSoum.Fields["TauxRepas"].Value; } else { m_sTauxRepas = "0"; }
                        if (!(rstProjSoum.Fields["TauxTransport"].Value is DBNull)) { m_sTauxTransport = rstProjSoum.Fields["TauxTransport"].Value; } else { m_sTauxTransport = "0"; }
                        if (!(rstProjSoum.Fields["TauxUniteMobile"].Value is DBNull)) { m_sTauxUniteMobile = rstProjSoum.Fields["TauxUniteMobile"].Value; } else { m_sTauxUniteMobile = "0"; }
                    }
                    rstProjSoum.Close();
                    rstProjSoum = default;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "InitialiserTempsTaux", ex);
            }
        }
        private void InitialiserTempsReel()
        {
            try
            {
                ADODB.Recordset rstPunch;
                string sDateDebut;
                string sDateFin;
                string sTotal;
                string sFilterNoProjet;
                if (Droite(txtNoProjSoum.Text, 2) == "99") { sFilterNoProjet = "LEFT(NoProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "'"; } else { sFilterNoProjet = "NoProjet = '" + txtNoProjSoum.Text + "'"; }
                sDateDebut = "Punch.HeureDébut";
                sDateFin = "Punch.HeureFin";
                sTotal = "(SUM(" + sDateFin + " - " + sDateDebut + ")* 24) As Total";
                rstPunch = new Recordset();
                rstPunch.Open("SELECT Type, " + sTotal + " FROM Punch WHERE " + sFilterNoProjet + " And HeureFin is not null AND HeureDébut is not null GROUP BY Type", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                m_sTempsDessin = "0";
                m_sTempsFabrication = "0";
                m_sTempsAssemblage = "0";
                m_sTempsProgInterface = "0";
                m_sTempsProgAutomate = "0";
                m_sTempsProgRobot = "0";
                m_sTempsVision = "0";
                m_sTempsTest = "0";
                m_sTempsInstallation = "0";
                m_sTempsMiseService = "0";
                m_sTempsFormation = "0";
                m_sTempsGestion = "0";
                m_sTempsShipping = "0";
                while (!rstPunch.EOF)
                {
                    if (!(rstPunch.Fields["Total"].Value is DBNull))
                    {
                        switch (rstPunch.Fields["Type"].Value)
                        {
                            case "Dessin": { m_sTempsDessin = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Fabrication": { m_sTempsFabrication = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Assemblage": { m_sTempsAssemblage = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "ProgInterface": { m_sTempsProgInterface = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "ProgAutomate": { m_sTempsProgAutomate = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "ProgRobot": { m_sTempsProgRobot = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Vision": { m_sTempsVision = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Test": { m_sTempsTest = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Installation": { m_sTempsInstallation = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "MiseService": { m_sTempsMiseService = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Formation": { m_sTempsFormation = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Gestion": { m_sTempsGestion = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                            case "Shipping": { m_sTempsShipping = (string)Math.Round(rstPunch.Fields["Total"].Value, 2); break; }
                        }
                    }
                    rstPunch.MoveNext();
                }
                rstPunch.Close();
                rstPunch = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMecTemps", "AfficherTempsReels", ex);
            }
        }
        private void UpdateDescription()
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstPieceMec;
                rstProjSoum = new Recordset();
                rstPieceMec = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET) { rstProjSoum.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } else { rstProjSoum.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } while (!rstProjSoum.EOF)
                {
                    rstPieceMec.Open("SELECT * FROM CatalogueMec WHERE PIECE = '" + rstProjSoum.Fields["NumItem"].Value + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstProjSoum.Fields["Desc_Fr"].Value = rstPieceMec.Fields["DESC_FR"].Value;
                    rstProjSoum.Fields["Desc_En"].Value = rstPieceMec.Fields["DESC_EN"].Value;
                    rstProjSoum.Update();
                    rstPieceMec.Close();
                    rstProjSoum.MoveNext();
                }
                rstPieceMec = default;
                rstProjSoum.Close();
                rstProjSoum = default;
                RemplirListViewProjSoum(txtNoProjSoum.Text);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "UpdateDescription", ex);
            }
        }
        private void ExporterListePieces(ADODB.Recordset rstProjSoum)
        {
            var xlEdgeRight = default(object);
            var xlEdgeLeft = default(object);
            var xlEdgeTop = default(object);
            var xlThin = default(object);
            var xlInsideVertical = default(object);
            var xlAutomatic = default(object);
            var xlMedium = default(object);
            var xlEdgeBottom = default(object);
            var xlContinuous = default(object);
            var xlCenter = default(object);
            var xlUnderlineStyleSingle = default(object);
            object Excel;
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstTemp;
                ADODB.Recordset rstImpListePiece;
                int XPiece;
                string sSousSection;
                string sSection;
                string sNoProjet;
                string sNoSoumission;
                bool bAjouterSection;
                bool bAjouterSousSection;
                bool bAjouterPiece;
                Application xlsApp;
                Workbook xlsWorkBook;
                int X;
                string sSaveAsFileName;
                rstPiece = new Recordset();
                rstTemp = new Recordset();
                rstImpListePiece = new Recordset();
                XPiece = 1;
                Cursor.Current = Cursors.WaitCursor;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sNoProjet = rstProjSoum.Fields["IDProjet"].Value;
                    sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value;
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    sNoProjet = string.Empty;
                    sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value;
                    rstPiece.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoSoumission + "' AND Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                } while (!rstPiece.EOF)
                {
                    if (rstPiece.Fields[".Visible"].Value == true)
                    {
                        bAjouterSection = true;
                        bAjouterSousSection = true;
                        bAjouterPiece = true;
                        rstImpListePiece.CursorLocation = CursorLocationEnum.adUseClient;
                        rstImpListePiece.Open("SELECT * FROM Impression_ListePiece WHERE IDSection = '" + rstPiece.Fields["IDSection"].Value + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstImpListePiece.EOF)
                        {
                            bAjouterSection = false; while (!rstImpListePiece.EOF)
                            {
                                if (rstImpListePiece.Fields["NomSousSection"].Value == rstPiece.Fields["SousSection"].Value)
                                {
                                    bAjouterSousSection = false;
                                    if (rstPiece.Fields["NumItem"].Value != "Texte" & rstPiece.Fields["NumItem"].Value != "Text")
                                    {
                                        if (rstImpListePiece.Fields["NumItem"].Value == rstPiece.Fields["NumItem"].Value)
                                        {
                                            bAjouterPiece = false; rstImpListePiece.Fields["Qté"].Value = ((double)rstImpListePiece.Fields["Qté"].Value + (double)rstPiece.Fields["Qté"].Value).ToString();
                                            if (!(rstImpListePiece.Fields["ID"].Value is DBNull))
                                            {
                                                if (rstImpListePiece.Fields["ID"].Value != "") { rstImpListePiece.Fields["ID"].Value = rstImpListePiece.Fields["ID"].Value + ", " + rstPiece.Fields["ID"].Value; } else { rstImpListePiece.Fields["ID"].Value = rstPiece.Fields["ID"].Value; }
                                            }
                                            else { rstImpListePiece.Fields["ID"].Value = rstPiece.Fields["ID"].Value; }
                                            rstImpListePiece.Update();
                                            if (rstImpListePiece.Fields["Qté"].Value == 0)
                                            {
                                                rstImpListePiece.Delete(); rstImpListePiece.Filter = "NomSousSection = '" + Strings.Replace(rstPiece.Fields["SousSection"].Value, "'", "''") + "'";
                                                if (rstImpListePiece.RecordCount == 1)
                                                {
                                                    rstImpListePiece.Delete(); rstImpListePiece.Filter = "IDSection = '" + rstPiece.Fields["IDSection"].Value + "'";
                                                    if (rstImpListePiece.RecordCount == 1)
                                                    {
                                                        rstImpListePiece.Delete();
                                                    }
                                                }
                                                rstImpListePiece.Filter = "";
                                            }
                                            break;
                                        }
                                    }
                                    else { break; }
                                }
                                rstImpListePiece.MoveNext();
                            }
                        }
                        if (bAjouterSection == true)
                        {
                            if (m_eLangage == EnumLangage.ANGLAIS) { sSection = "NomSectionEN"; } else { sSection = "NomSectionFR"; }
                            rstTemp.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstPiece.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); rstImpListePiece.AddNew(); rstImpListePiece.Fields["NoLigne"].Value = XPiece; rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                            if (!(rstTemp.Fields[sSection].Value is DBNull))
                            {
                                rstImpListePiece.Fields["Section"].Value = rstTemp.Fields[sSection].Value;
                            }
                            else
                            {
                                rstImpListePiece.Fields["Section"].Value = " ";
                            }
                            rstImpListePiece.Fields["IDSection"].Value = rstPiece.Fields["IDSection"].Value;
                            rstImpListePiece.Update();
                            XPiece++;
                            rstTemp.Close();
                        }
                        if (bAjouterSousSection == true)
                        {
                            sSousSection = rstPiece.Fields["SousSection"].Value;
                            if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                            {
                                sSousSection = " ";
                            }
                            rstImpListePiece.AddNew();
                            rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                            rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                            rstImpListePiece.Fields["SousSection"].Value = sSousSection;
                            rstImpListePiece.Fields["NomSousSection"].Value = rstPiece.Fields["SousSection"].Value;
                            rstImpListePiece.Fields["IDSection"].Value = rstPiece.Fields["IDSection"].Value;
                            rstImpListePiece.Update();
                            XPiece++;
                        }
                        if (bAjouterPiece == true)
                        {
                            rstImpListePiece.AddNew();
                            rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                            rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                            rstImpListePiece.Fields["NumItem"].Value = rstPiece.Fields["NumItem"].Value;
                            rstImpListePiece.Fields["Qté"].Value = rstPiece.Fields["Qté"].Value;
                            if (m_eLangage == EnumLangage.ANGLAIS)
                            {
                                rstImpListePiece.Fields["Description"].Value = rstPiece.Fields["Desc_EN"].Value;
                            }
                            else
                            {
                                rstImpListePiece.Fields["Description"].Value = rstPiece.Fields["Desc_FR"].Value;
                            }
                            rstImpListePiece.Fields["Manufact"].Value = rstPiece.Fields["Manufact"].Value;
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                rstImpListePiece.Fields["ID"].Value = rstPiece.Fields["ID"].Value;
                            }
                            rstImpListePiece.Fields["IDSection"].Value = rstPiece.Fields["IDSection"].Value;
                            rstImpListePiece.Fields["NomSousSection"].Value = rstPiece.Fields["SousSection"].Value;
                            rstImpListePiece.Update(); XPiece++;
                        }
                        rstImpListePiece.Close();
                    }
                    rstPiece.MoveNext();
                }
                rstImpListePiece.CursorLocation = CursorLocationEnum.adUseClient;
                rstImpListePiece.Open("SELECT * FROM impression_Listepiece WHERE TRIM(IDSoumission) = '" + sNoSoumission.Trim() + "' ORDER BY noligne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                xlsApp = new Application();
                xlsWorkBook = xlsApp.Workbooks.Add(string.Empty);
                xlsApp.Cells["A1"].Text = "Liste de matériel ( " + txtNoProjSoum.Text + " )";
                xlsApp.Cells["A1"].Font.Bold = true;
                xlsApp.Cells["A1"].Font.Underline = xlUnderlineStyleSingle;
                xlsApp.Cells["A1"].HorizontalAlignment = xlCenter;
                xlsApp.Cells["A1"].Font.Size = 14;
                xlsApp.Cells["A1:E1"].Merge();
                xlsApp.Cells["A4"].Text = "Qté";
                xlsApp.Cells["A4"].Font.Bold = true;
                xlsApp.Cells["A4"].HorizontalAlignment = xlCenter;
                xlsApp.Cells["B4"].Text = "No. Item";
                xlsApp.Cells["B4"].Font.Bold = true;
                xlsApp.Cells["B4"].HorizontalAlignment = xlCenter;
                xlsApp.Cells["C4"].Text = "Description";
                xlsApp.Cells["C4"].Font.Bold = true;
                xlsApp.Cells["C4"].HorizontalAlignment = xlCenter;
                xlsApp.Cells["D4"].Text = "Manufacturier";
                xlsApp.Cells["D4"].Font.Bold = true;
                xlsApp.Cells["D4"].HorizontalAlignment = xlCenter;
                xlsApp.Cells["E4"].Text = "#ID";
                xlsApp.Cells["E4"].Font.Bold = true;
                xlsApp.Cells["E4"].HorizontalAlignment = xlCenter;
                xlsApp.Cells["A4:E4"].Borders[xlEdgeBottom].LineStyle = xlContinuous;
                xlsApp.Cells["A4:E4"].Borders[xlEdgeBottom].Weight = xlMedium;
                xlsApp.Cells["A4:E4"].Borders[xlEdgeBottom].ColorIndex = xlAutomatic;
                xlsApp.Cells["A4:E4"].Borders[xlInsideVertical].LineStyle = xlContinuous;
                xlsApp.Cells["A4:E4"].Borders[xlInsideVertical].Weight = xlMedium;
                xlsApp.Cells["A4:E4"].Borders[xlInsideVertical].ColorIndex = xlAutomatic;
                X = 5;
                while (!rstImpListePiece.EOF)
                {
                    xlsApp.Cells["A" + X].Text = rstImpListePiece.Fields["Qté"].Value;
                    if (rstImpListePiece.Fields["Section"].Value is DBNull)
                    {
                        xlsApp.Cells["B" + X].Text = rstImpListePiece.Fields["NumItem"].Value;
                    }
                    else
                    {
                        xlsApp.Cells["B" + X].Text = rstImpListePiece.Fields["Section"].Value;
                        xlsApp.Cells["B" + X].Font.Bold = true;
                    }
                    if (rstImpListePiece.Fields["SousSection"].Value is DBNull)
                    {
                        xlsApp.Cells["C" + X].Text = rstImpListePiece.Fields["Description"].Value;
                    }
                    else
                    {
                        xlsApp.Cells["C" + X].Text = rstImpListePiece.Fields["SousSection"].Value;
                        xlsApp.Cells["C" + X].Font.Bold = true;
                    }
                    xlsApp.Cells["D" + X].Text = rstImpListePiece.Fields["Manufact"].Value;
                    xlsApp.Cells["E" + X].Text = rstImpListePiece.Fields["ID"].Value;
                    xlsApp.Cells["A" + X + ":E" + X].Borders[xlEdgeBottom].LineStyle = xlContinuous;
                    xlsApp.Cells["A" + X + ":E" + X].Borders[xlEdgeBottom].Weight = xlThin;
                    xlsApp.Cells["A" + X + ":E" + X].Borders[xlEdgeBottom].ColorIndex = xlAutomatic;
                    xlsApp.Cells["A" + X + ":E" + X].Borders[xlInsideVertical].LineStyle = xlContinuous;
                    xlsApp.Cells["A" + X + ":E" + X].Borders[xlInsideVertical].Weight = xlThin;
                    xlsApp.Cells["A" + X + ":E" + X].Borders[xlInsideVertical].ColorIndex = xlAutomatic;
                    rstImpListePiece.MoveNext();
                    X++;
                }
                X++;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeBottom].LineStyle = xlContinuous;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeBottom].Weight = xlMedium;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeBottom].ColorIndex = xlAutomatic;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeTop].LineStyle = xlContinuous;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeTop].Weight = xlMedium;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeTop].ColorIndex = xlAutomatic;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeLeft].LineStyle = xlContinuous;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeLeft].Weight = xlMedium;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeLeft].ColorIndex = xlAutomatic;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeRight].LineStyle = xlContinuous;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeRight].Weight = xlMedium;
                xlsApp.Cells["A4:E" + X].Borders[xlEdgeRight].ColorIndex = xlAutomatic;
                xlsApp.Columns["A:A"].EntireColumn.AutoFit();
                xlsApp.Columns["B:B"].EntireColumn.AutoFit();
                xlsApp.Columns["C:C"].EntireColumn.AutoFit();
                xlsApp.Columns["D:D"].EntireColumn.AutoFit();
                xlsApp.Columns["E:E"].EntireColumn.AutoFit();
                rstImpListePiece.Close();
                rstImpListePiece = default;
                Cursor.Current = Cursors.Default;
                sSaveAsFileName = xlsApp.GetSaveAsFilename(txtNoProjSoum.Text + ".xlsx", "Fichiers Excel (*.xlsx), *.xlsx");
                if (sSaveAsFileName != "Faux") { xlsWorkBook.SaveAs(sSaveAsFileName); }
                xlsWorkBook.Saved = true;
                xlsWorkBook.Close();
                xlsWorkBook = default;
                xlsApp.Quit();
                xlsApp = default;
                rstTemp = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ExporterListePieces", ex);
            }
        }
        public void Commande()
        {
            try
            {
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstBCPiece;
                ADODB.Recordset rstBC;
                ADODB.Recordset rstFRS;
                var iIDFRS = default(bool);
                string sFRS;
                string sNoBC;
                string sWherePiece;
                string sWhereNoLigne;
                string sWhere;
                var sDateRequise = default(string);
                string sNoLigne;
                bool bPremier;
                bool bPremierNoLigne;
                rstProjet = new Recordset();
                rstProjet.Open("SELECT ProchaineCommande FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!(rstProjet.Fields["ProchaineCommande"].Value is DBNull))
                {
                    rstProjet.Fields["ProchaineCommande"].Value = rstProjet.Fields["ProchaineCommande"].Value + 1;
                    rstProjet.Update();
                }
                rstProjet.Close();
                rstProjet = default;
                sFRS = ViewCommande.lblFournisseur.Text;
                sNoBC = ViewCommande.lblNoBC.Text;
                rstBC = new Recordset();
                rstFRS = new Recordset();
                rstPiece = new Recordset();
                rstBCPiece = new Recordset();
                rstBC.Open("SELECT * FROM BonsCommandes WHERE NoBonCommande = '" + sNoBC + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstBC.EOF)
                {
                    rstFRS.Open("SELECT IDFRS, NomFournisseur FROM Fournisseur WHERE IDFRS = " + rstBC.Fields["NoFournisseur"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstFRS.Fields["NomFournisseur"].Value == sFRS)
                    {
                        iIDFRS = (bool)rstFRS.Fields["IDFRS"].Value;
                        sDateRequise = rstBC.Fields["DateRequise"].Value;
                        rstFRS.Close();
                        break;
                    }
                    rstFRS.Close();
                    rstBC.MoveNext();
                }
                rstBC.Close();
                rstBC = default;
                rstFRS = default;
                rstBCPiece.Open("SELECT NoItem, NuméroLigne FROM BonsCommandes_Pieces WHERE NoFournisseur = " + iIDFRS + " AND NoBonCommande = '" + sNoBC + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                sWhere = "(IDProjet = '" + txtNoProjSoum.Text + "')";
                sWherePiece = "NumItem In (";
                sWhereNoLigne = "NuméroLigne In (";
                bPremier = true;
                while (!rstBCPiece.EOF)
                {
                    if (!(rstBCPiece.Fields["NoItem"].Value is DBNull))
                    {
                        sNoLigne = rstBCPiece.Fields["NuméroLigne"].Value;
                        if (bPremier == true)
                        {
                            if (Strings.InStr(1, sNoLigne, ",") == 0)
                            {
                                sWherePiece += "'" + Strings.Replace(rstBCPiece.Fields["NoItem"].Value, "'", "''") + "'";
                                sWhereNoLigne += rstBCPiece.Fields["NuméroLigne"].Value;
                            }
                            else
                            {
                                bPremierNoLigne = true; while (Strings.InStr(1, sNoLigne, ",") > 0)
                                {
                                    if (bPremierNoLigne == true) { sWherePiece += "'" + Strings.Replace(rstBCPiece.Fields["NoItem"].Value, "'", "''") + "'"; sWhereNoLigne += Gauche(sNoLigne, Strings.InStr(1, sNoLigne, ",") - 1); bPremierNoLigne = false; } else { sWherePiece += ", '" + Strings.Replace(rstBCPiece.Fields["NoItem"].Value, "'", "''") + "'"; sWhereNoLigne += ", " + Gauche(sNoLigne, Strings.InStr(1, sNoLigne, ",") - 1); }
                                    sNoLigne = Droite(sNoLigne, Strings.Len(sNoLigne) - (Strings.InStr(1, sNoLigne, ",") + 1));
                                }
                                if (!string.IsNullOrEmpty(Strings.Trim(sNoLigne))) { sWherePiece += ", '" + Strings.Replace(rstBCPiece.Fields["NoItem"].Value, "'", "''") + "'"; sWhereNoLigne += ", " + sNoLigne; }
                            }
                            bPremier = false;
                        }
                        else
                        if (Strings.InStr(1, sNoLigne, ",") == 0) { sWherePiece += ", '" + rstBCPiece.Fields["NoItem"].Value + "'"; sWhereNoLigne += ", " + rstBCPiece.Fields["NuméroLigne"].Value; }
                        else
                        {
                            while (Strings.InStr(1, sNoLigne, ",") > 0) { sWherePiece += ", '" + Strings.Replace(rstBCPiece.Fields["NoItem"].Value, "'", "''") + "'"; sWhereNoLigne += ", " + Gauche(sNoLigne, Strings.InStr(1, sNoLigne, ",") - 1); sNoLigne = Droite(sNoLigne, Strings.Len(sNoLigne) - (Strings.InStr(1, sNoLigne, ",") + 1)); }
                            if (!string.IsNullOrEmpty(Strings.Trim(sNoLigne))) { sWherePiece += ", '" + Strings.Replace(rstBCPiece.Fields["NoItem"].Value, "'", "''") + "'"; sWhereNoLigne += ", " + sNoLigne; }
                        }
                    }
                    rstBCPiece.MoveNext();
                }
                sWherePiece += ")";
                sWhereNoLigne += ")";
                sWhere = sWhere + " AND " + sWherePiece + " AND " + sWhereNoLigne;
                rstBCPiece.Close();
                rstBCPiece = default;
                rstPiece.Open("SELECT * FROM Projet_Pieces WHERE " + sWhere, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstPiece.EOF)
                {
                    rstPiece.Fields["Commandé"].Value = true;
                    rstPiece.Fields["DateCommande"].Value = ConvertDate(DateTime.Today);
                    rstPiece.Fields["DateRequise"].Value = sDateRequise;
                    rstPiece.Fields["NomCommande"].Value = IdNomEmploye;
                    rstPiece.Fields["NoSéquentiel"].Value = Droite(sNoBC, 3);
                    rstPiece.Update();
                    rstPiece.MoveNext();
                }
                rstPiece.Close();
                rstPiece = default;
                RemplirListViewProjSoum(txtNoProjSoum.Text);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "Commande", ex);
            }
        }
        private void MauvaisPrix()
        {
            try
            {
                if (lvwSoumission.Items.Count > 0)
                {
                    if ((string)lvwSoumission.FocusedItem.SubItems[11].Tag == "EXTRA")
                    {
                        if ((string)lvwSoumission.FocusedItem.Tag != string.Empty)
                        {
                            if (!string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text))
                            {
                                if (lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                                {
                                    if (double.Parse(lvwSoumission.FocusedItem.Text.Replace("*", string.Empty)) > 0d)
                                    {
                                        ViderChamps_frs();
                                        RemplirComboFournisseur();
                                        var loopTo = cmbfrs.Items.Count - 1;
                                        for (int X = 0; X <= loopTo; X++)
                                        {
                                            if (cmbfrs.Items[X].ToString() != (string)lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].Tag)
                                            {
                                                cmbfrs.SelectedIndex = X; break;
                                            }
                                        }
                                        cmbfrs.Enabled = true;
                                        fraPrixPiece.Tag = lvwSoumission.FocusedItem.Index;
                                        m_bMauvaisPrix = true;
                                        fraPrixPiece.Visible = true; txtPrixList.Focus();
                                    }
                                    else
                                    {
                                        MessageBox.Show("La quantité est déjà dans le négatint!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Cette commande doit être faite dans le projet " + lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROVENANCE].Text, "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    }
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "MauvaisPrix", ex);
            }
        }
        private void MaterielInutile()
        {
            var COLOR_ROSE = default(object);
            try
            {
                ListViewItem itmProjet;
                if (lvwSoumission.Items.Count > 0)
                {
                    itmProjet = lvwSoumission.FocusedItem;
                    if (Conversions.ToBoolean(Operators.AndObject(Operators.ConditionalCompareObjectNotEqual(itmProjet.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_ROSE, false), Operators.ConditionalCompareObjectNotEqual(itmProjet.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BLEU, false))))
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmProjet.Tag, string.Empty, false)))
                        {
                            if (!string.IsNullOrEmpty(itmProjet.SubItems[I_COL_SOUM_PIECE].Text))
                            {
                                if (itmProjet.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & itmProjet.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                                {
                                    if (double.Parse(Strings.Replace(itmProjet.Text, "*", string.Empty)) > 0d)
                                    {
                                        m_bPieceInutile = true; m_bRecherchePiece = false; m_bChangementFRS = false; AfficherListeFournisseurs();
                                        if (lvwFournisseur.Items.Count == 0) { MessageBox.Show("Il n'y a aucun fournisseur pour cette pièce!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; } else { fraFournisseur.Visible = true; }
                                    }
                                    else { MessageBox.Show("La quantité est déjà dans le négatint!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                }
                            }
                        }
                    }
                    else { MessageBox.Show("Cette commande doit être faite dans le projet " + itmProjet.SubItems[I_COL_SOUM_PROVENANCE].Text, "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "MaterielInutile", ex);
            }
        }
        private void UpdateOrdre()
        {
            try
            {
                ADODB.Recordset rstOrdre;
                ADODB.Recordset rstCount;
                ADODB.Recordset rstSection;
                int X;
                int X2;
                int iIndexCopie;
                var iSection = default(int);
                int iIndex;
                int iNbreSection;
                bool bPremier;
                ListViewItem itmProjSoum;
                string sSection;
                rstOrdre = new Recordset();
                for (X = 1; X <= lvwSoumission.Items.Count; X++)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                    {
                        rstOrdre.Open("SELECT Ordre FROM SoumProjSectionMec WHERE IDSection = " + (string)lvwSoumission.Items[X].Tag, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        lvwSoumission.Items[X].SubItems[I_COL_SOUM_MANUFACT].Tag = rstOrdre.Fields["Ordre"].Value;
                        rstOrdre.Close();
                    }
                }
                rstOrdre = default;
                rstCount = new Recordset();
                rstCount.Open("SELECT COUNT(IDSection) as NbreSection FROM SoumProjSectionMec", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                iNbreSection = rstCount.Fields["NbreSection"].Value;
                rstCount.Close();
                rstCount = default;
                for (X = 1; X <= lvwSoumission.Items.Count; X++)
                {
                    if ((string)lvwSoumission.Items[X - iSection].Tag != string.Empty)
                    {
                        lvwSoumission.Items.RemoveAt(X - iSection);
                        iSection++;
                    }
                }
                iIndex = 1;
                rstSection = new Recordset();
                var loopTo2 = iNbreSection;
                for (X = 1; X <= loopTo2; X++)
                {
                    bPremier = true;
                    X2 = iIndex;
                    while (X2 <= lvwSoumission.Items.Count)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X2].SubItems[I_COL_SOUM_MANUFACT].Tag, X, false)))
                        {
                            if (bPremier == true)
                            {
                                itmProjSoum = lvwSoumission.Items.Insert(iIndex, "");
                                ValeurParDefaut(itmProjSoum);
                                if (m_eLangage == EnumLangage.ANGLAIS) { sSection = "NomSectionEN"; } else { sSection = "NomSectionFR"; }
                                rstSection.Open(Operators.ConcatenateObject("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = ", lvwSoumission.Items[X2 + 1].Tag), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (!(rstSection.Fields[sSection].Value is DBNull))
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstSection.Fields[sSection].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstSection.Fields[sSection].Value)); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                rstSection.Close(); iIndex++; X2++; bPremier = false;
                            }
                            itmProjSoum = lvwSoumission.Items.Insert(iIndex, ""); iIndexCopie = X2 + 1; itmProjSoum.Checked = lvwSoumission.Items[iIndexCopie].Checked; itmProjSoum.Text = lvwSoumission.Items[iIndexCopie].Text; itmProjSoum.ForeColor = lvwSoumission.Items[iIndexCopie].ForeColor; itmProjSoum.Tag = lvwSoumission.Items[iIndexCopie].Tag;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PIECE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PIECE].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_PIECE].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PIECE].Tag;
                            itmProjSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PIECE].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DESCR].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DESCR].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DESCR].Tag;
                            itmProjSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DESCR].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MANUFACT].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MANUFACT].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MANUFACT].Tag;
                            itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MANUFACT].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_LIST].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_LIST].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_LIST].Tag;
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_LIST].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_ESCOMPTE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_ESCOMPTE].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_ESCOMPTE].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_NET].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_NET].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_NET].ForeColor;
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PRIX_NET].Tag;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_TEMPS].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TEMPS].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TEMPS].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TEMPS].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MONTAGE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MONTAGE].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_MONTAGE].ForeColor;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TOTAL].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TOTAL].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TOTAL].ForeColor;
                            itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_TOTAL].Tag;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROFIT].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROFIT].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROFIT].ForeColor;
                            itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROFIT].Tag;
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DISTRIB) { itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DISTRIB].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DISTRIB].Text)); }
                            itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DISTRIB].Tag;
                            itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DISTRIB].ForeColor;
                            if (string.IsNullOrEmpty(lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_COMMENTAIRE].Text))
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, " ")); }
                            }
                            else
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_COMMENTAIRE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_COMMENTAIRE].Text)); }
                                itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor;
                            }
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                if (!string.IsNullOrEmpty(itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text) & itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_ID) { itmProjSoum.SubItems[I_COL_SOUM_ID].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_ID].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ID, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_ID].Text)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_ID].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_ID].ForeColor;
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_FACTURATION) { itmProjSoum.SubItems[I_COL_SOUM_FACTURATION].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_FACTURATION].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_FACTURATION].Text)); }
                                    if (string.IsNullOrEmpty(lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_FACTURATION].Text)) { itmProjSoum.SubItems[I_COL_SOUM_FACTURATION].Tag = ""; } else { itmProjSoum.SubItems[I_COL_SOUM_FACTURATION].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_FACTURATION].Tag; }
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_COMMANDE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_COMMANDE].Text)); }
                                    if (!string.IsNullOrEmpty(itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Text)) { itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor; }
                                    itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_COMMANDE].Tag;
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_REQUISE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_REQUISE].Text)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor;
                                    itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Tag = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_DATE_REQUISE].Tag;
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_NOM_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_NOM_COMMANDE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_NOM_COMMANDE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_NOM_COMMANDE].Text)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor;
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_NO_SEQUENTIEL) { itmProjSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_NO_SEQUENTIEL, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor;
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_PROVENANCE].Text = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROVENANCE].Text; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROVENANCE, new ListViewItem.ListViewSubItem(null, lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROVENANCE].Text)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_PROVENANCE].ForeColor = lvwSoumission.Items[iIndexCopie].SubItems[I_COL_SOUM_PROVENANCE].ForeColor;
                                }
                            }
                            lvwSoumission.Items.RemoveAt(iIndexCopie); lvwSoumission.Refresh(); iIndex++;
                        }
                        X2++;
                    }
                }
                rstSection = default;
                if (lvwSoumission.Items.Count > 0)
                {
                    Deselect();
                    lvwSoumission.Items[1].Selected = true;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "UpdateOrdre", ex);
            }
        }
        private void UpdatePieces()
        {
            try
            {
                ListViewItem itmPiece;
                ADODB.Recordset rstPieceFRS = new ADODB.Recordset();
                ADODB.Recordset rstConfig = new ADODB.Recordset();
                rstConfig.Open("SELECT TauxAmericain, TauxEspagnol FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                string sTauxUSA = rstConfig.Fields["TauxAmericain"].Value;
                string sTauxSPA = rstConfig.Fields["TauxEspagnol"].Value;
                rstConfig.Close();
                rstConfig = default;
                for (int X = 1; X <= lvwSoumission.Items.Count; X++)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                    {
                        if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text))
                        {
                            itmPiece = lvwSoumission.Items[X];
                            ValeurParDefaut(itmPiece);
                            if (itmPiece.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & itmPiece.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                            {
                                rstPieceFRS.Open(Operators.ConcatenateObject("SELECT PRIX_LIST, PRIX_SP, PRIX_NET, ESCOMPTE, DeviseMonétaire FROM PiecesFRS WHERE PIECE = '" + Strings.Replace(itmPiece.SubItems[I_COL_SOUM_PIECE].Text, "'", "''") + "' AND IDFRS = ", itmPiece.SubItems[I_COL_SOUM_DISTRIB].Tag), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (!rstPieceFRS.EOF)
                                {
                                    if (!(rstPieceFRS.Fields["PRIX_LIST"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(rstPieceFRS.Fields["PRIX_LIST"].Value)))
                                        {
                                            if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "USA")
                                            {
                                                if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                                {
                                                    itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text = Math.Round(double.Parse(rstPieceFRS.Fields["PRIX_LIST"].Value) / double.Parse(sTauxUSA), 4).ToString() + "$";
                                                }
                                                else
                                                {
                                                    itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round((double)rstPieceFRS.Fields["PRIX_LIST"].Value / double.Parse(sTauxUSA), 4).ToString() + "$"));
                                                }
                                            }
                                            else
if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "SPA")
                                            {
                                                if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                                {
                                                    itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text = Math.Round((double)rstPieceFRS.Fields["PRIX_LIST"].Value / double.Parse(sTauxSPA), 4).ToString() + "$";
                                                }
                                                else
                                                {
                                                    itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round((double)rstPieceFRS.Fields["PRIX_LIST"].Value / double.Parse(sTauxSPA), 4).ToString() + "$"));
                                                }
                                            }
                                            else
if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                            {
                                                itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text = rstPieceFRS.Fields["PRIX_LIST"].Value + "$";
                                            }
                                            else
                                            {
                                                itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["PRIX_LIST"].Value + "$"));
                                            }
                                        }
                                        else
                                        if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text = "0".ToString() + "$";
                                        }
                                        else
                                        {
                                            itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, "0"));
                                        }
                                    }
                                    else
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text = "0".ToString() + "$";
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, "0"));
                                    }
                                    if (!(rstPieceFRS.Fields["PRIX_NET"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(rstPieceFRS.Fields["PRIX_NET"].Value))
                                        {
                                            if (rstPieceFRS.Fields["ESCOMPTE"].Value != string.Empty)
                                            {
                                                if (itmPiece.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                                                {
                                                    itmPiece.SubItems[I_COL_SOUM_ESCOMPTE].Text = rstPieceFRS.Fields["Escompte"].Value + "%";
                                                }
                                                else
                                                {
                                                    itmPiece.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["Escompte"].Value + "%"));
                                                }
                                            }
                                            if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                            {
                                                itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = rstPieceFRS.Fields["PRIX_NET"].Value + "$";
                                            }
                                            else
                                            {
                                                itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["PRIX_NET"].Value + "$"));
                                            }
                                        }
                                        else
                                        if (!(rstPieceFRS.Fields["PRIX_SP"].Value is DBNull))
                                        {
                                            if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                            {
                                                itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = rstPieceFRS.Fields["PRIX_SP"].Value + "$";
                                            }
                                            else
                                            {
                                                itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["PRIX_SP"].Value + "$"));
                                            }
                                        }
                                        else
                                        if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = "";
                                        }
                                        else
                                        {
                                            itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, ""));
                                        }
                                    }
                                    else
                                    if (!(rstPieceFRS.Fields["PRIX_SP"].Value is DBNull))
                                    {
                                        if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = rstPieceFRS.Fields["PRIX_SP"].Value + "$";
                                        }
                                        else
                                        {
                                            itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["PRIX_SP"].Value + "$"));
                                        }
                                    }
                                    else
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = "";
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, ""));
                                    }
                                    if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "USA")
                                    {
                                        if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) / double.Parse(sTauxUSA), 4).ToString() + "$";
                                        }
                                        else
                                        {
                                            itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) / double.Parse(sTauxUSA), 4).ToString()));
                                        }
                                    }
                                    else
                                    if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "SPA")
                                    {
                                        if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) / double.Parse(sTauxSPA), 4).ToString() + "$";
                                        }
                                        else
                                        {
                                            itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) / double.Parse(sTauxSPA), 4).ToString()));
                                        }
                                    }
                                    else
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text = itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text.ToString() + "$";
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text));
                                    }
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_TOTAL)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_TOTAL].Text = (double.Parse(Strings.Replace(itmPiece.Text, "*", string.Empty)) * double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit)).ToString();
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmPiece.Text, "*", string.Empty)) * double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit)).ToString()));
                                    }
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_PROFIT)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_PROFIT].Text = (double.Parse(itmPiece.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmPiece.Text, "*", string.Empty))).ToString();
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, (double.Parse(itmPiece.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmPiece.Text, "*", string.Empty))).ToString()));
                                    }
                                    if (string.IsNullOrEmpty(Strings.Trim(itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text)))
                                    {
                                        if (itmPiece.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text = " ";
                                        }
                                        else
                                        {
                                            itmPiece.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " "));
                                        }
                                    }
                                    if (!(rstPieceFRS.Fields["PRIX_NET"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(rstPieceFRS.Fields["PRIX_NET"].Value)))
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Tag = rstPieceFRS.Fields["PRIX_LIST"].Value;
                                        }
                                        else
                                        {
                                            itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Tag = rstPieceFRS.Fields["PRIX_SP"].Value;
                                        }
                                    }
                                    else { itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Tag = rstPieceFRS.Fields["PRIX_SP"].Value; }
                                }
                                else
                                {
                                    MessageBox.Show("Il n'y a pas de prix du fournisseur " + itmPiece.SubItems[I_COL_SOUM_DISTRIB].Text + " pour la pièce " + itmPiece.SubItems[I_COL_SOUM_PIECE].Text + " ou la pièce n'existe plus!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                }
                                rstPieceFRS.Close();
                            }
                        }
                    }
                }
                rstPieceFRS = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "UpdatePieces", ex);
            }
        }
        private bool VerintierSiDejaProjet()
        {
            bool VerintierSiDejaProjetRet = default;
            try
            {
                ADODB.Recordset rstProjet;
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF) { VerintierSiDejaProjetRet = true; }
                rstProjet.Close();
                rstProjet = default;
                return VerintierSiDejaProjetRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerintierSiDejaProjet", ex); return false;
            }
        }
        private void TransfererSoumDansProjet(string sNoProjet, string sLiaison)
        {
            try
            {
                ADODB.Recordset rstSoum;
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstSoumPiece;
                ADODB.Recordset rstProjetPiece;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstConfig;
                int X;
                rstSoum = new Recordset();
                rstProjet = new Recordset();
                rstSoumPiece = new Recordset();
                rstProjetPiece = new Recordset();
                rstEmploye = new Recordset();
                rstProjSoum = new Recordset();
                rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstSoumPiece.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + txtNoProjSoum.Text + "' AND Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstProjetPiece.Open("SELECT * FROM Projet_Pieces", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstProjSoum.EOF)
                {
                    rstProjSoum.AddNew();
                    rstProjSoum.Fields["IDProjSoum"].Value = sNoProjet;
                    rstProjSoum.Fields["NoClient"].Value = rstSoum.Fields["IDClient"].Value;
                    rstProjSoum.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                    rstProjSoum.Fields["Description"].Value = rstSoum.Fields["Description"].Value;
                    rstProjSoum.Fields["Ouvert"].Value = true;
                    rstProjSoum.Fields["Type"].Value = "P";
                    rstProjSoum.Update();
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstProjSoum.Fields["Ouvert"].Value = false;
                rstProjSoum.Update();
                rstProjSoum.Close();
                rstProjSoum = default;
                rstProjet.AddNew();
                rstProjet.Fields["IDProjet"].Value = sNoProjet;
                rstProjet.Fields["IDSoumission"].Value = rstSoum.Fields["IDSoumission"].Value;
                rstProjet.Fields["IDClient"].Value = rstSoum.Fields["IDClient"].Value;
                rstProjet.Fields["IDContact"].Value = rstSoum.Fields["IDContact"].Value;
                rstProjet.Fields["Description"].Value = rstSoum.Fields["Description"].Value;
                rstProjet.Fields["Panneau_aire"].Value = rstSoum.Fields["Panneau_aire"].Value;
                rstProjet.Fields["panneau_espace"].Value = rstSoum.Fields["panneau_espace"].Value;
                rstProjet.Fields["NbreManuel"].Value = rstSoum.Fields["NbreManuel"].Value;
                rstProjet.Fields["transport"].Value = rstSoum.Fields["transport"].Value;
                rstProjet.Fields["csa"].Value = rstSoum.Fields["csa"].Value;
                rstProjet.Fields["cul"].Value = rstSoum.Fields["cul"].Value;
                rstProjet.Fields["cur"].Value = rstSoum.Fields["cur"].Value;
                rstProjet.Fields["ul"].Value = rstSoum.Fields["ul"].Value;
                rstProjet.Fields["ur"].Value = rstSoum.Fields["ur"].Value;
                rstProjet.Fields["ce"].Value = rstSoum.Fields["ce"].Value;
                rstProjet.Fields["Delais"].Value = rstSoum.Fields["Delais"].Value;
                rstProjet.Fields["Creer"].Value = ConvertDate(DateTime.Today);
                rstProjet.Fields["CheminPhotos"].Value = rstSoum.Fields["CheminPhotos"].Value;
                if (!string.IsNullOrEmpty(sLiaison)) { rstProjet.Fields["LiaisonChargeable"].Value = sLiaison; }
                rstEmploye.Open(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT noEmploye FROM Employés WHERE loginname = '", IdLoginEmploye), "'"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstProjet.Fields["Creer_Par"].Value = rstEmploye.Fields["noEmploye"].Value;
                rstEmploye.Close();
                rstEmploye = default;
                rstProjet.Fields["TempsDessin"].Value = rstSoum.Fields["TempsDessin"].Value;
                rstProjet.Fields["TempsFabrication"].Value = rstSoum.Fields["TempsFabrication"].Value;
                rstProjet.Fields["TempsAssemblage"].Value = rstSoum.Fields["TempsAssemblage"].Value;
                rstProjet.Fields["TempsProgInterface"].Value = rstSoum.Fields["TempsProgInterface"].Value;
                rstProjet.Fields["TempsProgAutomate"].Value = rstSoum.Fields["TempsProgAutomate"].Value;
                rstProjet.Fields["TempsProgRobot"].Value = rstSoum.Fields["TempsProgRobot"].Value;
                rstProjet.Fields["TempsVision"].Value = rstSoum.Fields["TempsVision"].Value;
                rstProjet.Fields["TempsTest"].Value = rstSoum.Fields["TempsTest"].Value;
                rstProjet.Fields["TempsInstallation"].Value = 0;
                rstProjet.Fields["TempsMiseService"].Value = 0;
                rstProjet.Fields["TempsFormation"].Value = rstSoum.Fields["TempsFormation"].Value;
                rstProjet.Fields["TempsGestion"].Value = rstSoum.Fields["TempsGestion"].Value;
                rstProjet.Fields["TempsShipping"].Value = rstSoum.Fields["TempsShipping"].Value;
                rstConfig = new Recordset();
                if (!(rstSoum.Fields["TauxDessin"].Value is DBNull)) { rstProjet.Fields["TauxDessin"].Value = rstSoum.Fields["TauxDessin"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxDessinMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxDessin"].Value = rstConfig.Fields["TauxDessinMec"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxFabrication"].Value is DBNull)) { rstProjet.Fields["TauxFabrication"].Value = rstSoum.Fields["TauxFabrication"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxFabrication FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxFabrication"].Value = rstConfig.Fields["TauxFabrication"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxAssemblage"].Value is DBNull)) { rstProjet.Fields["TauxAssemblage"].Value = rstSoum.Fields["TauxAssemblage"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxAssemblageMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxAssemblage"].Value = rstConfig.Fields["TauxAssemblageMec"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxProgInterface"].Value is DBNull)) { rstProjet.Fields["TauxProgInterface"].Value = rstSoum.Fields["TauxProgInterface"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxProgInterface FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxProgInterface"].Value = rstConfig.Fields["TauxProgInterface"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxProgAutomate"].Value is DBNull)) { rstProjet.Fields["TauxProgAutomate"].Value = rstSoum.Fields["TauxProgAutomate"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxProgAutomate FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxProgAutomate"].Value = rstConfig.Fields["TauxProgAutomate"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxProgRobot"].Value is DBNull)) { rstProjet.Fields["TauxProgRobot"].Value = rstSoum.Fields["TauxProgRobot"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxProgRobot FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxProgRobot"].Value = rstConfig.Fields["TauxProgRobot"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxVision"].Value is DBNull)) { rstProjet.Fields["TauxVision"].Value = rstSoum.Fields["TauxVision"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxVision FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxVision"].Value = rstConfig.Fields["TauxVision"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxTest"].Value is DBNull)) { rstProjet.Fields["TauxTest"].Value = rstSoum.Fields["TauxTest"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxTestMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxTest"].Value = rstConfig.Fields["TauxTestMec"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxInstallation"].Value is DBNull)) { rstProjet.Fields["TauxInstallation"].Value = rstSoum.Fields["TauxInstallation"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxInstallationMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxInstallation"].Value = rstConfig.Fields["TauxInstallationMec"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxMiseService"].Value is DBNull)) { rstProjet.Fields["TauxMiseService"].Value = rstSoum.Fields["TauxMiseService"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxMiseService FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxMiseService"].Value = rstConfig.Fields["TauxMiseService"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxFormation"].Value is DBNull)) { rstProjet.Fields["TauxFormation"].Value = rstSoum.Fields["TauxFormation"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxFormationMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxFormation"].Value = rstConfig.Fields["TauxFormationMec"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxGestion"].Value is DBNull)) { rstProjet.Fields["TauxGestion"].Value = rstSoum.Fields["TauxGestion"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxGestionProjetsMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxGestion"].Value = rstConfig.Fields["TauxGestionProjetsMec"].Value;
                    rstConfig.Close();
                }
                if (!(rstSoum.Fields["TauxShipping"].Value is DBNull)) { rstProjet.Fields["TauxShipping"].Value = rstSoum.Fields["TauxShipping"].Value; }
                else
                {
                    rstConfig.Open("SELECT TauxShippingMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjet.Fields["TauxShipping"].Value = rstConfig.Fields["TauxShippingMec"].Value;
                    rstConfig.Close();
                }
                rstConfig = default;
                rstProjet.Fields["PrixEmballage"].Value = rstSoum.Fields["PrixEmballage"].Value;
                rstProjet.Fields["imprevue"].Value = rstSoum.Fields["imprevue"].Value;
                rstProjet.Fields["commission"].Value = rstSoum.Fields["commission"].Value;
                rstProjet.Fields["Profit"].Value = rstSoum.Fields["Profit"].Value;
                rstProjet.Fields["total_manuel"].Value = rstSoum.Fields["total_manuel"].Value;
                rstProjet.Fields["total_commission"].Value = rstSoum.Fields["total_Commission"].Value;
                rstProjet.Fields["total_profit"].Value = rstSoum.Fields["Total_Profit"].Value;
                rstProjet.Fields["PrixTotal"].Value = rstSoum.Fields["PrixTotal"].Value;
                rstProjet.Fields["total_piece"].Value = rstSoum.Fields["Total_piece"].Value;
                rstProjet.Fields["total_imprevue"].Value = rstSoum.Fields["total_imprevue"].Value;
                rstProjet.Fields["total_temps"].Value = rstSoum.Fields["total_temps"].Value;
                rstProjet.Fields["SansTemps"].Value = rstSoum.Fields["SansTemps"].Value;
                rstProjet.Fields["MontantForfait"].Value = rstSoum.Fields["MontantForfait"].Value;
                rstProjet.Fields["InitialeForfait"].Value = rstSoum.Fields["InitialeForfait"].Value;
                rstProjet.Fields["ProchaineCommande"].Value = 1;
                rstProjet.Update();
                while (!rstSoumPiece.EOF)
                {
                    if (rstSoumPiece.Fields["TransfertJob"].Value == true)
                    {
                        rstProjetPiece.AddNew();
                        rstProjetPiece.Fields["Type"].Value = "E";
                        rstProjetPiece.Fields["IDProjet"].Value = sNoProjet;
                        rstProjetPiece.Fields["IDSection"].Value = rstSoumPiece.Fields["IDSection"].Value;
                        rstProjetPiece.Fields["NumItem"].Value = rstSoumPiece.Fields["NumItem"].Value;
                        rstProjetPiece.Fields["Qté"].Value = rstSoumPiece.Fields["Qté"].Value;
                        rstProjetPiece.Fields["Desc_FR"].Value = rstSoumPiece.Fields["Desc_FR"].Value;
                        rstProjetPiece.Fields["Desc_EN"].Value = rstSoumPiece.Fields["Desc_EN"].Value;
                        rstProjetPiece.Fields["Manufact"].Value = rstSoumPiece.Fields["Manufact"].Value;
                        rstProjetPiece.Fields["Prix_List"].Value = rstSoumPiece.Fields["Prix_list"].Value;
                        rstProjetPiece.Fields["Escompte"].Value = rstSoumPiece.Fields["Escompte"].Value;
                        rstProjetPiece.Fields["Prix_net"].Value = rstSoumPiece.Fields["Prix_net"].Value;
                        rstProjetPiece.Fields["OrdreSection"].Value = rstSoumPiece.Fields["OrdreSection"].Value;
                        rstProjetPiece.Fields["NuméroLigne"].Value = rstSoumPiece.Fields["NuméroLigne"].Value;
                        rstProjetPiece.Fields["IDFRS"].Value = rstSoumPiece.Fields["IDFRS"].Value;
                        rstProjetPiece.Fields["Temps"].Value = rstSoumPiece.Fields["Temps"].Value;
                        rstProjetPiece.Fields["Temps_total"].Value = rstSoumPiece.Fields["Temps_Total"].Value;
                        rstProjetPiece.Fields["Prix_total"].Value = rstSoumPiece.Fields["Prix_Total"].Value;
                        rstProjetPiece.Fields["Profit_argent"].Value = rstSoumPiece.Fields["Profit_argent"].Value;
                        rstProjetPiece.Fields["SousSection"].Value = rstSoumPiece.Fields["SousSection"].Value;
                        rstProjetPiece.Fields["PrixOrigine"].Value = rstSoumPiece.Fields["PrixOrigine"].Value;
                        rstProjetPiece.Fields[".Visible"].Value = rstSoumPiece.Fields[".Visible"].Value;
                        rstProjetPiece.Fields["Commentaire"].Value = rstSoumPiece.Fields["Commentaire"].Value;
                        rstProjetPiece.Fields["Quoté"].Value = rstSoumPiece.Fields["Quoté"].Value;
                        rstProjetPiece.Fields["Devise"].Value = rstSoumPiece.Fields["Devise"].Value;
                        rstProjetPiece.Update();
                        if (!string.IsNullOrEmpty(sLiaison))
                        {
                            if (Operators.CompareString(Droite(sNoProjet, 2), "60", false) >= 0 & double.Parse(Droite(sNoProjet, 2)) <= 79d) { }
                            else
                            if (double.Parse(Droite(sNoProjet, 2)) >= 80d & double.Parse(Droite(sNoProjet, 2)) <= 98d) { }
                        }
                    }
                    rstSoumPiece.MoveNext();
                }
                m_eType = EnumType.TYPE_PROJET;
                if ((double)rstSoum.Fields["TempsInstallation"].Value > 0d | (double)rstSoum.Fields["TempsMiseService"].Value > 0d)
                {
                    CreerProjetInstallation(Gauche(sNoProjet, 7) + "51");
                }
                rstSoum.Close();
                rstSoum = default;
                rstProjet.Close();
                rstProjet = default;
                rstSoumPiece.Close();
                rstSoumPiece = default;
                rstProjetPiece.Close();
                rstProjetPiece = default;
                CalculerTotalRecordset(sNoProjet);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "TransfererSoumDansProjet", ex);
            }
        }
        private void CreerProjetInstallation(string sNoProjet)
        {
            try
            {
                ADODB.Recordset rstSoum;
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstConfig;
                int X;
                rstSoum = new Recordset();
                rstProjet = new Recordset();
                rstEmploye = new Recordset();
                rstProjSoum = new Recordset();
                rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstProjet.EOF)
                {
                    rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjSoum.EOF)
                    {
                        rstProjSoum.AddNew();
                        rstProjSoum.Fields["IDProjSoum"].Value = sNoProjet;
                        rstProjSoum.Fields["NoClient"].Value = rstSoum.Fields["IDClient"].Value;
                        rstProjSoum.Fields["Description"].Value = rstSoum.Fields["Description"].Value;
                        rstProjSoum.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                        rstProjSoum.Fields["Ouvert"].Value = true;
                        rstProjSoum.Fields["Type"].Value = "P";
                        rstProjSoum.Update();
                    }
                    rstProjSoum.Close();
                    rstProjSoum = default;
                    rstProjet.AddNew();
                    rstProjet.Fields["IDProjet"].Value = sNoProjet;
                    rstProjet.Fields["IDSoumission"].Value = string.Empty;
                    rstProjet.Fields["IDClient"].Value = rstSoum.Fields["IDClient"].Value;
                    rstProjet.Fields["IDContact"].Value = rstSoum.Fields["IDContact"].Value;
                    rstProjet.Fields["Description"].Value = rstSoum.Fields["Description"].Value;
                    rstProjet.Fields["Panneau_aire"].Value = rstSoum.Fields["Panneau_aire"].Value;
                    rstProjet.Fields["panneau_espace"].Value = rstSoum.Fields["panneau_espace"].Value;
                    rstProjet.Fields["NbreManuel"].Value = rstSoum.Fields["NbreManuel"].Value;
                    rstProjet.Fields["transport"].Value = rstSoum.Fields["transport"].Value;
                    rstProjet.Fields["csa"].Value = rstSoum.Fields["csa"].Value;
                    rstProjet.Fields["cul"].Value = rstSoum.Fields["cul"].Value;
                    rstProjet.Fields["cur"].Value = rstSoum.Fields["cur"].Value;
                    rstProjet.Fields["ul"].Value = rstSoum.Fields["ul"].Value;
                    rstProjet.Fields["ur"].Value = rstSoum.Fields["ur"].Value;
                    rstProjet.Fields["ce"].Value = rstSoum.Fields["ce"].Value;
                    rstProjet.Fields["Delais"].Value = rstSoum.Fields["Delais"].Value;
                    rstProjet.Fields["Creer"].Value = ConvertDate(DateTime.Today);
                    rstProjet.Fields["CheminPhotos"].Value = rstSoum.Fields["CheminPhotos"].Value;
                    rstEmploye.Open("SELECT noEmploye FROM Employés WHERE loginname = '" + IdLoginEmploye + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstProjet.Fields["Creer_Par"].Value = rstEmploye.Fields["noEmploye"].Value;
                    rstEmploye.Close();
                    rstEmploye = default;
                    rstProjet.Fields["TempsDessin"].Value = 0;
                    rstProjet.Fields["TempsFabrication"].Value = 0;
                    rstProjet.Fields["TempsAssemblage"].Value = 0;
                    rstProjet.Fields["TempsProgInterface"].Value = 0;
                    rstProjet.Fields["TempsProgAutomate"].Value = 0;
                    rstProjet.Fields["TempsProgRobot"].Value = 0;
                    rstProjet.Fields["TempsVision"].Value = 0;
                    rstProjet.Fields["TempsTest"].Value = 0;
                    rstProjet.Fields["TempsInstallation"].Value = rstSoum.Fields["TempsInstallation"].Value;
                    rstProjet.Fields["TempsMiseService"].Value = rstSoum.Fields["TempsMiseService"].Value;
                    rstProjet.Fields["TempsFormation"].Value = 0;
                    rstProjet.Fields["TempsGestion"].Value = 0;
                    rstProjet.Fields["TempsShipping"].Value = 0;
                    rstConfig = new Recordset();
                    if (!(rstSoum.Fields["TauxDessin"].Value is DBNull)) { rstProjet.Fields["TauxDessin"].Value = rstSoum.Fields["TauxDessin"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxDessinMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxDessin"].Value = rstConfig.Fields["TauxDessinMec"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxFabrication"].Value is DBNull)) { rstProjet.Fields["TauxFabrication"].Value = rstSoum.Fields["TauxFabrication"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxFabrication FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxFabrication"].Value = rstConfig.Fields["TauxFabrication"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxAssemblage"].Value is DBNull)) { rstProjet.Fields["TauxAssemblage"].Value = rstSoum.Fields["TauxAssemblage"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxAssemblageMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxAssemblage"].Value = rstConfig.Fields["TauxAssemblageMec"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxProgInterface"].Value is DBNull)) { rstProjet.Fields["TauxProgInterface"].Value = rstSoum.Fields["TauxProgInterface"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxProgInterface FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxProgInterface"].Value = rstConfig.Fields["TauxProgInterface"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxProgAutomate"].Value is DBNull)) { rstProjet.Fields["TauxProgAutomate"].Value = rstSoum.Fields["TauxProgAutomate"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxProgAutomate FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxProgAutomate"].Value = rstConfig.Fields["TauxProgAutomate"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxProgRobot"].Value is DBNull)) { rstProjet.Fields["TauxProgRobot"].Value = rstSoum.Fields["TauxProgRobot"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxProgRobot FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxProgRobot"].Value = rstConfig.Fields["TauxProgRobot"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxVision"].Value is DBNull)) { rstProjet.Fields["TauxVision"].Value = rstSoum.Fields["TauxVision"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxVision FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxVision"].Value = rstConfig.Fields["TauxVision"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxTest"].Value is DBNull)) { rstProjet.Fields["TauxTest"].Value = rstSoum.Fields["TauxTest"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxTestMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxTest"].Value = rstConfig.Fields["TauxTestMec"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxInstallation"].Value is DBNull)) { rstProjet.Fields["TauxInstallation"].Value = rstSoum.Fields["TauxInstallation"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxInstallationMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxInstallation"].Value = rstConfig.Fields["TauxInstallationMec"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxMiseService"].Value is DBNull)) { rstProjet.Fields["TauxMiseService"].Value = rstSoum.Fields["TauxMiseService"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxMiseService FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxMiseService"].Value = rstConfig.Fields["TauxMiseService"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxFormation"].Value is DBNull)) { rstProjet.Fields["TauxFormation"].Value = rstSoum.Fields["TauxFormation"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxFormationMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxFormation"].Value = rstConfig.Fields["TauxFormationMec"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxGestion"].Value is DBNull)) { rstProjet.Fields["TauxGestion"].Value = rstSoum.Fields["TauxGestion"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxGestionProjetsMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxGestion"].Value = rstConfig.Fields["TauxGestionProjetsMec"].Value;
                        rstConfig.Close();
                    }
                    if (!(rstSoum.Fields["TauxShipping"].Value is DBNull)) { rstProjet.Fields["TauxShipping"].Value = rstSoum.Fields["TauxShipping"].Value; }
                    else
                    {
                        rstConfig.Open("SELECT TauxShippingMec FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjet.Fields["TauxShipping"].Value = rstConfig.Fields["TauxShippingMec"].Value;
                        rstConfig.Close();
                    }
                    rstConfig = default;
                    rstProjet.Fields["PrixEmballage"].Value = 0;
                    rstProjet.Fields["imprevue"].Value = rstSoum.Fields["imprevue"].Value;
                    rstProjet.Fields["commission"].Value = rstSoum.Fields["commission"].Value;
                    rstProjet.Fields["Profit"].Value = rstSoum.Fields["Profit"].Value;
                    rstProjet.Fields["total_manuel"].Value = rstSoum.Fields["total_manuel"].Value;
                    rstProjet.Fields["total_commission"].Value = rstSoum.Fields["total_Commission"].Value;
                    rstProjet.Fields["total_profit"].Value = rstSoum.Fields["Total_Profit"].Value;
                    rstProjet.Fields["PrixTotal"].Value = rstSoum.Fields["PrixTotal"].Value;
                    rstProjet.Fields["total_piece"].Value = rstSoum.Fields["Total_piece"].Value;
                    rstProjet.Fields["total_imprevue"].Value = rstSoum.Fields["total_imprevue"].Value;
                    rstProjet.Fields["total_temps"].Value = rstSoum.Fields["total_temps"].Value;
                    rstProjet.Fields["SansTemps"].Value = rstSoum.Fields["SansTemps"].Value;
                    rstProjet.Fields["ProchaineCommande"].Value = 1;
                    rstProjet.Update();
                }
                rstSoum.Close();
                rstSoum = default;
                rstProjet.Close();
                rstProjet = default;
                CalculerTotalRecordset(sNoProjet);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CreerProjetInstallation", ex);
            }
        }
        private void cmdSortieMagasin_Click(object eventSender, EventArgs e)
        {
            try
            {
                SortieMagasin();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdSortieMagasin_Click", ex);
            }
        }
        //On calcul le temps * quantité pour la colonne montage
        private void ChangerQuantite()
        {
            try
            {
                string sQuantite;
                ListViewItem itmSoum;
                sQuantite = Interaction.InputBox("Quelle est la nouvelle quantité?");
                if (IsNumeric(sQuantite))
                {
                    itmSoum = lvwSoumission.FocusedItem;
                    itmSoum.Text = sQuantite;
                    if (!string.IsNullOrEmpty(Strings.Trim(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString())); }
                    }
                    else
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString();
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString()));
                    }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString();
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString()));
                    }
                    CalculerTempsFabrication();
                    CalculerPrix();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ChangerQuantite", ex);
            }
        }
        private void SortieMagasin()
        {
            try
            {
                Color lColor;
                string sTag;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].Tag, "EXTRA", false)))
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.Tag, "", false)))
                        {
                            if (!string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text))
                            {
                                if (lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                                {
                                    if (Conversions.ToBoolean(Operators.OrObject(Operators.ConditionalCompareObjectEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_NOIR, false), Operators.ConditionalCompareObjectEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_GRIS, false))))
                                    {
                                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_NOIR, false))) { lColor = COLOR_ORANGE; sTag = Strings.Replace(lvwSoumission.FocusedItem.Text, "*", ""); } else { lColor = COLOR_NOIR; sTag = ""; }
                                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_MANUFACT].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_MONTAGE].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TEMPS].ForeColor = lColor; lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].ForeColor = lColor;
                                        if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_FACTURATION].Text))
                                        {
                                            if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_FACTURATION) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_FACTURATION].Text = " "; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, " ")); }
                                        }
                                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_FACTURATION].Tag = sTag; lvwSoumission.Refresh(); CalculerPrixReception();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Cette commande doit être faite dans le projet " + lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROVENANCE].Text, "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "SortieMagasin", ex);
            }
        }
        private void CalculerPrixReception()
        {
            try
            {
                var dblPrixReception = default(double);
                int X;
                ListViewItem itmProjet;
                if (m_bDroitPrix == true)
                {
                    var loopTo = lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo; X++)
                    {
                        itmProjet = lvwSoumission.Items[X];
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmProjet.Tag, "", false)))
                        {
                            if (!string.IsNullOrEmpty(itmProjet.SubItems[I_COL_SOUM_PIECE].Text))
                            {
                                if (itmProjet.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & itmProjet.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                                {
                                    if (itmProjet.SubItems[I_COL_SOUM_PIECE].ForeColor != COLOR_GRIS)
                                    {
                                        if (itmProjet.SubItems[I_COL_SOUM_FACTURATION].Tag != "")
                                        {
                                            dblPrixReception = Math.Round(dblPrixReception + double.Parse(itmProjet.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace((string)itmProjet.SubItems[I_COL_SOUM_FACTURATION].Tag, "*", "")), 2);
                                        }
                                        else
                                        {
                                            dblPrixReception = Math.Round(dblPrixReception, 2);
                                        }
                                    }
                                    else
                                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(itmProjet.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_ROUGE, false)))
                                    {
                                        dblPrixReception = Math.Round(dblPrixReception - double.Parse(itmProjet.SubItems[I_COL_SOUM_PRIX_NET].Text) *
                                            double.Parse(Strings.Replace(Strings.Replace(itmProjet.Text, "-", ""), "*", "")), 2);
                                    }
                                }
                            }
                        }
                    }
                    txtPrixReception.Text = dblPrixReception.ToString();
                }
                else { txtPrixReception.Text = ""; }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerPrixReception", ex);
            }
        }
        private void PositionnerBoutons()
        {
            try
            {
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "PositionnerBoutons", ex);
            }
        }
        private void AjouterPrix()
        {
            try
            {
                ViderChamps_frs();
                RemplirComboFournisseur();
                cmbfrs.Enabled = false;
                m_bMauvaisPrix = false;
                fraPrixPiece.Top = 500;
                fraPrixPiece.Visible = true;
                fraPrixPiece.Tag = lvwSoumission.FocusedItem.Index;
                cmbfrs.Focus();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterPrix", ex);
            }
        }
        private void ModintierTexte()
        {
            try
            {
                string sTexte;
                sTexte = Interaction.InputBox("Quel est le nouveau texte?", DefaultResponse: lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text);
                if (!string.IsNullOrEmpty(sTexte))
                {
                    if (sTexte.Length > 255) { MessageBox.Show("Le texte ne pas dépasser 255 caractères!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                    else
                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DESCR) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text = sTexte; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sTexte)); }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ModintierTexte", ex);
            }
        }
        private void ModintierSousSection()
        {
            try
            {
                string sSousSection;
                string sAncienneSS;
                string sTag;
                int X;
                sSousSection = Interaction.InputBox("Quel est le nouveau nom ?", DefaultResponse: lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text);
                if (sSousSection.Length != 0)
                {
                    sAncienneSS = lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text;
                    if (string.IsNullOrEmpty(sAncienneSS)) { sAncienneSS = S_PAS_SOUS_SECTION; }
                    if (string.IsNullOrEmpty(Strings.Trim(sSousSection)))
                    {
                        sTag = S_PAS_SOUS_SECTION;
                        sSousSection = string.Empty;
                    }
                    else { sTag = sSousSection; }
                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DESCR) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text = sSousSection; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection)); }
                    var loopTo = lvwSoumission.Items.Count;
                    for (X = lvwSoumission.FocusedItem.Index + 1; X <= loopTo; X++)
                    {
                        if (lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Tag != sAncienneSS)
                        {
                            lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Tag = sTag;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ModintierSousSection", ex);
            }
        }
        private void ChangerFournisseurRetour()
        {
            try
            {
                m_bPieceInutile = true;
                m_bRecherchePiece = false;
                m_bChangementFRS = true;
                AfficherListeFournisseurs();
                if (lvwFournisseur.Items.Count == 0)
                {
                    MessageBox.Show("Il n'y a aucun fournisseur pour cette pièce!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    return;
                }
                else { fraFournisseur.Visible = true; }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ChangerFournisseurRetour", ex);
            }
        }
        private void EnleverSelection()
        {
            try
            {
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "EnleverSelection", ex);
            }
        }
        private void InitialiserNouveauxTaux()
        {
            try
            {
                ADODB.Recordset rstConfig;
                rstConfig = new Recordset();
                rstConfig.Open("SELECT TauxDessinMec, TauxFabrication, TauxAssemblageMec, TauxProgInterface, TauxProgAutomate, TauxProgRobot, TauxVision, TauxTestMec, TauxInstallationMec, TauxMiseService, TauxFormationMec, TauxGestionProjetsMec, TauxShippingMec, Hebergement1, Hebergement2, Repas, Standard, UniteMobile FROM Config", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!(rstConfig.Fields["TauxDessinMec"].Value is DBNull)) { m_sTauxDessin = rstConfig.Fields["TauxDessinMec"].Value; } else { m_sTauxDessin = "0"; }
                if (!(rstConfig.Fields["TauxFabrication"].Value is DBNull)) { m_sTauxFabrication = rstConfig.Fields["TauxFabrication"].Value; } else { m_sTauxFabrication = "0"; }
                if (!(rstConfig.Fields["TauxAssemblageMec"].Value is DBNull)) { m_sTauxAssemblage = rstConfig.Fields["TauxAssemblageMec"].Value; } else { m_sTauxAssemblage = "0"; }
                if (!(rstConfig.Fields["TauxProgInterface"].Value is DBNull)) { m_sTauxProgInterface = rstConfig.Fields["TauxProgInterface"].Value; } else { m_sTauxProgInterface = "0"; }
                if (!(rstConfig.Fields["TauxProgAutomate"].Value is DBNull)) { m_sTauxProgAutomate = rstConfig.Fields["TauxProgAutomate"].Value; } else { m_sTauxProgAutomate = "0"; }
                if (!(rstConfig.Fields["TauxProgRobot"].Value is DBNull)) { m_sTauxProgRobot = rstConfig.Fields["TauxProgRobot"].Value; } else { m_sTauxProgRobot = "0"; }
                if (!(rstConfig.Fields["TauxVision"].Value is DBNull)) { m_sTauxVision = rstConfig.Fields["TauxVision"].Value; } else { m_sTauxVision = "0"; }
                if (!(rstConfig.Fields["TauxTestMec"].Value is DBNull)) { m_sTauxTest = rstConfig.Fields["TauxTestMec"].Value; } else { m_sTauxTest = "0"; }
                if (!(rstConfig.Fields["TauxInstallationMec"].Value is DBNull)) { m_sTauxInstallation = rstConfig.Fields["TauxInstallationMec"].Value; } else { m_sTauxInstallation = "0"; }
                if (!(rstConfig.Fields["TauxMiseService"].Value is DBNull)) { m_sTauxMiseService = rstConfig.Fields["TauxMiseService"].Value; } else { m_sTauxMiseService = "0"; }
                if (!(rstConfig.Fields["TauxFormationMec"].Value is DBNull)) { m_sTauxFormation = rstConfig.Fields["TauxFormationMec"].Value; } else { m_sTauxFormation = "0"; }
                if (!(rstConfig.Fields["TauxGestionProjetsMec"].Value is DBNull)) { m_sTauxGestion = rstConfig.Fields["TauxGestionProjetsMec"].Value; } else { m_sTauxGestion = "0"; }
                if (!(rstConfig.Fields["TauxShippingMec"].Value is DBNull)) { m_sTauxShipping = rstConfig.Fields["TauxShippingMec"].Value; } else { m_sTauxShipping = "0"; }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    m_sTauxHebergement1 = "0";
                    m_sTauxHebergement2 = "0";
                    m_sTauxRepas = "0";
                    m_sTauxTransport = "0";
                    m_sTauxUniteMobile = "0";
                }
                else
                {
                    m_sTauxHebergement1 = rstConfig.Fields["Hebergement1"].Value;
                    m_sTauxHebergement2 = rstConfig.Fields["Hebergement2"].Value;
                    m_sTauxRepas = rstConfig.Fields["Repas"].Value;
                    m_sTauxTransport = rstConfig.Fields["Standard"].Value;
                    m_sTauxUniteMobile = rstConfig.Fields["UniteMobile"].Value;
                }
                rstConfig.Close();
                rstConfig = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "InitialiserNouveauxTaux", ex);
            }
        }
        private void RemplirListViewModifications()
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstCreation;
                string sChamps;
                string sTable;
                string sTableCreer;
                ListViewItem itmModint;
                rstProjSoum = new Recordset();
                rstEmploye = new Recordset();
                rstCreation = new Recordset();
                lvwHistorique.Items.Clear();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sChamps = "IDProjet";
                    sTable = "Projet_Modint";
                    sTableCreer = "ProjetMec";
                }
                else
                {
                    sChamps = "IDSoumission";
                    sTable = "Soumission_Modint";
                    sTableCreer = "SoumissionMec";
                }
                rstCreation.Open("SELECT creer, creer_par FROM " + sTableCreer + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                itmModint = lvwHistorique.Items.Add(string.Empty);
                itmModint.Text = "Création";
                itmModint = lvwHistorique.Items.Add(string.Empty);
                rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstCreation.Fields["creer_par"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                itmModint.Text = rstEmploye.Fields["Employe"].Value;
                rstEmploye.Close();
                if (itmModint.SubItems.Count > I_COL_MODIF_DATE) { itmModint.SubItems[I_COL_MODIF_DATE].Text = rstCreation.Fields["creer"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstCreation.Fields["creer"].Value)); }
                if (itmModint.SubItems.Count > I_COL_MODIF_HEURE) { itmModint.SubItems[I_COL_MODIF_HEURE].Text = string.Empty; } else { itmModint.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                rstCreation.Close();
                rstCreation = default;
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModint = 'Modification' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModint = lvwHistorique.Items.Add(string.Empty);
                    itmModint.Text = "Modifications";
                    while (!rstProjSoum.EOF)
                    {
                        itmModint = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModint.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModint.SubItems.Count > I_COL_MODIF_DATE) { itmModint.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value)); }
                        if (itmModint.SubItems.Count > I_COL_MODIF_HEURE) { itmModint.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value)); }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM "+ sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModint = 'RECEPTION' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModint = lvwHistorique.Items.Add(string.Empty);
                    itmModint.Text = "Réception";
                    while (!rstProjSoum.EOF)
                    {
                        itmModint = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModint.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModint.SubItems.Count > I_COL_MODIF_DATE) { itmModint.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value)); }
                        if (itmModint.SubItems.Count > I_COL_MODIF_HEURE) { itmModint.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value)); }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModint = 'RETOUR' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModint = lvwHistorique.Items.Add(string.Empty);
                    itmModint.Text = "Retour de marchandise";
                    while (!rstProjSoum.EOF)
                    {
                        itmModint = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModint.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModint.SubItems.Count > I_COL_MODIF_DATE) { itmModint.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value)); }
                        if (itmModint.SubItems.Count > I_COL_MODIF_HEURE) { itmModint.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value)); }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModint = 'FACTURATION' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModint = lvwHistorique.Items.Add(string.Empty);
                    itmModint.Text = "Facturation";
                    while (!rstProjSoum.EOF)
                    {
                        itmModint = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModint.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModint.SubItems.Count > I_COL_MODIF_DATE) { itmModint.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value)); }
                        if (itmModint.SubItems.Count > I_COL_MODIF_HEURE) { itmModint.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value)); }
                        if (itmModint.SubItems.Count > I_COL_MODIF_MONTANT) { itmModint.SubItems[I_COL_MODIF_MONTANT].Text = rstProjSoum.Fields["Valeur"].Value; } else { itmModint.SubItems.Insert(I_COL_MODIF_MONTANT, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Valeur"].Value)); }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                rstEmploye = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListViewModifications", ex);
            }
        }
        private void RemplirListViewSuppression()
        {
            try
            {
                ADODB.Recordset rstBavard;
                ADODB.Recordset rstEmploye;
                ListViewItem itmBavard;
                lvwBavard.Items.Clear();
                rstBavard = new Recordset();
                rstEmploye = new Recordset();
                rstBavard.Open("SELECT * FROM BavardSuppression WHERE NoProjSoum = '" + txtNoProjSoum.Text + "' AND Type = 'E' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstBavard.EOF)
                {
                    itmBavard = lvwBavard.Items.Add(string.Empty);
                    rstEmploye.Open("SELECT Employe FROM Employés WHERE NoEmploye = " + rstBavard.Fields["IDUser"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    itmBavard.Text = rstEmploye.Fields["Employe"].Value;
                    rstEmploye.Close();
                    if (itmBavard.SubItems.Count > I_COL_SUPP_DATE) { itmBavard.SubItems[I_COL_SUPP_DATE].Text = rstBavard.Fields["Date"].Value; } else { itmBavard.SubItems.Insert(I_COL_SUPP_DATE, new ListViewItem.ListViewSubItem(null, rstBavard.Fields["Date"].Value)); }
                    if (itmBavard.SubItems.Count > I_COL_SUPP_HEURE) { itmBavard.SubItems[I_COL_SUPP_HEURE].Text = rstBavard.Fields["Heure"].Value; } else { itmBavard.SubItems.Insert(I_COL_SUPP_HEURE, new ListViewItem.ListViewSubItem(null, rstBavard.Fields["Heure"].Value)); }
                    if (itmBavard.SubItems.Count > I_COL_SUPP_QTE) { itmBavard.SubItems[I_COL_SUPP_QTE].Text = rstBavard.Fields["Qté"].Value; } else { itmBavard.SubItems.Insert(I_COL_SUPP_QTE, new ListViewItem.ListViewSubItem(null, rstBavard.Fields["Qté"].Value)); }
                    if (itmBavard.SubItems.Count > I_COL_SUPP_NO_ITEM) { itmBavard.SubItems[I_COL_SUPP_NO_ITEM].Text = rstBavard.Fields["No Item"].Value; } else { itmBavard.SubItems.Insert(I_COL_SUPP_NO_ITEM, new ListViewItem.ListViewSubItem(null, rstBavard.Fields["No Item"].Value)); }
                    rstBavard.MoveNext();
                }
                rstBavard.Close();
                rstBavard = default;
                rstEmploye = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListViewSuppression", ex);
            }
        }
        private bool VerintierProjet(string sNoProjet)
        {
            bool VerintierProjetRet = default;
            try
            {
                ADODB.Recordset rstProjet;
                bool bExiste;
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF) { bExiste = true; } else { bExiste = false; }
                rstProjet.Close();
                rstProjet = default;
                VerintierProjetRet = bExiste;
                return VerintierProjetRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerintierProjet", ex);
                return false;
            }
        }
        private void RemplirSoumissionProjet(string sNoSoumission, string sNoProjet)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstConfig;
                bool bVariables;
                bool bTauxHoraire;
                bool bPrixPieces;
                rstProjSoum = new Recordset();
                rstConfig = new Recordset();
                if (MessageBox.Show("Voulez-vous mettre à jour les variables systèmes?\n-  % Profit\n-  % Commission\n-  % Imprévu\n-  $ Pages manuel", "Projet soumission", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { bVariables = true; } else { bVariables = false; }
                if (MessageBox.Show("Voulez-vous mettre à jour les taux horaires?", "Projet soumission", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    bTauxHoraire = true;
                }
                else { bTauxHoraire = false; }
                if (MessageBox.Show("Voulez-vous mettre à jour le prix des pièces?", "Projet soumission", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { bPrixPieces = true; } else { bPrixPieces = false; }
                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                m_bSansTemps = rstProjSoum.Fields["SansTemps"].Value;
                if (!(rstProjSoum.Fields["TempsDessin"].Value is DBNull)) { m_sTempsDessin = rstProjSoum.Fields["TempsDessin"].Value; } else { m_sTempsDessin = "0"; }
                if (!(rstProjSoum.Fields["TempsFabrication"].Value is DBNull)) { m_sTempsFabrication = rstProjSoum.Fields["TempsFabrication"].Value; } else { m_sTempsFabrication = "0"; }
                if (!(rstProjSoum.Fields["TempsAssemblage"].Value is DBNull)) { m_sTempsAssemblage = rstProjSoum.Fields["TempsAssemblage"].Value; } else { m_sTempsAssemblage = "0"; }
                if (!(rstProjSoum.Fields["TempsProgInterface"].Value is DBNull)) { m_sTempsProgInterface = rstProjSoum.Fields["TempsProgInterface"].Value; } else { m_sTempsProgInterface = "0"; }
                if (!(rstProjSoum.Fields["TempsProgAutomate"].Value is DBNull)) { m_sTempsProgAutomate = rstProjSoum.Fields["TempsProgAutomate"].Value; } else { m_sTempsProgAutomate = "0"; }
                if (!(rstProjSoum.Fields["TempsProgRobot"].Value is DBNull)) { m_sTempsProgRobot = rstProjSoum.Fields["TempsProgRobot"].Value; } else { m_sTempsProgRobot = "0"; }
                if (!(rstProjSoum.Fields["TempsVision"].Value is DBNull)) { m_sTempsVision = rstProjSoum.Fields["TempsVision"].Value; } else { m_sTempsVision = "0"; }
                if (!(rstProjSoum.Fields["TempsTest"].Value is DBNull)) { m_sTempsTest = rstProjSoum.Fields["TempsTest"].Value; } else { m_sTempsTest = "0"; }
                if (!(rstProjSoum.Fields["TempsInstallation"].Value is DBNull)) { m_sTempsInstallation = rstProjSoum.Fields["TempsInstallation"].Value; } else { m_sTempsInstallation = "0"; }
                if (!(rstProjSoum.Fields["TempsMiseService"].Value is DBNull)) { m_sTempsMiseService = rstProjSoum.Fields["TempsMiseService"].Value; } else { m_sTempsMiseService = "0"; }
                if (!(rstProjSoum.Fields["TempsFormation"].Value is DBNull)) { m_sTempsFormation = rstProjSoum.Fields["TempsFormation"].Value; } else { m_sTempsFormation = "0"; }
                if (!(rstProjSoum.Fields["TempsGestion"].Value is DBNull)) { m_sTempsGestion = rstProjSoum.Fields["TempsGestion"].Value; } else { m_sTempsGestion = "0"; }
                if (!(rstProjSoum.Fields["TempsShipping"].Value is DBNull)) { m_sTempsShipping = rstProjSoum.Fields["TempsShipping"].Value; } else { m_sTempsShipping = "0"; }
                rstConfig.Open("SELECT * FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                if (bTauxHoraire == true)
                {
                    if (!(rstConfig.Fields["TauxDessinMec"].Value is DBNull)) { m_sTauxDessin = rstConfig.Fields["TauxDessinMec"].Value; } else { m_sTauxDessin = "0"; }
                    if (!(rstConfig.Fields["TauxFabrication"].Value is DBNull)) { m_sTauxFabrication = rstConfig.Fields["TauxFabrication"].Value; } else { m_sTauxFabrication = "0"; }
                    if (!(rstConfig.Fields["TauxAssemblageMec"].Value is DBNull)) { m_sTauxAssemblage = rstConfig.Fields["TauxAssemblageMec"].Value; } else { m_sTauxAssemblage = "0"; }
                    if (!(rstConfig.Fields["TauxProgInterface"].Value is DBNull)) { m_sTauxProgInterface = rstConfig.Fields["TauxProgInterface"].Value; } else { m_sTauxProgInterface = "0"; }
                    if (!(rstConfig.Fields["TauxProgAutomate"].Value is DBNull)) { m_sTauxProgAutomate = rstConfig.Fields["TauxProgAutomate"].Value; } else { m_sTauxProgAutomate = "0"; }
                    if (!(rstConfig.Fields["TauxProgRobot"].Value is DBNull)) { m_sTauxProgRobot = rstConfig.Fields["TauxProgRobot"].Value; } else { m_sTauxProgRobot = "0"; }
                    if (!(rstConfig.Fields["TauxVision"].Value is DBNull)) { m_sTauxVision = rstConfig.Fields["TauxVision"].Value; } else { m_sTauxVision = "0"; }
                    if (!(rstConfig.Fields["TauxTestMec"].Value is DBNull)) { m_sTauxTest = rstConfig.Fields["TauxTestMec"].Value; } else { m_sTauxTest = "0"; }
                    if (!(rstConfig.Fields["TauxInstallationMec"].Value is DBNull)) { m_sTauxInstallation = rstConfig.Fields["TauxInstallationMec"].Value; } else { m_sTauxInstallation = "0"; }
                    if (!(rstConfig.Fields["TauxMiseService"].Value is DBNull)) { m_sTauxMiseService = rstConfig.Fields["TauxMiseService"].Value; } else { m_sTauxMiseService = "0"; }
                    if (!(rstConfig.Fields["TauxFormationMec"].Value is DBNull)) { m_sTauxFormation = rstConfig.Fields["TauxFormationMec"].Value; } else { m_sTauxFormation = "0"; }
                    if (!(rstConfig.Fields["TauxGestionProjetsMec"].Value is DBNull)) { m_sTauxGestion = rstConfig.Fields["TauxGestionProjetsMec"].Value; } else { m_sTauxGestion = "0"; }
                    if (!(rstConfig.Fields["TauxShippingMec"].Value is DBNull)) { m_sTauxShipping = rstConfig.Fields["TauxShippingMec"].Value; } else { m_sTauxShipping = "0"; }
                }
                else
                {
                    if (!(rstProjSoum.Fields["TauxDessin"].Value is DBNull)) { m_sTauxDessin = rstProjSoum.Fields["TauxDessin"].Value; } else { m_sTauxDessin = "0"; }
                    if (!(rstProjSoum.Fields["TauxFabrication"].Value is DBNull)) { m_sTauxFabrication = rstProjSoum.Fields["TauxFabrication"].Value; } else { m_sTauxFabrication = "0"; }
                    if (!(rstProjSoum.Fields["TauxAssemblage"].Value is DBNull)) { m_sTauxAssemblage = rstProjSoum.Fields["TauxAssemblage"].Value; } else { m_sTauxAssemblage = "0"; }
                    if (!(rstProjSoum.Fields["TauxProgInterface"].Value is DBNull)) { m_sTauxProgInterface = rstProjSoum.Fields["TauxProgInterface"].Value; } else { m_sTauxProgInterface = "0"; }
                    if (!(rstProjSoum.Fields["TauxProgAutomate"].Value is DBNull)) { m_sTauxProgAutomate = rstProjSoum.Fields["TauxProgAutomate"].Value; } else { m_sTauxProgAutomate = "0"; }
                    if (!(rstProjSoum.Fields["TauxProgRobot"].Value is DBNull)) { m_sTauxProgRobot = rstProjSoum.Fields["TauxProgRobot"].Value; } else { m_sTauxProgRobot = "0"; }
                    if (!(rstProjSoum.Fields["TauxVision"].Value is DBNull)) { m_sTauxVision = rstProjSoum.Fields["TauxVision"].Value; } else { m_sTauxVision = "0"; }
                    if (!(rstProjSoum.Fields["TauxTest"].Value is DBNull)) { m_sTauxTest = rstProjSoum.Fields["TauxTest"].Value; } else { m_sTauxTest = "0"; }
                    if (!(rstProjSoum.Fields["TauxInstallation"].Value is DBNull)) { m_sTauxInstallation = rstProjSoum.Fields["TauxInstallation"].Value; } else { m_sTauxInstallation = "0"; }
                    if (!(rstProjSoum.Fields["TauxMiseService"].Value is DBNull)) { m_sTauxMiseService = rstProjSoum.Fields["TauxMiseService"].Value; } else { m_sTauxMiseService = "0"; }
                    if (!(rstProjSoum.Fields["TauxFormation"].Value is DBNull)) { m_sTauxFormation = rstProjSoum.Fields["TauxFormation"].Value; } else { m_sTauxFormation = "0"; }
                    if (!(rstProjSoum.Fields["TauxGestion"].Value is DBNull)) { m_sTauxGestion = rstProjSoum.Fields["TauxGestion"].Value; } else { m_sTauxGestion = "0"; }
                    if (!(rstProjSoum.Fields["TauxShipping"].Value is DBNull)) { m_sTauxShipping = rstProjSoum.Fields["TauxShipping"].Value; } else { m_sTauxShipping = "0"; }
                }
                if (bVariables == true)
                {
                    m_sProfit = rstConfig.Fields["ProfitMec"].Value;
                    m_sCommission = rstConfig.Fields["Commission"].Value;
                    m_sImprevue = rstConfig.Fields["Imprévus"].Value;
                }
                else
                {
                    m_sProfit = rstProjSoum.Fields["Profit"].Value;
                    m_sCommission = rstProjSoum.Fields["Commission"].Value;
                    m_sImprevue = rstProjSoum.Fields["Imprevue"].Value;
                }
                rstConfig.Close();
                rstConfig = default;
                txtProjet.Text = rstProjSoum.Fields["Description"].Value;
                txtNbreManuel.Text = rstProjSoum.Fields["NbreManuel"].Value;
                txtPrixManuel.Text = rstProjSoum.Fields["total_manuel"].Value;
                txtTransport.Text = rstProjSoum.Fields["transport"].Value;
                if (!(rstProjSoum.Fields["CheminPhotos"].Value is DBNull))
                {
                    txtCheminPhotos.Text = rstProjSoum.Fields["CheminPhotos"].Value;
                }
                else
                {
                    txtCheminPhotos.Text = string.Empty;
                }
                chkCSA.Checked = (bool)rstProjSoum.Fields["CSA"].Value;
                chkCUL.Checked = (bool)rstProjSoum.Fields["CUL"].Value;
                chkUL.Checked = (bool)rstProjSoum.Fields["UL"].Value;
                chkCUR.Checked = (bool)rstProjSoum.Fields["CUR"].Value;
                chkUR.Checked = (bool)rstProjSoum.Fields["UR"].Value;
                chkCE.Checked = (bool)rstProjSoum.Fields["CE"].Value;
                txtPrixTotal.Text = rstProjSoum.Fields["PrixTotal"].Value;
                txtProfit.Text = rstProjSoum.Fields["total_profit"].Value;
                if (!(rstProjSoum.Fields["Delais"].Value is DBNull)) { txtDelais.Text = rstProjSoum.Fields["Delais"].Value; } else { txtDelais.Text = "0"; }
                txtCommission.Text = rstProjSoum.Fields["total_commission"].Value;
                if (!(rstProjSoum.Fields["MontantForfait"].Value is DBNull))
                {
                    txtForfait.Text = rstProjSoum.Fields["MontantForfait"].Value;
                    if (!(rstProjSoum.Fields["InitialeForfait"].Value is DBNull)) { lblForfaitInitiale.Text = rstProjSoum.Fields["InitialeForfait"].Value; } else { lblForfaitInitiale.Text = ""; }
                }
                else
                {
                    txtForfait.Text = "";
                    lblForfaitInitiale.Text = "";
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                RemplirListViewSoumissionProjet(sNoProjet);
                if (bPrixPieces == true) { UpdatePieces(); }
                m_bModeAffichage = false;
                CalculerPrix();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirProjSoum", ex);
            }
        }
        private void RechercherProjSoum(string sNoProjSoum)
        {
            try
            {
                int X;
                var loopTo = cmbProjSoum.Items.Count - 1;
                for (X = 0; X <= loopTo; X++)
                {
                    if ((cmbProjSoum.Items[X].ToString() ?? "") == (sNoProjSoum ?? ""))
                    {
                        cmbProjSoum.SelectedIndex = X;
                        break;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RechercherProjSoum", ex);
            }
        }
        private void RemplirProjSoum()
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstSoum;
                ADODB.Recordset rstClient;
                ADODB.Recordset rstContact;
                rstProjSoum = new Recordset();
                rstSoum = new Recordset();
                rstClient = new Recordset();
                rstContact = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!(rstProjSoum.Fields["IDSoumission"].Value is DBNull)) { txtNoSoumission.Text = rstProjSoum.Fields["IDSoumission"].Value; } else { txtNoSoumission.Text = string.Empty; }
                    if (Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "60", false) >= 0 & Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "98", false) <= 0)
                    {
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["LiaisonChargeable"].Value)))
                        {
                            m_sLiaison = rstProjSoum.Fields["LiaisonChargeable"].Value;
                        }
                        else
                        {
                            m_sLiaison = string.Empty; while (string.IsNullOrEmpty(Strings.Trim(m_sLiaison)))
                                m_sLiaison = Interaction.InputBox("Quelle est l'extention au projet " + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + " auquel ce projet sera lié?"); rstProjSoum.Fields["LiaisonChargeable"].Value = m_sLiaison; rstProjSoum.Update();
                        }
                    }
                }
                else
                {
                    rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                m_bSansTemps = rstProjSoum.Fields["SansTemps"].Value;
                rstClient.Open("SELECT NomClient, IDClient FROM Client WHERE IDClient = " + rstProjSoum.Fields["IDClient"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstContact.Open("SELECT NomContact, IDContact FROM Contact WHERE IDContact = " + rstProjSoum.Fields["IDContact"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                txtClient.Text = rstClient.Fields["NomClient"].Value;
                txtContact.Text = rstContact.Fields["NomContact"].Value;
                rstClient.Close();
                rstClient = default;
                rstContact.Close();
                rstContact = default;
                txtProjet.Text = rstProjSoum.Fields["Description"].Value;
                txtNbreManuel.Text = rstProjSoum.Fields["NbreManuel"].Value;
                txtPrixManuel.Text = rstProjSoum.Fields["total_manuel"].Value;
                txtTransport.Text = rstProjSoum.Fields["transport"].Value;
                txtTotalPieces.Text = rstProjSoum.Fields["Total_Piece"].Value;
                txtTotalTemps.Text = rstProjSoum.Fields["Total_Temps"].Value;
                txtPrixTotal.Text = rstProjSoum.Fields["PrixTotal"].Value;
                txtImprevus.Text = rstProjSoum.Fields["Total_Imprevue"].Value;
                txtProfit.Text = rstProjSoum.Fields["total_profit"].Value;
                txtCommission.Text = rstProjSoum.Fields["total_commission"].Value;
                if (!(rstProjSoum.Fields["CheminPhotos"].Value is DBNull))
                {
                    txtCheminPhotos.Text = rstProjSoum.Fields["CheminPhotos"].Value;
                }
                else
                {
                    txtCheminPhotos.Text = string.Empty;
                }
                chkCSA.Checked = (bool)rstProjSoum.Fields["CSA"].Value;
                chkCUL.Checked = (bool)rstProjSoum.Fields["CUL"].Value;
                chkUL.Checked = (bool)rstProjSoum.Fields["UL"].Value;
                chkCUR.Checked = (bool)rstProjSoum.Fields["CUR"].Value;
                chkUR.Checked = (bool)rstProjSoum.Fields["UR"].Value;
                chkCE.Checked = (bool)rstProjSoum.Fields["CE"].Value;
                if (!(rstProjSoum.Fields["Delais"].Value is DBNull)) { txtDelais.Text = Strings.Trim(rstProjSoum.Fields["Delais"].Value); } else { txtDelais.Text = ""; }
                if (!(rstProjSoum.Fields["MontantForfait"].Value is DBNull))
                {
                    txtForfait.Text = rstProjSoum.Fields["MontantForfait"].Value;
                    if (!(rstProjSoum.Fields["InitialeForfait"].Value is DBNull))
                    {
                        lblForfaitInitiale.Text = rstProjSoum.Fields["InitialeForfait"].Value;
                    }
                    else { lblForfaitInitiale.Text = ""; }
                }
                else
                {
                    txtForfait.Text = "";
                    lblForfaitInitiale.Text = "";
                }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    if (!(rstProjSoum.Fields["PrixRéception"].Value is DBNull))
                    {
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["PrixRéception"].Value))) { txtPrixReception.Text = rstProjSoum.Fields["PrixRéception"].Value; } else { txtPrixReception.Text = "0$"; }
                    }
                    else
                    { txtPrixReception.Text = "0$"; }
                    if (!(rstProjSoum.Fields["IDSoumission"].Value is DBNull))
                    {
                        rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + rstProjSoum.Fields["IDSoumission"].Value + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstSoum.EOF)
                        {
                            if (!(rstSoum.Fields["PrixTotal"].Value is DBNull))
                            {
                                if (!string.IsNullOrEmpty(Strings.Trim(rstSoum.Fields["PrixTotal"].Value)))
                                {
                                    txtPrixSoumission.Text = rstSoum.Fields["PrixTotal"].Value;
                                }
                                else
                                {
                                    txtPrixSoumission.Text = 0.ToString() + "$";
                                }
                            }
                            else
                            {
                                txtPrixSoumission.Text = 0.ToString() + "$";
                            }
                        }
                        else
                        {
                            txtPrixSoumission.Text = 0.ToString() + "$";
                        }
                        rstSoum.Close();
                        rstSoum = default;
                    }
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                RemplirListViewProjSoum(txtNoProjSoum.Text);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirProjSoum", ex);
            }
        }
        //Cette méthode crée un recordset contenant les categorie
        //le nom de toutes les tables de la BD
        private void RemplirComboCategoriesPieces()
        {
            try
            {
                ADODB.Recordset rstCatalogueMec;
                cmbPieces.Items.Clear();
                rstCatalogueMec = new Recordset();
                rstCatalogueMec.Open("SELECT DISTINCT CATEGORIE FROM CatalogueMec ORDER BY CATEGORIE", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstCatalogueMec.EOF)
                {
                    cmbPieces.Items.Add(rstCatalogueMec.Fields["CATEGORIE"].Value);
                    rstCatalogueMec.MoveNext();
                }
                rstCatalogueMec.Close();
                rstCatalogueMec = default;
                if (cmbPieces.Items.Count > 0) { cmbPieces.SelectedIndex = 0; }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirComboCategoriesPieces", ex);
            }
        }
        private void RemplirComboClients(string sRecherche)
        {
            try
            {
                ADODB.Recordset rstClient;
                cmbClient.Items.Clear();
                rstClient = new Recordset();
                rstClient.Open("SELECT NomClient, IDClient FROM Client WHERE NomClient like '%" + sRecherche.Replace("'", "''") + "%' AND Supprimé = 0", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstClient.EOF)
                {
                    cmbClient.Items.Add($"{rstClient.Fields["NomClient"].Value} - {rstClient.Fields["IDClient"].Value}");
                    rstClient.MoveNext();
                }
                rstClient.Close();
                rstClient = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirComboClients", ex);
            }
        }
        private void RemplirComboContacts()
        {
            try
            {
                ADODB.Recordset rstContact;
                cmbContact.Items.Clear();
                if (cmbClient.SelectedIndex > -1)
                {
                    rstContact = new Recordset();
                    rstContact.Open("SELECT NomContact, IDContact FROM Contact " +
                        "INNER JOIN ContactClient ON Contact.IDContact = ContactClient.NoContact " +
                        "WHERE ContactClient.nomClient = " + cmbClient.Items[cmbClient.SelectedIndex].ToString(), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstContact.EOF)
                    {
                        rstContact.Close();
                        rstContact.Open("SELECT NomContact, IDContact FROM Contact WHERE Supprimé = 0", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    while (!rstContact.EOF)
                    {
                        cmbContact.Items.Add($"{rstContact.Fields["NomContact"].Value} - {rstContact.Fields["IDContact"].Value}");
                        rstContact.MoveNext();
                    }
                    rstContact.Close();
                    rstContact = default;
                    if (cmbContact.Items.Count > 0) { cmbContact.SelectedIndex = 0; }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirComboContacts", ex);
            }
        }
        private void RemplirComboSections()
        {
            try
            {
                ADODB.Recordset rstSection;
                string sChamps;
                cmbSections.Items.Clear();
                rstSection = new Recordset();
                rstSection.Open("SELECT * FROM SoumProjSectionMec ORDER BY Ordre", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (m_eLangage == EnumLangage.ANGLAIS) { sChamps = "NomSectionEN"; } else { sChamps = "NomSectionFR"; } while (!rstSection.EOF)
                {
                    if (!(rstSection.Fields[sChamps].Value is DBNull))
                    {
                        cmbSections.Items.Add(rstSection.Fields[sChamps].Value);
                    }
                    else { cmbSections.Items.Add(string.Empty); }
                    cmbSections.Tag = (int)rstSection.Fields["IDSection"].Value;
                    rstSection.MoveNext();
                }
                rstSection.Close();
                rstSection = default;
                if (cmbSections.Items.Count > 0) { cmbSections.SelectedIndex = 0; }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirComboSections", ex);
            }
        }
        private void ImprimerProjSoum(ADODB.Recordset rstProjSoum)
        {
            ADODB.Recordset rstPiece;
            ADODB.Recordset rstPrixSoum;
            ADODB.Recordset rstTemp;
            ADODB.Recordset rstImpProjSoum;
            ADODB.Recordset rstSoum;
            string sOrdreSection;
            int XSoum;
            var sSousSection = default(string);
            string sSousSectionRS;
            double dblTempsDessin;
            double dblTempsFabrication;
            double dblTempsAssemblage;
            double dblTempsProgInterface;
            double dblTempsProgAutomate;
            double dblTempsProgRobot;
            double dblTempsVision;
            double dblTempsTest;
            double dblTempsInstallation;
            double dblTempsMiseService;
            double dblTempsFormation;
            double dblTempsGestion;
            double dblTempsShipping;
            double dblTotalTemps;
            double dblTotalAutre;
            double dblTotalReste;
            var dblTotalHebergement = default(double);
            var dblTotalRepas = default(double);
            double dblTotalTransport;
            double dblTotalUniteMobile;
            string sChampsSection;
            string sNoProjet;
            string sNoSoumission;
            double dblPrixEmballage;
            UpdateSQL("DELETE FROM impression_soumission");
            XSoum = 1;
            Cursor.Current = Cursors.WaitCursor;
            try
            {
                rstImpProjSoum = new Recordset();
                rstImpProjSoum.Open("SELECT * FROM impression_soumission", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                sOrdreSection = string.Empty;
                rstPiece = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sNoProjet = rstProjSoum.Fields["IDProjet"].Value;
                    if (!(rstProjSoum.Fields["IDSoumission"].Value is DBNull)) { sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value; } else { sNoSoumission = string.Empty; }
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' And Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    sNoProjet = string.Empty;
                    sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value;
                    rstPiece.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoSoumission + "' And Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                rstTemp = new Recordset();
                while (!rstPiece.EOF)
                {
                    sSousSectionRS = rstPiece.Fields["SousSection"].Value;
                    if ((sSousSectionRS ?? "") == S_PAS_SOUS_SECTION) { sSousSectionRS = " "; }
                    if (sOrdreSection != rstPiece.Fields["OrdreSection"].Value)
                    {
                        sOrdreSection = rstPiece.Fields["OrdreSection"].Value;
                        if (m_eLangage == EnumLangage.ANGLAIS) { sChampsSection = "NomSectionEN"; } else { sChampsSection = "NomSectionFR"; }
                        rstTemp.Open("SELECT " + sChampsSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstPiece.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        rstImpProjSoum.AddNew();
                        rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                        if (m_eType == EnumType.TYPE_PROJET) { rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet; } else { rstImpProjSoum.Fields["IDSoumission"].Value = sNoSoumission; }
                        if (!(rstTemp.Fields[sChampsSection].Value is DBNull)) { rstImpProjSoum.Fields["NomSection"].Value = rstTemp.Fields[sChampsSection].Value; } else { rstImpProjSoum.Fields["NomSection"].Value = " "; }
                        rstImpProjSoum.Update();
                        XSoum++;
                        rstTemp.Close();
                        sSousSection = rstPiece.Fields["SousSection"].Value;
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION | string.IsNullOrEmpty(sSousSection)) { sSousSection = " "; }
                        rstImpProjSoum.AddNew();
                        rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                        if (m_eType == EnumType.TYPE_PROJET) { rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet; } else { rstImpProjSoum.Fields["IDSoumission"].Value = sNoSoumission; }
                        rstImpProjSoum.Fields["SousSection"].Value = sSousSection;
                        rstImpProjSoum.Update();
                        XSoum++;
                    }
                    else
                    if ((sSousSection ?? "") != (sSousSectionRS ?? ""))
                    {
                        sSousSection = sSousSectionRS;
                        rstImpProjSoum.AddNew();
                        rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                        if (m_eType == EnumType.TYPE_PROJET) { rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet; } else { rstImpProjSoum.Fields["IDSoumission"].Value = sNoSoumission; }
                        rstImpProjSoum.Fields["SousSection"].Value = sSousSectionRS;
                        rstImpProjSoum.Update();
                        XSoum++;
                    }
                    rstImpProjSoum.AddNew();
                    rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                    if (m_eType == EnumType.TYPE_PROJET) { rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet; } else { rstImpProjSoum.Fields["IDSoumission"].Value = sNoSoumission; }
                    rstImpProjSoum.Fields["NumItem"].Value = rstPiece.Fields["NumItem"].Value;
                    rstImpProjSoum.Fields["Qté"].Value = rstPiece.Fields["Qté"].Value;
                    if (m_eLangage == EnumLangage.ANGLAIS) { rstImpProjSoum.Fields["Description"].Value = rstPiece.Fields["DESC_EN"].Value; } else { rstImpProjSoum.Fields["Description"].Value = rstPiece.Fields["DESC_FR"].Value; }
                    rstImpProjSoum.Fields["MANUFACT"].Value = rstPiece.Fields["MANUFACT"].Value;
                    rstImpProjSoum.Fields["PRIX_NET"].Value = rstPiece.Fields["PRIX_NET"].Value;
                    rstTemp.Open("SELECT NomFournisseur FROM Fournisseur WHERE IDFRS = " + rstPiece.Fields["IDFRS"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!rstTemp.EOF) { rstImpProjSoum.Fields["NomFournisseur"].Value = rstTemp.Fields["NomFournisseur"].Value; }
                    rstTemp.Close();
                    rstImpProjSoum.Fields["PRIX_TOTAL"].Value = rstPiece.Fields["PRIX_TOTAL"].Value;
                    rstImpProjSoum.Fields["PROFIT_ARGENT"].Value = rstPiece.Fields["PROFIT_ARGENT"].Value;
                    rstImpProjSoum.Fields["NoSéquentiel"].Value = rstPiece.Fields["NoSéquentiel"].Value;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (!string.IsNullOrEmpty(Strings.Trim(rstPiece.Fields["DateRéception"].Value))) { rstImpProjSoum.Fields["DateReception"].Value = rstPiece.Fields["DateRéception"].Value; } else { rstImpProjSoum.Fields["DateReception"].Value = ""; }
                        if (!string.IsNullOrEmpty(Strings.Trim(rstPiece.Fields["DateCommande"].Value))) { rstImpProjSoum.Fields["DateCommande"].Value = rstPiece.Fields["DateCommande"].Value; } else { rstImpProjSoum.Fields["DateCommande"].Value = ""; }
                    }
                    else
                    {
                        rstImpProjSoum.Fields["DateReception"].Value = "";
                        rstImpProjSoum.Fields["DateCommande"].Value = "";
                    }
                    rstImpProjSoum.Update();
                    XSoum++;
                    rstPiece.MoveNext();
                }
                rstImpProjSoum.Close();
                string sProjet;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sProjet = sNoProjet;
                }
                else
                {
                    sProjet = sNoSoumission;
                }
                rstImpProjSoum.Open("SELECT * FROM impression_Soumission WHERE IDSoumission = '" + sProjet + "' ORDER BY NoLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                string sqlstr;
                ADODB.Recordset rstExport = new ADODB.Recordset();
                ///
                //Modification PWE 2024 Export Soumission vers Excel
                //
                ViewSoumissionMec.DataSource = rstImpProjSoum;
                if (bTrigger == false)
                {
                    bTrigger = true;
                }
                if (MessageBox.Show("Désirez-vous exporter les données dans Excel, SEULEMENT ?", "Projet soumission", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    sqlstr = "SELECT impression_soumission.IDSoumission, CDbl([Qté]) AS Quantité, impression_soumission.NumItem, impression_soumission.Description, " +
                        "impression_soumission.Manufact, CDbl([Prix_list]) AS PrixdeListe, CDbl(Left([escompte],Len([escompte])-1)) AS Escomptes, CDbl([Prix_net]) AS prix_nette, " +
                        "impression_soumission.Prix_total - impression_soumission.Profit_Argent AS Prix_Total ,impression_soumission.NomFournisseur, " +
                        "impression_soumission.DateReception , impression_soumission.DateCommande ,  impression_soumission.NoSéquentiel ";
                    sqlstr += "FROM impression_soumission ";
                    sqlstr += "WHERE (((impression_soumission.IDSoumission)='" + sProjet + "') AND ((impression_soumission.NumItem) Is Not Null)) ";
                    sqlstr += "ORDER BY impression_soumission.noligne";
                    rstExport.Open(sqlstr, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ExporterVersExcel(rstExport);
                    Cursor.Current = Cursors.Default;
                    return;
                }
                TraduireImpressionSoumission();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    ViewSoumissionMec.shpCadrePrixReception.Visible = true;
                    ViewSoumissionMec.lblTitrePrixReception.Visible = true;
                    ViewSoumissionMec.lblPrixReception.Visible = true;
                    ViewSoumissionMec.shpCadrePrixSoumission.Visible = true;
                    ViewSoumissionMec.lblTitrePrixSoumission.Visible = true;
                    ViewSoumissionMec.lblPrixSoumission.Visible = true;
                }
                else
                {
                    ViewSoumissionMec.shpCadrePrixReception.Visible = false;
                    ViewSoumissionMec.lblTitrePrixReception.Visible = false;
                    ViewSoumissionMec.lblPrixReception.Visible = false;
                    ViewSoumissionMec.shpCadrePrixSoumission.Visible = false;
                    ViewSoumissionMec.lblTitrePrixSoumission.Visible = false;
                    ViewSoumissionMec.lblPrixSoumission.Visible = false;
                }
                if (MessageBox.Show("Désirez-vous affiche en bas de page ?", "Projet soumission", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    ViewSoumissionMec.lblDate.Text = ConvertToUSDate(DateTime.Today);
                }
                else
                {
                    ViewSoumissionMec.lblDate.Text = " ";
                }
                if (!(rstProjSoum.Fields["IDSoumission"].Value is DBNull)) { ViewSoumissionMec.lblSoumission.Text = rstProjSoum.Fields["IDSoumission"].Value; }
                else
                {
                    ViewSoumissionMec.lblSoumission.Text = string.Empty;
                }
                if (m_eType == EnumType.TYPE_PROJET) { ViewSoumissionMec.lblProjet.Text = rstProjSoum.Fields["IDProjet"].Value; }
                else
                {
                    ViewSoumissionMec.lblProjet.Text = string.Empty;
                }
                ViewSoumissionMec.lbldescription.Text = rstProjSoum.Fields["Description"].Value;
                rstTemp.Open("SELECT NomClient FROM Client WHERE IDClient = " + rstProjSoum.Fields["IDClient"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                ViewSoumissionMec.lblClient.Text = rstTemp.Fields["NomClient"].Value;
                rstTemp.Close();
                rstTemp.Open("SELECT NomContact FROM Contact WHERE IDContact = " + rstProjSoum.Fields["IDContact"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                ViewSoumissionMec.lblcontact.Text = rstTemp.Fields["NomContact"].Value;
                rstTemp.Close();
                if (!(rstProjSoum.Fields["TauxDessin"].Value is DBNull)) { ViewSoumissionMec.lblTauxDessin.Text = rstProjSoum.Fields["TauxDessin"].Value; } else { ViewSoumissionMec.lblTauxDessin.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxFabrication"].Value is DBNull)) { ViewSoumissionMec.lblTauxFabrication.Text = rstProjSoum.Fields["TauxFabrication"].Value; } else { ViewSoumissionMec.lblTauxFabrication.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxAssemblage"].Value is DBNull)) { ViewSoumissionMec.lblTauxAssemblage.Text = rstProjSoum.Fields["TauxAssemblage"].Value; } else { ViewSoumissionMec.lblTauxAssemblage.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxProgInterface"].Value is DBNull)) { ViewSoumissionMec.lblTauxProgInterface.Text = rstProjSoum.Fields["TauxProgInterface"].Value; } else { ViewSoumissionMec.lblTauxProgInterface.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxProgAutomate"].Value is DBNull)) { ViewSoumissionMec.lblTauxProgAutomate.Text = rstProjSoum.Fields["TauxProgAutomate"].Value; } else { ViewSoumissionMec.lblTauxProgAutomate.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxVision"].Value is DBNull)) { ViewSoumissionMec.lblTauxVision.Text = rstProjSoum.Fields["TauxVision"].Value; } else { ViewSoumissionMec.lblTauxVision.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxTest"].Value is DBNull)) { ViewSoumissionMec.lblTauxTest.Text = rstProjSoum.Fields["TauxTest"].Value; } else { ViewSoumissionMec.lblTauxTest.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxInstallation"].Value is DBNull)) { ViewSoumissionMec.lblTauxInstallation.Text = rstProjSoum.Fields["TauxInstallation"].Value; } else { ViewSoumissionMec.lblTauxInstallation.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxMiseService"].Value is DBNull)) { ViewSoumissionMec.lblTauxMiseService.Text = rstProjSoum.Fields["TauxMiseService"].Value; } else { ViewSoumissionMec.lblTauxMiseService.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxFormation"].Value is DBNull)) { ViewSoumissionMec.lblTauxFormation.Text = rstProjSoum.Fields["TauxFormation"].Value; } else { ViewSoumissionMec.lblTauxFormation.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxGestion"].Value is DBNull)) { ViewSoumissionMec.lblTauxGestion.Text = rstProjSoum.Fields["TauxGestion"].Value; } else { ViewSoumissionMec.lblTauxGestion.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxShipping"].Value is DBNull)) { ViewSoumissionMec.lblTauxShipping.Text = rstProjSoum.Fields["TauxShipping"].Value; } else { ViewSoumissionMec.lblTauxShipping.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsDessin"].Value is DBNull)) { ViewSoumissionMec.lblTempsDessinSoum.Text = rstProjSoum.Fields["TempsDessin"].Value; } else { ViewSoumissionMec.lblTempsDessinSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsFabrication"].Value is DBNull))
                {
                    if (rstProjSoum.Fields["SansTemps"].Value == false) { ViewSoumissionMec.lblTempsCoupeSoum.Text = rstProjSoum.Fields["TempsFabrication"].Value; } else { ViewSoumissionMec.lblTempsCoupeSoum.Text = "0"; }
                }
                else { ViewSoumissionMec.lblTempsCoupeSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsAssemblage"].Value is DBNull)) { ViewSoumissionMec.lblTempsMachinageSoum.Text = rstProjSoum.Fields["TempsAssemblage"].Value; } else { ViewSoumissionMec.lblTempsMachinageSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsProgInterface"].Value is DBNull)) { ViewSoumissionMec.lblTempsSoudureSoum.Text = rstProjSoum.Fields["TempsProgInterface"].Value; } else { ViewSoumissionMec.lblTempsSoudureSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsProgAutomate"].Value is DBNull)) { ViewSoumissionMec.lblTempsPeintureSoum.Text = rstProjSoum.Fields["TempsProgAutomate"].Value; } else { ViewSoumissionMec.lblTempsPeintureSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsProgRobot"].Value is DBNull)) { ViewSoumissionMec.lblTempsTestSoum.Text = rstProjSoum.Fields["TempsProgRobot"].Value; } else { ViewSoumissionMec.lblTempsTestSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsVision"].Value is DBNull)) { ViewSoumissionMec.lblTempsInstallationSoum.Text = rstProjSoum.Fields["TempsVision"].Value; } else { ViewSoumissionMec.lblTempsInstallationSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsTest"].Value is DBNull)) { ViewSoumissionMec.lblTempsFormationSoum.Text = rstProjSoum.Fields["TempsTest"].Value; } else { ViewSoumissionMec.lblTempsFormationSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsInstallation"].Value is DBNull)) { ViewSoumissionMec.lblTempsGestionSoum.Text = rstProjSoum.Fields["TempsInstallation"].Value; } else { ViewSoumissionMec.lblTempsGestionSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsMiseService"].Value is DBNull)) { ViewSoumissionMec.lblTempsShippingSoum.Text = rstProjSoum.Fields["TempsMiseService"].Value; } else { ViewSoumissionMec.lblTempsShippingSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsFormation"].Value is DBNull)) { ViewSoumissionMec.lblTempsFormationSoum.Text = rstProjSoum.Fields["TempsFormation"].Value; } else { ViewSoumissionMec.lblTempsFormationSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsGestion"].Value is DBNull)) { ViewSoumissionMec.lblTempsGestionSoum.Text = rstProjSoum.Fields["TempsGestion"].Value; } else { ViewSoumissionMec.lblTempsGestionSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsShipping"].Value is DBNull)) { ViewSoumissionMec.lblTempsShippingSoum.Text = rstProjSoum.Fields["TempsShipping"].Value; } else { ViewSoumissionMec.lblTempsShippingSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsDessin"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsDessin"].Value)) { dblTempsDessin = (double)rstProjSoum.Fields["TempsDessin"].Value; } else { dblTempsDessin = 0d; }
                }
                else { dblTempsDessin = 0d; }
                if (!(rstProjSoum.Fields["TempsFabrication"].Value is DBNull))
                {
                    if (rstProjSoum.Fields["SansTemps"].Value == false)
                    {
                        if (IsNumeric(rstProjSoum.Fields["TempsFabrication"].Value)) { dblTempsFabrication = (double)rstProjSoum.Fields["TempsFabrication"].Value; } else { dblTempsFabrication = 0d; }
                    }
                    else
                    {
                        dblTempsFabrication = 0d;
                    }
                }
                else { dblTempsFabrication = 0d; }
                if (!(rstProjSoum.Fields["TempsAssemblage"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsAssemblage"].Value)) { dblTempsAssemblage = (double)rstProjSoum.Fields["TempsAssemblage"].Value; }
                    else
                    {
                        dblTempsAssemblage = 0d;
                    }
                }
                else { dblTempsAssemblage = 0d; }
                if (!(rstProjSoum.Fields["TempsProgInterface"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsProgInterface"].Value)) { dblTempsProgInterface = (double)rstProjSoum.Fields["TempsProgInterface"].Value; } else { dblTempsProgInterface = 0d; }
                }
                else { dblTempsProgInterface = 0d; }
                if (!(rstProjSoum.Fields["TempsProgAutomate"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsProgAutomate"].Value)) { dblTempsProgAutomate = (double)rstProjSoum.Fields["TempsProgAutomate"].Value; }
                    else
                    {
                        dblTempsProgAutomate = 0d;
                    }
                }
                else { dblTempsProgAutomate = 0d; }
                if (!(rstProjSoum.Fields["TempsProgRobot"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsProgRobot"].Value)) { dblTempsProgRobot = (double)rstProjSoum.Fields["TempsProgRobot"].Value; }
                    else
                    {
                        dblTempsProgRobot = 0d;
                    }
                }
                else { dblTempsProgRobot = 0d; }
                if (!(rstProjSoum.Fields["TempsVision"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsVision"].Value)) { dblTempsVision = (double)rstProjSoum.Fields["TempsVision"].Value; }
                    else
                    {
                        dblTempsVision = 0d;
                    }
                }
                else { dblTempsVision = 0d; }
                if (!(rstProjSoum.Fields["TempsTest"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsTest"].Value)) { dblTempsTest = (double)rstProjSoum.Fields["TempsTest"].Value; }
                    else
                    {
                        dblTempsTest = 0d;
                    }
                }
                else { dblTempsTest = 0d; }
                if (!(rstProjSoum.Fields["TempsInstallation"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsInstallation"].Value)) { dblTempsInstallation = (double)rstProjSoum.Fields["TempsInstallation"].Value; }
                    else
                    {
                        dblTempsInstallation = 0d;
                    }
                }
                else { dblTempsInstallation = 0d; }
                if (!(rstProjSoum.Fields["TempsMiseService"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsMiseService"].Value)) { dblTempsMiseService = (double)rstProjSoum.Fields["TempsMiseService"].Value; }
                    else
                    {
                        dblTempsMiseService = 0d;
                    }
                }
                else { dblTempsMiseService = 0d; }
                if (!(rstProjSoum.Fields["TempsFormation"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsFormation"].Value)) { dblTempsFormation = (double)rstProjSoum.Fields["TempsFormation"].Value; }
                    else
                    {
                        dblTempsFormation = 0d;
                    }
                }
                else { dblTempsFormation = 0d; }
                if (!(rstProjSoum.Fields["TempsGestion"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsGestion"].Value)) { dblTempsGestion = (double)rstProjSoum.Fields["TempsGestion"].Value; }
                    else
                    {
                        dblTempsGestion = 0d;
                    }
                }
                else { dblTempsGestion = 0d; }
                if (!(rstProjSoum.Fields["TempsShipping"].Value is DBNull))
                {
                    if (IsNumeric(rstProjSoum.Fields["TempsShipping"].Value)) { dblTempsShipping = (double)rstProjSoum.Fields["TempsShipping"].Value; }
                    else
                    {
                        dblTempsShipping = 0d;
                    }
                }
                else { dblTempsShipping = 0d; }
                dblTotalTemps = dblTempsDessin + dblTempsFabrication + dblTempsAssemblage + dblTempsProgInterface + dblTempsProgAutomate + dblTempsProgRobot + dblTempsVision + dblTempsTest + dblTempsInstallation + dblTempsMiseService + dblTempsFormation + dblTempsGestion + dblTempsShipping;
                ViewSoumissionMec.lblTotalTempsRHSoum.Text = dblTotalTemps.ToString();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    CalculerTempsReelsImpression(rstProjSoum.Fields["IDProjet"].Value);
                }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    ViewSoumissionMec.lblNbrePersonne.Text = "0";
                    ViewSoumissionMec.lblTempsHebergement.Text = "0";
                    ViewSoumissionMec.lblTauxHebergement1.Text = "0";
                    ViewSoumissionMec.lblTauxHebergement2.Text = "0";
                    ViewSoumissionMec.lblTempsRepas.Text = "0";
                    ViewSoumissionMec.lblTauxRepas.Text = "0";
                    ViewSoumissionMec.lblTempsTransport.Text = "0";
                    ViewSoumissionMec.lblTauxTransport.Text = "0";
                    ViewSoumissionMec.lblTempsUniteMobile.Text = "0";
                    ViewSoumissionMec.lblTauxUniteMobile.Text = "0";
                }
                else
                {
                    if (!(rstProjSoum.Fields["NbrePersonne"].Value is DBNull)) { ViewSoumissionMec.lblNbrePersonne.Text = rstProjSoum.Fields["NbrePersonne"].Value; } else { ViewSoumissionMec.lblNbrePersonne.Text = "0"; }
                    if (!(rstProjSoum.Fields["TempsHebergement"].Value is DBNull)) { ViewSoumissionMec.lblTempsHebergement.Text = rstProjSoum.Fields["TempsHebergement"].Value; } else { ViewSoumissionMec.lblTempsHebergement.Text = "0"; }
                    if (!(rstProjSoum.Fields["TauxHebergement1"].Value is DBNull)) { ViewSoumissionMec.lblTauxHebergement1.Text = rstProjSoum.Fields["TauxHebergement1"].Value; } else { ViewSoumissionMec.lblTauxHebergement1.Text = "0"; }
                    if (!(rstProjSoum.Fields["TauxHebergement2"].Value is DBNull)) { ViewSoumissionMec.lblTauxHebergement2.Text = rstProjSoum.Fields["TauxHebergement2"].Value; } else { ViewSoumissionMec.lblTauxHebergement2.Text = "0"; }
                    if (!(rstProjSoum.Fields["TempsRepas"].Value is DBNull)) { ViewSoumissionMec.lblTempsRepas.Text = rstProjSoum.Fields["TempsRepas"].Value; } else { ViewSoumissionMec.lblTempsRepas.Text = "0"; }
                    if (!(rstProjSoum.Fields["TauxRepas"].Value is DBNull)) { ViewSoumissionMec.lblTauxRepas.Text = rstProjSoum.Fields["TauxRepas"].Value; } else { ViewSoumissionMec.lblTauxRepas.Text = "0"; }
                    if (!(rstProjSoum.Fields["TempsTransport"].Value is DBNull)) { ViewSoumissionMec.lblTempsTransport.Text = rstProjSoum.Fields["TempsTransport"].Value; } else { ViewSoumissionMec.lblTempsTransport.Text = "0"; }
                    if (!(rstProjSoum.Fields["TauxTransport"].Value is DBNull)) { ViewSoumissionMec.lblTauxTransport.Text = rstProjSoum.Fields["TauxTransport"].Value; } else { ViewSoumissionMec.lblTauxTransport.Text = "0"; }
                    if (!(rstProjSoum.Fields["TempsUniteMobile"].Value is DBNull)) { ViewSoumissionMec.lblTempsUniteMobile.Text = rstProjSoum.Fields["TempsUniteMobile"].Value; } else { ViewSoumissionMec.lblTempsUniteMobile.Text = "0"; }
                    if (!(rstProjSoum.Fields["TauxUniteMobile"].Value is DBNull)) { ViewSoumissionMec.lblTauxUniteMobile.Text = rstProjSoum.Fields["TauxUniteMobile"].Value; }
                    else
                    {
                        ViewSoumissionMec.lblTauxUniteMobile.Text = "0";
                    }
                }
                if (!(rstProjSoum.Fields["PrixEmballage"].Value is DBNull)) { ViewSoumissionMec.lblPrixEmballage.Text = rstProjSoum.Fields["PrixEmballage"].Value; } else { ViewSoumissionMec.lblPrixEmballage.Text = "0"; }
                ViewSoumissionMec.lblPrixManuel.Text = rstProjSoum.Fields["Total_manuel"].Value;
                ViewSoumissionMec.lblTotalTempsAR.Text = rstProjSoum.Fields["total_temps"].Value;
                ViewSoumissionMec.lblTotalPieceAR.Text = rstProjSoum.Fields["total_piece"].Value;
                ViewSoumissionMec.lblProfit = (rstProjSoum.Fields["profit"].Value - 1) * 100;
                ViewSoumissionMec.lblTotalProfit.Text = rstProjSoum.Fields["total_profit"].Value;
                ViewSoumissionMec.lblImprevue.Text = rstProjSoum.Fields["imprevue"].Value;
                ViewSoumissionMec.lblImprevueAR.Text = rstProjSoum.Fields["total_imprevue"].Value;
                ViewSoumissionMec.lblCommission.Text = rstProjSoum.Fields["commission"].Value;
                ViewSoumissionMec.lblcommissionAR.Text = rstProjSoum.Fields["total_commission"].Value;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    if (!(rstProjSoum.Fields["PrixRéception"].Value is DBNull)) { ViewSoumissionMec.lblPrixReception.Text = rstProjSoum.Fields["PrixRéception"].Value; } else { ViewSoumissionMec.lblPrixReception.Text = "0$"; }
                    if (!(rstProjSoum.Fields["IDSoumission"].Value is DBNull))
                    {
                        rstPrixSoum = new Recordset();
                        rstPrixSoum.Open("SELECT PrixTotal FROM SoumissionMec WHERE IDSoumission = '" + rstProjSoum.Fields["IDSoumission"].Value + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstPrixSoum.EOF)
                        {//
                            if (!(rstPrixSoum.Fields["PrixTotal"].Value is DBNull)) { ViewSoumissionMec.lblPrixSoumission.Text = rstPrixSoum.Fields["PrixTotal"].Value; } else { ViewSoumissionMec.lblPrixSoumission.Text = "0$"; }
                        }
                        else
                        {
                            ViewSoumissionMec.lblPrixSoumission.Text = "0$";
                        }
                        rstPrixSoum.Close();
                        rstPrixSoum = default;
                    }
                    else
                    {
                        ViewSoumissionMec.lblPrixSoumission.Text = "0$";
                    }
                }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    dblTotalHebergement = 0d;
                    dblTotalRepas = 0d;
                    dblTotalTransport = 0d;
                    dblTotalUniteMobile = 0d;
                }
                else
                {
                    if (!(rstProjSoum.Fields["TotalHebergement"].Value is DBNull)) { dblTotalHebergement = rstProjSoum.Fields["TotalHebergement"].Value; }
                    if (!(rstProjSoum.Fields["TotalRepas"].Value is DBNull)) { dblTotalRepas = rstProjSoum.Fields["TotalRepas"].Value; }
                    if (!(rstProjSoum.Fields["TempsTransport"].Value is DBNull) & !(rstProjSoum.Fields["TauxTransport"].Value is DBNull)) { dblTotalTransport = (double)rstProjSoum.Fields["TempsTransport"].Value * (double)rstProjSoum.Fields["TauxTransport"].Value; } else { dblTotalTransport = 0d; }
                    if (!(rstProjSoum.Fields["TempsUniteMobile"].Value is DBNull) & !(rstProjSoum.Fields["TauxUniteMobile"].Value is DBNull)) { dblTotalUniteMobile = (double)rstProjSoum.Fields["TempsUniteMobile"].Value * (double)rstProjSoum.Fields["TauxUniteMobile"].Value; }
                    else
                    {
                        dblTotalUniteMobile = 0d;
                    }
                }
                if (!(rstProjSoum.Fields["PrixEmballage"].Value is DBNull))
                {
                    dblPrixEmballage = double.Parse(Strings.Replace(rstProjSoum.Fields["PrixEmballage"].Value, ".", ","));
                }
                else { dblPrixEmballage = 0d; }
                dblTotalReste = dblTotalHebergement + dblTotalRepas + dblTotalTransport + dblTotalUniteMobile + dblPrixEmballage;
                dblTotalAutre = dblTotalReste + (double)rstProjSoum.Fields["total_manuel"].Value;
                ViewSoumissionMec.lblAutre.Text = dblTotalAutre.ToString() + "$";
                ViewSoumissionMec.lblGrandTotalAR.Text = rstProjSoum.Fields["prixtotal"].Value;
                if (rstProjSoum.Fields["MontantForfait"].Value != "")
                {
                    ViewSoumissionMec.shpCadreForfait.Visible = true;
                    ViewSoumissionMec.lblTitreForfait.Visible = true;
                    ViewSoumissionMec.lblForfait.Visible = true;
                    ViewSoumissionMec.lblTitreForfait = ViewSoumissionMec.lblTitreForfait.Text + " ( " + rstProjSoum.Fields["InitialeForfait"].Value + " )";
                    ViewSoumissionMec.lblForfait.Text = rstProjSoum.Fields["MontantForfait"].Value;
                }
                else
                {
                    ViewSoumissionMec.shpCadreForfait.Visible = false;
                    ViewSoumissionMec.lblTitreForfait.Visible = false;
                    ViewSoumissionMec.lblForfait.Visible = false;
                }
                ViewSoumissionMec.Orientation = false;
                ViewSoumissionMec f = new ViewSoumissionMec();
                f.Show();
                rstImpProjSoum.Close();
                rstImpProjSoum = default;
                rstTemp = default;
                Cursor.Current = Cursors.Default;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ImprimerProjSoum", ex);
            }
        }
        //Impression de la feuille de la liste des pièces
        private void ImprimerListePieces(ADODB.Recordset rstProjSoum)
        {
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstTemp;
                ADODB.Recordset rstImpListePiece;
                int XPiece;
                string sSousSection;
                string sSection;
                string sNoProjet;
                string sNoSoumission;
                bool bAjouterSection;
                bool bAjouterSousSection;
                bool bAjouterPiece;
                rstPiece = new Recordset();
                rstTemp = new Recordset();
                rstImpListePiece = new Recordset();
                UpdateSQL("DELETE FROM impression_listepiece");
                XPiece = 1;
                Cursor.Current = Cursors.WaitCursor;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sNoProjet = rstProjSoum.Fields["IDProjet"].Value;
                    if (!(rstProjSoum.Fields["IDSoumission"].Value is DBNull)) { sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value; } else { sNoSoumission = string.Empty; }
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    sNoProjet = string.Empty;
                    sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value;
                    rstPiece.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoSoumission + "' AND Type = 'E' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                while (!rstPiece.EOF)
                {
                    if (rstPiece.Fields[".Visible"].Value == true)
                    {
                        bAjouterSection = true;
                        bAjouterSousSection = true;
                        bAjouterPiece = true;
                        rstImpListePiece.CursorLocation = CursorLocationEnum.adUseClient;
                        rstImpListePiece.Open("SELECT * FROM Impression_ListePiece WHERE IDSection = '" + rstPiece.Fields["IDSection"].Value + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstImpListePiece.EOF)
                        {
                            bAjouterSection = false;
                            while (!rstImpListePiece.EOF)
                            {
                                if (rstImpListePiece.Fields["NomSousSection"].Value == rstPiece.Fields["SousSection"].Value)
                                {
                                    bAjouterSousSection = false;
                                    if (rstPiece.Fields["NumItem"].Value != "Texte" & rstPiece.Fields["NumItem"].Value != "Text")
                                    {
                                        if (rstImpListePiece.Fields["NumItem"].Value == rstPiece.Fields["NumItem"].Value)
                                        {
                                            bAjouterPiece = false; rstImpListePiece.Fields["Qté"].Value = Strings.Replace(((double)rstImpListePiece.Fields["Qté"].Value + (double)rstPiece.Fields["Qté"].Value).ToString(), ".", ",");
                                            if (!(rstImpListePiece.Fields["ID"].Value is DBNull))
                                            {
                                                if (rstImpListePiece.Fields["ID"].Value != "")
                                                {
                                                    rstImpListePiece.Fields["ID"].Value = rstImpListePiece.Fields["ID"].Value + ", " + rstPiece.Fields["ID"].Value;
                                                }
                                                else
                                                {
                                                    rstImpListePiece.Fields["ID"].Value = rstPiece.Fields["ID"].Value;
                                                }
                                            }
                                            else
                                            {
                                                rstImpListePiece.Fields["ID"].Value = rstPiece.Fields["ID"].Value;
                                            }
                                            rstImpListePiece.Update();
                                            if (rstImpListePiece.Fields["Qté"].Value == 0)
                                            {
                                                rstImpListePiece.Delete(); rstImpListePiece.Filter = "NomSousSection = '" + Strings.Replace(rstPiece.Fields["SousSection"].Value, "'", "''") + "'";
                                                if (rstImpListePiece.RecordCount == 1)
                                                {
                                                    rstImpListePiece.Delete();
                                                    rstImpListePiece.Filter = "IDSection = '" + rstPiece.Fields["IDSection"].Value + "'";
                                                    if (rstImpListePiece.RecordCount == 1)
                                                    {
                                                        rstImpListePiece.Delete();
                                                    }
                                                }
                                                rstImpListePiece.Filter = "";
                                            }
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                rstImpListePiece.MoveNext();
                                if (bAjouterSection == true)
                                {
                                    if (m_eLangage == EnumLangage.ANGLAIS)
                                    {
                                        sSection = "NomSectionEN";
                                    }
                                    else
                                    {
                                        sSection = "NomSectionFR";
                                    }
                                    rstTemp.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstPiece.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                    rstImpListePiece.AddNew();
                                    rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                                    rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                                    if (!(rstTemp.Fields[sSection].Value is DBNull))
                                    {
                                        rstImpListePiece.Fields["Section"].Value = rstTemp.Fields[sSection].Value;
                                    }
                                    else
                                    {
                                        rstImpListePiece.Fields["Section"].Value = " ";
                                    }
                                    rstImpListePiece.Fields["IDSection"].Value = rstPiece.Fields["IDSection"].Value;
                                    rstImpListePiece.Update();
                                    XPiece++;
                                    rstTemp.Close();
                                }
                                if (bAjouterSousSection == true)
                                {
                                    sSousSection = rstPiece.Fields["SousSection"].Value;
                                    if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                                    {
                                        sSousSection = " ";
                                    }
                                    rstImpListePiece.AddNew();
                                    rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                                    rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                                    rstImpListePiece.Fields["SousSection"].Value = sSousSection;
                                    rstImpListePiece.Fields["NomSousSection"].Value = rstPiece.Fields["SousSection"].Value; rstImpListePiece.Fields["IDSection"].Value = rstPiece.Fields["IDSection"].Value; rstImpListePiece.Update(); XPiece++;
                                }
                                if (bAjouterPiece == true)
                                {
                                    rstImpListePiece.AddNew();
                                    rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                                    rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                                    rstImpListePiece.Fields["NumItem"].Value = rstPiece.Fields["NumItem"].Value;
                                    rstImpListePiece.Fields["Qté"].Value = rstPiece.Fields["Qté"].Value;
                                    if (m_eLangage == EnumLangage.ANGLAIS)
                                    {
                                        rstImpListePiece.Fields["Description"].Value = rstPiece.Fields["Desc_EN"].Value;
                                    }
                                    else
                                    {
                                        rstImpListePiece.Fields["Description"].Value = rstPiece.Fields["Desc_FR"].Value;
                                    }
                                    rstImpListePiece.Fields["Manufact"].Value = rstPiece.Fields["Manufact"].Value;
                                    if (m_eType == EnumType.TYPE_PROJET) { rstImpListePiece.Fields["ID"].Value = rstPiece.Fields["ID"].Value; }
                                    rstImpListePiece.Fields["IDSection"].Value = rstPiece.Fields["IDSection"].Value;
                                    rstImpListePiece.Fields["NomSousSection"].Value = rstPiece.Fields["SousSection"].Value;
                                    rstImpListePiece.Update();
                                    XPiece++;
                                }
                                rstImpListePiece.Close();
                            }
                        }
                        rstPiece.MoveNext();
                    }
                    rstImpListePiece.CursorLocation = CursorLocationEnum.adUseClient;
                    rstImpListePiece.Open("SELECT * FROM impression_Listepiece WHERE TRIM(IDSoumission) = '" + Strings.Trim(sNoSoumission) + "' ORDER BY noligne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ViewListePiece.DataSource = rstImpListePiece;
                    TraduireImpressionListePiece();
                    ViewListePiece.lblDate.Text = ConvertDate(DateTime.Today);
                    ViewListePiece.lblProjet.Text = sNoProjet;
                    ViewListePiece.lblsoumission.Text = sNoSoumission;
                    ViewListePiece.lbldescription.Text = rstProjSoum.Fields["Description"].Value;
                    rstTemp.Open("SELECT NomClient FROM Client WHERE IDClient = " + rstProjSoum.Fields["IDClient"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ViewListePiece.lblClient.Text = rstTemp.Fields["NomClient"].Value;
                    rstTemp.Close();
                    rstTemp.Open("SELECT NomContact FROM Contact WHERE IDContact = " + rstProjSoum.Fields["IDContact"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ViewListePiece.lblContact.Text = rstTemp.Fields["nomcontact"].Value;
                    rstTemp.Close();
                    ViewListePiece.Orientation = isLandscape;
                    ViewListePiece f = new ViewListePiece();
                    f.Show();
                    rstImpListePiece.Close();
                    rstImpListePiece = default;
                    rstTemp = default;
                    Cursor.Current = Cursors.Default;
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ImprimerListePieces", ex);
            }
        }
        private void CalculerTempsReelsImpression(string sNoProjet)
        {
            try
            {
                SqlConnection sql = new SqlConnection(StringSQL);
                sql.Open();
                string sFilterNoProjet = string.Empty;
                if (Droite(sNoProjet, 2) == "99")
                {
                    sFilterNoProjet = "LEFT(NoProjet, 6) = '" + Gauche(sNoProjet, 6) + "'";
                }
                else
                {
                    sFilterNoProjet = "NoProjet = '" + sNoProjet + "'";
                }
                SqlDataReader rstTotal = new SqlCommand($"SELECT * FROM PUNCH WHERE {sFilterNoProjet}  HEUREFIN !='' AND HEUREDÉBUT !='' ORDER BY TYPE,DATE", sql).ExecuteReader();
                while (rstTotal.Read())
                {
                    string[] debut = rstTotal["HeureDébut"].ToString().Split(':');
                    double sDateDebut = double.Parse(debut[0]) * 24 + double.Parse(debut[1]);
                    string[] fin = rstTotal["HeureFin"].ToString().Split(':');
                    double sDateFin = double.Parse(fin[0]) * 24 + double.Parse(fin[1]);
                    double sTotal = sDateFin - sDateDebut;
                }
                double stotal = 0d;
                ViewSoumissionMec.lblTempsDessinProj.Text = "0";
                ViewSoumissionMec.lblTempsCoupeProj.Text = "0";
                ViewSoumissionMec.lblTempsMachinageProj.Text = "0";
                ViewSoumissionMec.lblTempsSoudureProj.Text = "0";
                ViewSoumissionMec.lblTempsAssemblageProj.Text = "0";
                ViewSoumissionMec.lblTempsPeintureProj.Text = "0";
                ViewSoumissionMec.lblTempsTestProj.Text = "0";
                ViewSoumissionMec.lblTempsFormationProj.Text = "0";
                ViewSoumissionMec.lblTempsGestionProj.Text = "0";
                ViewSoumissionMec.lblTempsMiseServiceReel.Text = "0";
                ViewSoumissionMec.lblTempsFormationReel.Text = "0";
                ViewSoumissionMec.lblTempsGestionReel.Text = "0";
                ViewSoumissionMec.lblTempsShippingReel.Text = "0";
                while (rstTotal.Read())
                {
                    if (rstTotal["Total"].ToString() != string.Empty)
                    {
                        switch (rstTotal["Type"].ToString())
                        {
                            case "Dessin": { ViewSoumissionMec.lblTempsDessinProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Fabrication": { ViewSoumissionMec.lblTempsCoupeProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Assemblage": { ViewSoumissionMec.lblTempsMachinageProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "ProgInterface": { ViewSoumissionMec.lblTempsSoudureProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "ProgAutomate": { ViewSoumissionMec.lblTempsAssemblageProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "ProgRobot": { ViewSoumissionMec.lblTempsPeintureProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Vision": { ViewSoumissionMec.lblTempsTestProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Test": { ViewSoumissionMec.lblTempsFormationProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Installation": { ViewSoumissionMec.lblTempsGestionProj.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "MiseService": { ViewSoumissionMec.lblTempsMiseServiceReel.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Formation": { ViewSoumissionMec.lblTempsFormationReel.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Gestion": { ViewSoumissionMec.lblTempsGestionReel.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                            case "Shipping": { ViewSoumissionMec.lblTempsShippingReel.Text = Math.Round((double)rstTotal["Total"], 2).ToString(); break; }
                        }
                    }
                }
                rstTotal.Close();
                rstTotal = new SqlCommand("SELECT * FROM Punch WHERE " + sFilterNoProjet + " And HeureFin is not null AND HeureDébut is not null", sql).ExecuteReader();
                if (rstTotal["Total"].ToString() != string.Empty)
                {
                    ViewSoumissionMec.lblTotalTempsReel.Text = Math.Round((double)rstTotal["Total"], 2).ToString();
                }
                else { ViewSoumissionMec.lblTotalTempsReel.Text = "0"; }
                rstTotal.Close();
                rstTotal = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerTempsReels", ex);
            }
        }
        private void ImprimerProjSoumFacturation(ADODB.Recordset rstProjSoum, string sNoFacture)
        {
            var rptOrientLandscape = default(object);
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstTemp;
                ADODB.Recordset rstImpProjSoum;
                var sOrdreSection = default(string);
                int XSoum;
                var sSousSection = default(string);
                string sSousSectionRS;
                string sSection;
                string sNoProjet;
                string sNoSoumission;
                var sCommission = default(string);
                var sPrixTotal = default(string);
                var sProfit = default(string);
                var sTempsFabrication = default(string);
                var sTotalPiece = default(string);
                var sImprevue = default(string);
                var sTotalTemps = default(string);
                var sManuel = default(string);
                double dblTotalTemps;
                double dblTempsDessin;
                double dblTempsFabrication;
                double dblTempsAssemblage;
                double dblTempsProgInterface;
                double dblTempsProgAutomate;
                double dblTempsProgRobot;
                double dblTempsVision;
                double dblTempsTest;
                double dblTempsInstallation;
                double dblTempsMiseService;
                double dblTempsFormation;
                double dblTempsGestion;
                double dblTempsShipping;
                double dblTotalHebergement;
                double dblTotalRepas;
                double dblTotalTransport;
                double dblTotalUniteMobile;
                double dblPrixEmballage;
                double dblTotalReste;
                double dblTotalAutre;
                rstPiece = new Recordset();
                rstTemp = new Recordset();
                rstImpProjSoum = new Recordset();
                UpdateSQL("DELETE FROM impression_soumission");
                XSoum = 1;
                Cursor.Current = Cursors.WaitCursor;
                rstImpProjSoum.Open("SELECT * FROM impression_soumission", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                sNoProjet = rstProjSoum.Fields["IDProjet"].Value;
                sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value;
                rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND Type = 'E' AND Facturation = '" + sNoFacture + "' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstPiece.EOF)
                {
                    sSousSectionRS = rstPiece.Fields["SousSection"].Value;
                    if ((sSousSectionRS ?? "") == S_PAS_SOUS_SECTION) { sSousSectionRS = " "; }
                    if (sOrdreSection != rstPiece.Fields["OrdreSection"].Value)
                    {
                        sOrdreSection = rstPiece.Fields["OrdreSection"].Value;
                        if (m_eLangage == EnumLangage.ANGLAIS) { sSection = "NomSectionEN"; } else { sSection = "NomSectionFR"; }
                        rstTemp.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstPiece.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        rstImpProjSoum.AddNew();
                        rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                        rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet;
                        if (!(rstTemp.Fields[sSection].Value is DBNull)) { rstImpProjSoum.Fields["NomSection"].Value = rstTemp.Fields[sSection].Value; } else { rstImpProjSoum.Fields["NomSection"].Value = " "; }
                        rstImpProjSoum.Update();
                        XSoum++;
                        rstTemp.Close();
                        sSousSection = rstPiece.Fields["SousSection"].Value;
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION) { sSousSection = " "; }
                        rstImpProjSoum.AddNew();
                        rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                        if (m_eType == EnumType.TYPE_PROJET) { rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet; } else { rstImpProjSoum.Fields["IDSoumission"].Value = sNoSoumission; }
                        rstImpProjSoum.Fields["SousSection"].Value = sSousSection;
                        rstImpProjSoum.Update();
                        XSoum++;
                    }
                    else
                    if ((sSousSection ?? "") != (sSousSectionRS ?? ""))
                    {
                        sSousSection = sSousSectionRS;
                        rstImpProjSoum.AddNew();
                        rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                        rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet;
                        rstImpProjSoum.Fields["SousSection"].Value = sSousSectionRS;
                        rstImpProjSoum.Update();
                        XSoum++;
                    }
                    rstImpProjSoum.AddNew();
                    rstImpProjSoum.Fields["NoLigne"].Value = XSoum;
                    rstImpProjSoum.Fields["IDSoumission"].Value = sNoProjet;
                    rstImpProjSoum.Fields["NumItem"].Value = rstPiece.Fields["NumItem"].Value;
                    rstImpProjSoum.Fields["Qté"].Value = rstPiece.Fields["Qté"].Value;
                    if (m_eLangage == EnumLangage.ANGLAIS) { rstImpProjSoum.Fields["Description"].Value = rstPiece.Fields["DESC_EN"].Value; } else { rstImpProjSoum.Fields["Description"].Value = rstPiece.Fields["DESC_FR"].Value; }
                    rstImpProjSoum.Fields["MANUFACT"].Value = rstPiece.Fields["MANUFACT"].Value;
                    rstImpProjSoum.Fields["PRIX_NET"].Value = rstPiece.Fields["PRIX_NET"].Value;
                    rstTemp.Open("SELECT NomFournisseur FROM Fournisseur WHERE IDFRS = " + rstPiece.Fields["IDFRS"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!rstTemp.EOF) { rstImpProjSoum.Fields["NomFournisseur"].Value = rstTemp.Fields["NomFournisseur"].Value; }
                    rstTemp.Close();
                    rstImpProjSoum.Fields["PRIX_TOTAL"].Value = rstPiece.Fields["PRIX_TOTAL"].Value;
                    rstImpProjSoum.Fields["PROFIT_ARGENT"].Value = rstPiece.Fields["PROFIT_ARGENT"].Value;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (!string.IsNullOrEmpty(Strings.Trim(rstPiece.Fields["DateRéception"].Value))) { rstImpProjSoum.Fields["DateReception"].Value = rstPiece.Fields["DateRéception"].Value; } else { rstImpProjSoum.Fields["DateReception"].Value = ""; }
                        if (!string.IsNullOrEmpty(Strings.Trim(rstPiece.Fields["DateCommande"].Value))) { rstImpProjSoum.Fields["DateCommande"].Value = rstPiece.Fields["DateCommande"].Value; } else { rstImpProjSoum.Fields["DateCommande"].Value = ""; }
                    }
                    else
                    {
                        rstImpProjSoum.Fields["DateReception"].Value = "";
                        rstImpProjSoum.Fields["DateCommande"].Value = "";
                    }
                    rstImpProjSoum.Update();
                    XSoum++;
                    rstPiece.MoveNext();
                }
                rstImpProjSoum.Close();
                rstImpProjSoum.Open("SELECT * FROM impression_soumission WHERE IDSoumission = '" + sNoProjet + "' ORDER BY NoLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                ViewSoumissionMec.DataSource = rstImpProjSoum;
                CalculerPrixFacturation(sNoFacture, ref sCommission, ref sPrixTotal, ref sProfit, ref sTempsFabrication, ref sTotalPiece, ref sImprevue, ref sTotalTemps, ref sManuel);
                TraduireImpressionSoumission();
                ViewSoumissionMec.shpCadrePrixReception.Visible = false;
                ViewSoumissionMec.lblTitrePrixReception.Visible = false;
                ViewSoumissionMec.lblPrixReception.Visible = false;
                ViewSoumissionMec.shpCadrePrixSoumission.Visible = false;
                ViewSoumissionMec.lblTitrePrixSoumission.Visible = false;
                ViewSoumissionMec.lblPrixSoumission.Visible = false;
                ViewSoumissionMec.shpCadreForfait.Visible = false;
                ViewSoumissionMec.lblTitreForfait.Visible = false;
                ViewSoumissionMec.lblForfait.Visible = false;
                //               ViewSoumissionMec.lblTitreNoFacture.Visible = true;
                //               ViewSoumissionMec.lblNoFacture.Visible = true;
                //                ViewSoumissionMec.lblNoFacture.Text = sNoFacture;
                ViewSoumissionMec.lblDate.Text = ConvertDate(DateTime.Today);
                ViewSoumissionMec.lblSoumission.Text = sNoSoumission;
                ViewSoumissionMec.lblProjet.Text = sNoProjet;
                ViewSoumissionMec.lbldescription.Text = rstProjSoum.Fields["Description"].Value;
                rstTemp.Open("SELECT NomClient FROM Client WHERE IDClient = " + rstProjSoum.Fields["IDClient"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                ViewSoumissionMec.lblClient.Text = rstTemp.Fields["NomClient"].Value;
                rstTemp.Close();
                rstTemp.Open("SELECT NomContact FROM Contact WHERE IDContact = " + rstProjSoum.Fields["IDContact"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                ViewSoumissionMec.lblcontact.Text = rstTemp.Fields["NomContact"].Value;
                rstTemp.Close();
                if (!(rstProjSoum.Fields["TauxDessin"].Value is DBNull)) { ViewSoumissionMec.lblTauxDessin.Text = rstProjSoum.Fields["TauxDessin"].Value; } else { ViewSoumissionMec.lblTauxDessin.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxFabrication"].Value is DBNull)) { ViewSoumissionMec.lblTauxFabrication.Text = rstProjSoum.Fields["TauxFabrication"].Value; } else { ViewSoumissionMec.lblTauxFabrication.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxAssemblage"].Value is DBNull)) { ViewSoumissionMec.lblTauxAssemblage.Text = rstProjSoum.Fields["TauxAssemblage"].Value; } else { ViewSoumissionMec.lblTauxAssemblage.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxProgInterface"].Value is DBNull)) { ViewSoumissionMec.lblTauxProgInterface.Text = rstProjSoum.Fields["TauxProgInterface"].Value; } else { ViewSoumissionMec.lblTauxProgInterface.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxProgAutomate"].Value is DBNull)) { ViewSoumissionMec.lblTauxProgAutomate.Text = rstProjSoum.Fields["TauxProgAutomate"].Value; } else { ViewSoumissionMec.lblTauxProgAutomate.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxVision"].Value is DBNull)) { ViewSoumissionMec.lblTauxVision.Text = rstProjSoum.Fields["TauxVision"].Value; } else { ViewSoumissionMec.lblTauxVision.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxTest"].Value is DBNull)) { ViewSoumissionMec.lblTauxTest.Text = rstProjSoum.Fields["TauxTest"].Value; } else { ViewSoumissionMec.lblTauxTest.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxInstallation"].Value is DBNull)) { ViewSoumissionMec.lblTauxInstallation.Text = rstProjSoum.Fields["TauxInstallation"].Value; } else { ViewSoumissionMec.lblTauxInstallation.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxMiseService"].Value is DBNull)) { ViewSoumissionMec.lblTauxMiseService.Text = rstProjSoum.Fields["TauxMiseService"].Value; } else { ViewSoumissionMec.lblTauxMiseService.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxFormation"].Value is DBNull)) { ViewSoumissionMec.lblTauxFormation.Text = rstProjSoum.Fields["TauxFormation"].Value; } else { ViewSoumissionMec.lblTauxFormation.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxGestion"].Value is DBNull)) { ViewSoumissionMec.lblTauxGestion.Text = rstProjSoum.Fields["TauxGestion"].Value; } else { ViewSoumissionMec.lblTauxGestion.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxShipping"].Value is DBNull)) { ViewSoumissionMec.lblTauxShipping.Text = rstProjSoum.Fields["TauxShipping"].Value; } else { ViewSoumissionMec.lblTauxShipping.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsDessin"].Value is DBNull)) { ViewSoumissionMec.lblTempsDessinSoum.Text = rstProjSoum.Fields["TempsDessin"].Value; } else { ViewSoumissionMec.lblTempsDessinSoum.Text = "0"; }
                ViewSoumissionMec.lblTempsCoupeSoum.Text = sTempsFabrication;
                if (!(rstProjSoum.Fields["TempsAssemblage"].Value is DBNull)) { ViewSoumissionMec.lblTempsMachinageSoum.Text = rstProjSoum.Fields["TempsAssemblage"].Value; } else { ViewSoumissionMec.lblTempsMachinageSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsProgInterface"].Value is DBNull)) { ViewSoumissionMec.lblTempsSoudureSoum.Text = rstProjSoum.Fields["TempsProgInterface"].Value; } else { ViewSoumissionMec.lblTempsSoudureSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsProgAutomate"].Value is DBNull)) { ViewSoumissionMec.lblTempsPeintureSoum.Text = rstProjSoum.Fields["TempsProgAutomate"].Value; } else { ViewSoumissionMec.lblTempsPeintureSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsProgRobot"].Value is DBNull)) { ViewSoumissionMec.lblTempsTestSoum.Text = rstProjSoum.Fields["TempsProgRobot"].Value; } else { ViewSoumissionMec.lblTempsTestSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsVision"].Value is DBNull)) { ViewSoumissionMec.lblTempsInstallationSoum.Text = rstProjSoum.Fields["TempsVision"].Value; } else { ViewSoumissionMec.lblTempsInstallationSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsTest"].Value is DBNull)) { ViewSoumissionMec.lblTempsFormationSoum.Text = rstProjSoum.Fields["TempsTest"].Value; } else { ViewSoumissionMec.lblTempsFormationSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsInstallation"].Value is DBNull)) { ViewSoumissionMec.lblTempsGestionSoum.Text = rstProjSoum.Fields["TempsInstallation"].Value; } else { ViewSoumissionMec.lblTempsGestionSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsMiseService"].Value is DBNull)) { ViewSoumissionMec.lblTempsShippingSoum.Text = rstProjSoum.Fields["TempsMiseService"].Value; } else { ViewSoumissionMec.lblTempsShippingSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsFormation"].Value is DBNull)) { ViewSoumissionMec.lblTempsFormationSoum.Text = rstProjSoum.Fields["TempsFormation"].Value; } else { ViewSoumissionMec.lblTempsFormationSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsGestion"].Value is DBNull)) { ViewSoumissionMec.lblTempsGestionSoum.Text = rstProjSoum.Fields["TempsGestion"].Value; } else { ViewSoumissionMec.lblTempsGestionSoum.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsShipping"].Value is DBNull)) { ViewSoumissionMec.lblTempsShippingSoum.Text = rstProjSoum.Fields["TempsShipping"].Value; } else { ViewSoumissionMec.lblTempsShippingSoum.Text = "0"; }
                if (IsNumeric(rstProjSoum.Fields["TempsDessin"].Value)) { dblTempsDessin = (double)rstProjSoum.Fields["TempsDessin"].Value; } else { dblTempsDessin = 0d; }
                if (IsNumeric(sTempsFabrication)) { dblTempsFabrication = double.Parse(sTempsFabrication); } else { dblTempsFabrication = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsAssemblage"].Value)) { dblTempsAssemblage = (double)rstProjSoum.Fields["TempsAssemblage"].Value; } else { dblTempsAssemblage = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsProgInterface"].Value)) { dblTempsProgInterface = (double)rstProjSoum.Fields["TempsProgInterface"].Value; } else { dblTempsProgInterface = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsProgAutomate"].Value)) { dblTempsProgAutomate = (double)rstProjSoum.Fields["TempsProgAutomate"].Value; } else { dblTempsProgAutomate = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsProgRobot"].Value)) { dblTempsProgRobot = (double)rstProjSoum.Fields["TempsProgRobot"].Value; } else { dblTempsProgRobot = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsVision"].Value)) { dblTempsVision = (double)rstProjSoum.Fields["TempsVision"].Value; } else { dblTempsVision = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsTest"].Value)) { dblTempsTest = (double)rstProjSoum.Fields["TempsTest"].Value; } else { dblTempsTest = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsInstallation"].Value)) { dblTempsInstallation = (double)rstProjSoum.Fields["TempsInstallation"].Value; } else { dblTempsInstallation = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsMiseService"].Value)) { dblTempsMiseService = (double)rstProjSoum.Fields["TempsMiseService"].Value; } else { dblTempsMiseService = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsFormation"].Value)) { dblTempsFormation = (double)rstProjSoum.Fields["TempsFormation"].Value; } else { dblTempsFormation = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsGestion"].Value)) { dblTempsGestion = (double)rstProjSoum.Fields["TempsGestion"].Value; } else { dblTempsGestion = 0d; }
                if (IsNumeric(rstProjSoum.Fields["TempsShipping"].Value)) { dblTempsShipping = (double)rstProjSoum.Fields["TempsShipping"].Value; } else { dblTempsShipping = 0d; }
                dblTotalTemps = dblTempsDessin + dblTempsFabrication + dblTempsAssemblage + dblTempsProgInterface + dblTempsProgAutomate + dblTempsProgRobot + dblTempsVision + dblTempsTest + dblTempsInstallation + dblTempsMiseService + dblTempsFormation + dblTempsGestion + dblTempsShipping; ViewSoumissionMec.lblTotalTempsRHSoum.Text = dblTotalTemps.ToString()
;
                CalculerTempsReelsImpression(rstProjSoum.Fields["IDProjet"].Value);
                //Autres frais
                if (!(rstProjSoum.Fields["NbrePersonne"].Value is DBNull)) { ViewSoumissionMec.lblNbrePersonne.Text = rstProjSoum.Fields["NbrePersonne"].Value; } else { ViewSoumissionMec.lblNbrePersonne.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsHebergement"].Value is DBNull)) { ViewSoumissionMec.lblTempsHebergement.Text = rstProjSoum.Fields["TempsHebergement"].Value; } else { ViewSoumissionMec.lblTempsHebergement.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxHebergement1"].Value is DBNull)) { ViewSoumissionMec.lblTauxHebergement1.Text = rstProjSoum.Fields["TauxHebergement1"].Value; } else { ViewSoumissionMec.lblTauxHebergement1.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxHebergement2"].Value is DBNull)) { ViewSoumissionMec.lblTauxHebergement2.Text = rstProjSoum.Fields["TauxHebergement2"].Value; } else { ViewSoumissionMec.lblTauxHebergement2.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsRepas"].Value is DBNull)) { ViewSoumissionMec.lblTempsRepas.Text = rstProjSoum.Fields["TempsRepas"].Value; } else { ViewSoumissionMec.lblTempsRepas.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxRepas"].Value is DBNull)) { ViewSoumissionMec.lblTauxRepas.Text = rstProjSoum.Fields["TauxRepas"].Value; } else { ViewSoumissionMec.lblTauxRepas.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsTransport"].Value is DBNull)) { ViewSoumissionMec.lblTempsTransport.Text = rstProjSoum.Fields["TempsTransport"].Value; } else { ViewSoumissionMec.lblTempsTransport.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxTransport"].Value is DBNull)) { ViewSoumissionMec.lblTauxTransport.Text = rstProjSoum.Fields["TauxTransport"].Value; } else { ViewSoumissionMec.lblTauxTransport.Text = "0"; }
                if (!(rstProjSoum.Fields["TempsUniteMobile"].Value is DBNull)) { ViewSoumissionMec.lblTempsUniteMobile.Text = rstProjSoum.Fields["TempsUniteMobile"].Value; } else { ViewSoumissionMec.lblTempsUniteMobile.Text = "0"; }
                if (!(rstProjSoum.Fields["TauxUniteMobile"].Value is DBNull)) { ViewSoumissionMec.lblTauxUniteMobile.Text = rstProjSoum.Fields["TauxUniteMobile"].Value; } else { ViewSoumissionMec.lblTauxUniteMobile.Text = "0"; }
                if (!(rstProjSoum.Fields["PrixEmballage"].Value is DBNull)) { ViewSoumissionMec.lblPrixEmballage.Text = rstProjSoum.Fields["PrixEmballage"].Value; } else { ViewSoumissionMec.lblPrixEmballage.Text = "0"; }
                ViewSoumissionMec.lblPrixManuel.Text = rstProjSoum.Fields["Total_Manuel"].Value;
                ViewSoumissionMec.lblTotalPieceAR.Text = sTotalPiece + "$";
                ViewSoumissionMec.lblImprevue.Text = rstProjSoum.Fields["imprevue"].Value;
                ViewSoumissionMec.lblImprevueAR.Text = sImprevue + "$";
                ViewSoumissionMec.lblTotalTempsAR.Text = sTotalTemps + "$";
                ViewSoumissionMec.lblCommission.Text = rstProjSoum.Fields["commission"].Value;
                ViewSoumissionMec.lblcommissionAR.Text = sCommission + "$";
                ViewSoumissionMec.lblGrandTotalAR.Text = sPrixTotal + "$";
                ViewSoumissionMec.lblProfit.Text = rstProjSoum.Fields["profit"].Value * 100;
                ViewSoumissionMec.lblTotalProfit.Text = sProfit + "$";
                dblTotalHebergement = (double)rstProjSoum.Fields["TotalHebergement"].Value;
                dblTotalRepas = (double)rstProjSoum.Fields["TotalRepas"].Value;
                if (!(rstProjSoum.Fields["TempsTransport"].Value is DBNull) & !(rstProjSoum.Fields["TauxTransport"].Value is DBNull))
                {
                    dblTotalTransport = (double)rstProjSoum.Fields["TempsTransport"].Value * (double)rstProjSoum.Fields["TauxTransport"].Value;
                }
                else
                {
                    dblTotalTransport = 0d;
                }
                if (!(rstProjSoum.Fields["TempsUniteMobile"].Value is DBNull) & !(rstProjSoum.Fields["TauxUniteMobile"].Value is DBNull))
                {
                    dblTotalUniteMobile = (double)rstProjSoum.Fields["TempsUniteMobile"].Value * (double)rstProjSoum.Fields["TauxUniteMobile"].Value;
                }
                else { dblTotalUniteMobile = 0d; }
                if (!(rstProjSoum.Fields["PrixEmballage"].Value is DBNull)) { dblPrixEmballage = double.Parse(Strings.Replace(rstProjSoum.Fields["PrixEmballage"].Value, ".", ",")); } else { dblPrixEmballage = 0d; }
                dblTotalReste = dblTotalHebergement + dblTotalRepas + dblTotalTransport + dblTotalUniteMobile + dblPrixEmballage;
                dblTotalAutre = dblTotalReste + (double)rstProjSoum.Fields["total_manuel"].Value;
                ViewSoumissionMec.lblAutre.Text = dblTotalAutre.ToString() + "$";
                Form f = new InterfaceWeb(" ViewSoumissionMec?");
                f.Icon = ActiveForm.Icon;
                f.ShowDialog();
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ImprimerProjSoum", ex);
            }
        }
        //Impression de la feuille de la liste des pièces
        private void ImprimerListePiecesFacturation(ADODB.Recordset rstProjSoum, string sNoFacture)
        {
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstTemp;
                ADODB.Recordset rstImpListePiece;
                string sOrdreSection;
                int XPiece = 0;
                var sSousSection = default(string);
                string sSousSectionRS;
                string sSection;
                string sNoProjet;
                string sNoSoumission;
                rstPiece = new Recordset();
                rstTemp = new Recordset();
                rstImpListePiece = new Recordset();
                UpdateSQL("DELETE FROM impression_listepiece");
                XPiece = 1;
                Cursor.Current = Cursors.WaitCursor;
                rstImpListePiece.Open("SELECT * FROM impression_listepiece", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                sOrdreSection = string.Empty;
                sNoProjet = rstProjSoum.Fields["IDProjet"].Value;
                sNoSoumission = rstProjSoum.Fields["IDSoumission"].Value;
                rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND Type = 'E' AND Facturation = '" + sNoFacture + "' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstPiece.EOF)
                {
                    if (rstPiece.Fields[".Visible"].Value == true)
                    {
                        sSousSectionRS = rstPiece.Fields["SousSection"].Value;
                        if ((sSousSectionRS ?? "") == S_PAS_SOUS_SECTION) { sSousSectionRS = " "; }
                        if (sOrdreSection != rstPiece.Fields["OrdreSection"].Value)
                        {
                            if (m_eLangage == EnumLangage.ANGLAIS)
                            {
                                sSection = "NomSectionEN";
                            }
                            else
                            {
                                sSection = "NomSectionFR";
                            }
                            rstTemp.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstPiece.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            rstImpListePiece.AddNew();
                            rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                            rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                            if (!(rstTemp.Fields[sSection].Value is DBNull))
                            {
                                rstImpListePiece.Fields["NomSection"].Value = rstTemp.Fields[sSection].Value;
                            }
                            else
                            {
                                rstImpListePiece.Fields["NomSection"].Value = " ";
                            }
                            rstImpListePiece.Update();
                            XPiece++;
                            rstTemp.Close(); sSousSection = rstPiece.Fields["SousSection"].Value;
                            if ((sSousSection ?? "") == S_PAS_SOUS_SECTION) { sSousSection = " "; }
                            rstImpListePiece.AddNew(); rstImpListePiece.Fields["NoLigne"].Value = XPiece; rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission; rstImpListePiece.Fields["SousSection"].Value = sSousSection; rstImpListePiece.Update(); XPiece++;
                        }
                        else
                        if ((sSousSection ?? "") != (sSousSectionRS ?? ""))
                        {
                            sSousSection = sSousSectionRS;
                            rstImpListePiece.AddNew();
                            rstImpListePiece.Fields["NoLigne"].Value = XPiece;
                            rstImpListePiece.Fields["IDSoumission"].Value = sNoSoumission;
                            rstImpListePiece.Fields["NumItem"].Value = rstPiece.Fields["NumItem"].Value;
                            rstImpListePiece.Fields["Qté"].Value = rstPiece.Fields["Qté"].Value;
                            if (m_eLangage == EnumLangage.ANGLAIS) { rstImpListePiece.Fields["Description"].Value = rstPiece.Fields["Desc_EN"].Value; } else { rstImpListePiece.Fields["Description"].Value = rstPiece.Fields["Desc_FR"].Value; }
                            rstImpListePiece.Fields["Manufact"].Value = rstPiece.Fields["Manufact"].Value;
                            rstImpListePiece.Update();
                            XPiece++;
                        }
                        rstPiece.MoveNext();
                    }
                    rstImpListePiece.Close();
                    rstImpListePiece.Open("SELECT * FROM impression_Listepiece WHERE IDSoumission = '" + sNoSoumission + "' ORDER BY noligne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ViewListePiece.DataSource = rstImpListePiece;
                    TraduireImpressionListePiece();
                    ViewListePiece.lblTitreNoFacture.Visible = true;
                    ViewListePiece.lblNoFacture.Visible = true;
                    ViewListePiece.lblNoFacture.Text = sNoFacture;
                    ViewListePiece.lblDate.Text = ConvertDate(DateTime.Today);
                    ViewListePiece.lblProjet.Text = sNoProjet;
                    ViewListePiece.lblsoumission.Text = sNoSoumission;
                    ViewListePiece.lbldescription.Text = rstProjSoum.Fields["Description"].Value;
                    rstTemp.Open("SELECT NomClient FROM Client WHERE IDClient = " + rstProjSoum.Fields["IDClient"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ViewListePiece.lblClient.Text = rstTemp.Fields["NomClient"].Value;
                    rstTemp.Close();
                    rstTemp.Open("SELECT NomContact FROM Contact WHERE IDContact = " + rstProjSoum.Fields["IDContact"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    ViewListePiece.lblContact.Text = rstTemp.Fields["nomcontact"].Value;
                    rstTemp.Close();
                    ViewListePiece.Orientation = false;
                    Form f = new InterfaceWeb("ViewListePiece?");
                    f.Icon = ActiveForm.Icon;
                    f.Show();
                    rstImpListePiece.Close();
                    rstImpListePiece = default;
                    rstTemp = default;
                    Cursor.Current = Cursors.Default;
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ImprimerListePieces", ex);
            }
        }
        private void TraduireImpressionListePiece()
        {
            try
            {
                if (m_eLangage == EnumLangage.ANGLAIS)
                {
                    ViewListePiece.lblTitreProjet.Text = "Project:";
                    ViewListePiece.lblTitreSoumission.Text = "Quote:";
                    ViewListePiece.lblTitreQuantite.Text = "Qty";
                    ViewListePiece.lblTitreNoItem.Text = "Item No.";
                    ViewListePiece.lblTitreManufacturier.Text = "Manufacturer";
                }
                else
                {
                    ViewListePiece.lblTitreProjet.Text = "Projet:";
                    ViewListePiece.lblTitreSoumission.Text = "Soumission:";
                    ViewListePiece.lblTitreQuantite.Text = "Qté";
                    ViewListePiece.lblTitreNoItem.Text = "No. Item";
                    ViewListePiece.lblTitreManufacturier.Text = "Manufacturier";
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "TraduireImpressionListePiece", ex);
            }
        }
        private void TraduireImpressionSoumission()
        {
            try
            {
                if (m_eLangage == EnumLangage.ANGLAIS)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        ViewSoumissionMec.lblGrosTitre.Text = "Mectrical Project";
                    }
                    else
                    {
                        ViewSoumissionMec.lblGrosTitre.Text = "Mectrical Quote";
                    }
                    ViewSoumissionMec.lblTitreProjet.Text = "Project :";
                    ViewSoumissionMec.lblTitreSoumission.Text = "Quote :";
                    ViewSoumissionMec.lblTitreClient.Text = "Client :";
                    ViewSoumissionMec.lblTitreContact.Text = "Contact :";
                    ViewSoumissionMec.lblTitreQuantite.Text = "Qty";
                    ViewSoumissionMec.lblTitreNoItem.Text = "Item No.";
                    ViewSoumissionMec.lblTitreDescription.Text = "Description";
                    ViewSoumissionMec.lblTitreManufacturier.Text = "Manufacturer";
                    ViewSoumissionMec.lblTitreCoutant.Text = "Cost";
                    ViewSoumissionMec.lblTitreFournisseur.Text = "Supplier";
                    ViewSoumissionMec.lblTitreTotal.Text = "Total";
                    ViewSoumissionMec.lbl_DateCommande.Text = "Order Date";
                    ViewSoumissionMec.lbl_DateReception.Text = "Reception Date";
                    ViewSoumissionMec.lblTitreConceptionDessin.Text = "Drafting :";
                    ViewSoumissionMec.lblTitreCoupePreparation.Text = "Manufacturing :";
                    ViewSoumissionMec.lblTitreMachinage.Text = "Assembling :";
                    ViewSoumissionMec.lblTitreVision.Text = "Vision :";
                    ViewSoumissionMec.lblTitreTestFinal.Text = "Test :";
                    ViewSoumissionMec.lblTitreInstallation.Text = "Installation :";
                    ViewSoumissionMec.lblTitreMiseService.Text = "Activation :";
                    ViewSoumissionMec.lblTitreFormation.Text = "Training :";
                    ViewSoumissionMec.lblTitreGestion.Text = "Project management :";
                    ViewSoumissionMec.lblTitreShipping.Text = "Shipping :";
                    ViewSoumissionMec.label6.Text = "Rate / Hours";
                    ViewSoumissionMec.label7.Text = "Time (Hour)";
                    ViewSoumissionMec.lblTitreTotalPiece.Text = "Parts Total:";
                    ViewSoumissionMec.lblTitreImprevue.Text = "Unforeseen:";
                    ViewSoumissionMec.lblTitreTotalTemps.Text = "Time Total:";
                    ViewSoumissionMec.lblTitreGrandTotal.Text = "Final Price:";
                    ViewSoumissionMec.lblNoPage.Text = "Page %p of %P";
                    ViewSoumissionMec.lblTitrePrixReception.Text = "Receiving up to date";
                    ViewSoumissionMec.lblTitrePrixSoumission.Text = "Quote Price";
                    ViewSoumissionMec.lblTitreForfait.Text = "Package Deal";
                }
                else
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        ViewSoumissionMec.lblGrosTitre.Text = "Projet Électrique";
                    }
                    else
                    {
                        ViewSoumissionMec.lblGrosTitre.Text = "Soumission Électrique";
                    }
                    ViewSoumissionMec.lblTitreProjet.Text = "Projet:";
                    ViewSoumissionMec.lblTitreSoumission.Text = "Soumission:";
                    ViewSoumissionMec.lblTitreClient.Text = "Client:";
                    ViewSoumissionMec.lblTitreContact.Text = "Contact:";
                    ViewSoumissionMec.lblTitreQuantite.Text = "Qté";
                    ViewSoumissionMec.lblTitreNoItem.Text = "No. Item";
                    ViewSoumissionMec.lblTitreDescription.Text = "Description";
                    ViewSoumissionMec.lblTitreManufacturier.Text = "Manufacturier";
                    ViewSoumissionMec.lblTitreCoutant.Text = "Coûtant";
                    ViewSoumissionMec.lblTitreFournisseur.Text = "Fournisseur";
                    ViewSoumissionMec.lblTitreTotal.Text = "Total";
                    ViewSoumissionMec.lbl_DateCommande.Text = "Date commandé";
                    ViewSoumissionMec.lbl_DateReception.Text = "Date reçu";
                    ViewSoumissionMec.lblTitreConceptionDessin.Text = "Dessin :";
                    ViewSoumissionMec.lblTitreCoupePreparation.Text = "Fabrication :";
                    ViewSoumissionMec.lblTitreMachinage.Text = "Assemblage :";
                    ViewSoumissionMec.lblTitreVision.Text = "Vision :";
                    ViewSoumissionMec.lblTitreTestFinal.Text = "Test :";
                    ViewSoumissionMec.lblTitreInstallation.Text = "Installation :";
                    ViewSoumissionMec.lblTitreMiseService.Text = "Mise en service :";
                    ViewSoumissionMec.lblTitreFormation.Text = "Formation du personnel :";
                    ViewSoumissionMec.lblTitreGestion.Text = "Gestion du projet :";
                    ViewSoumissionMec.lblTitreShipping.Text = "Expédition :";
                    ViewSoumissionMec.label6.Text = "Taux Horaire";
                    ViewSoumissionMec.label7.Text = "Temps (Heure)";
                    ViewSoumissionMec.lblTitreTotalPiece.Text = "Total pièce:";
                    ViewSoumissionMec.lblTitreImprevue.Text = "Imprévue:";
                    ViewSoumissionMec.lblTitreTotalTemps.Text = "Total temps:";
                    ViewSoumissionMec.lblTitreGrandTotal.Text = "Grand total:";
                    ViewSoumissionMec.lblNoPage.Text = "Page %p de %P";
                    ViewSoumissionMec.lblTitrePrixReception.Text = "Réception jusqu'à maintenant";
                    ViewSoumissionMec.lblTitrePrixSoumission.Text = "$ Soumission";
                    ViewSoumissionMec.lblTitreForfait.Text = "Forfait";
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "TraduireImpressionSoumission", ex);
            }
        }
        //Modintier une soumission
        private void cmdModintier_Click1(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                var sUser = default(string);
                m_collQteSupp = new List<String>();
                m_collDateSupp = new List<String>();
                m_collHeureSupp = new List<String>();
                m_collNoItemSupp = new List<String>();
                if (cmbProjSoum.SelectedIndex > -1)
                {
                    if (Droite(txtNoProjSoum.Text, 2) == "99")
                    {
                        if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet ne peut pas être modintié!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission ne peut pas être modintiée!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        return;
                    }
                    if (m_eType == EnumType.TYPE_SOUMISSION)
                    {
                        if (VerintierSiDejaProjet() == true) { MessageBox.Show("Vous ne pouvez pas modintier cette soumission, le projet a déjà été créé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                    }
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum ='" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjSoum.Fields["Ouvert"].Value == false | rstProjSoum.Fields["Verrouillé"].Value == true)
                    {
                        if (rstProjSoum.Fields["Ouvert"].Value == false)
                        {
                            if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet est fermé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission est fermée!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        }
                        else
                        if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet est verrouillé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission est verrouillée!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                        return;
                    }
                    rstProjSoum.Close();
                    rstProjSoum = default;
                    if (VerintierSiOuvert(ref sUser) == false)
                    {
                        Cursor.Current = Cursors.WaitCursor;
                        BarrerChamps(false);
                        m_sAncienProjSoum = txtNoProjSoum.Text;
                        m_bModeAjout = false;
                        m_bModeAffichage = false;
                        lvwSoumission.Height = lvwSoumission.Height / 2;
                        lvwSoumission.Top = lvwPieces.Top + lvwPieces.Height + lvwSoumission.Height;
                        RemplirProjSoum();
                        AfficherControles(EnumMode.MODE_AJOUT_MODIF);
                        UpdateOrdre();
                        CalculerPrix();
                        lvwSoumission.Refresh();
                        OuvrirProjSoum(true);
                        Cursor.Current = Cursors.Default;
                    }
                    else
                    if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet est en Modification par " + sUser + "!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission est en Modification par " + sUser + "!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdModintier_Click", ex);
            }
        }
        private void cmdsupprimer_Click(object eventSender, EventArgs e)
        {
            try
            {
                DialogResult iReponse;
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstProjet;
                string sSoumission;
                var sUser = default(string);
                int iExtension;
                if (cmbProjSoum.Items.Count > 0)
                {
                    if (Droite(txtNoProjSoum.Text, 2) == "99")
                    {
                        if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Vous ne pouvez pas supprimer ce projet!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Vous ne pouvez pas supprimer cette soumission!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        return;
                    }
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjSoum.Fields["Ouvert"].Value == false | rstProjSoum.Fields["Verrouillé"].Value == true)
                    {
                        if (rstProjSoum.Fields["Ouvert"].Value == false)
                        {
                            if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet est fermé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission est fermée!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        }
                        else
                        if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet est verrouillé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission est verrouillée!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                        return;
                    }
                    rstProjSoum.Close();
                    rstProjSoum = default;
                    if (m_eType == EnumType.TYPE_SOUMISSION)
                    {
                        if (VerintierSiDejaProjet() == true) { MessageBox.Show("Vous ne pouvez pas supprimer cette soumission, le projet a déjà été créé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                    }
                    if (VerintierSiOuvert(ref sUser) == false)
                    {
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            iReponse = MessageBox.Show("Voulez-vous vraiment EFFACER LE PROJET " + txtNoProjSoum.Text + "?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (iReponse == DialogResult.Yes)
                            {
                                Form f = new ValiderSuppression(true, txtNoProjSoum.Text, this);
                                f.Show();
                                if (m_bValide == true) { iReponse = DialogResult.Yes; } else { iReponse = DialogResult.No; }
                            }
                        }
                        else
                        {
                            iReponse = MessageBox.Show("Voulez-vous vraiment EFFACER LA SOUMISSION " + txtNoProjSoum.Text + "?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (iReponse == DialogResult.Yes)
                            {
                                Form f = new ValiderSuppression(false, txtNoProjSoum.Text, this);
                                if (m_bValide == true) { iReponse = DialogResult.Yes; } else { iReponse = DialogResult.No; }
                            }
                        }
                        if (iReponse == DialogResult.Yes)
                        {
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                rstProjet = new Recordset(); rstProjet.Open("SELECT IDSoumission FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                                if (!(rstProjet.Fields["IDSoumission"].Value is DBNull))
                                {
                                    sSoumission = rstProjet.Fields["IDSoumission"].Value;
                                }
                                else
                                {
                                    sSoumission = string.Empty;
                                }
                                rstProjet.Close();
                                rstProjet = default;
                                UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + txtNoProjSoum.Text + "' AND Type = 'E'");
                                if (IsNumeric(Droite(txtNoProjSoum.Text, 2)))
                                {
                                    iExtension = int.Parse(Droite(txtNoProjSoum.Text, 2));
                                }
                                else { iExtension = 0; }
                                if (iExtension >= 60 & iExtension <= 79 | iExtension >= 80 & iExtension <= 98) { rstProjSoum = new Recordset(); rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly); UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + rstProjSoum.Fields["LiaisonChargeable"].Value + "' AND Provenance = '" + iExtension + "'"); CalculerTotalRecordset(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + rstProjSoum.Fields["LiaisonChargeable"].Value); rstProjSoum.Close(); rstProjSoum = default; }
                                UpdateSQL("DELETE FROM Projet_Modint WHERE IDProjet = '" + txtNoProjSoum.Text + "' AND Type = 'E'");
                                UpdateSQL("DELETE FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'");
                                UpdateSQL("DELETE FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'"); rstProjSoum = new Recordset(); rstProjSoum.Open("SELECT Ouvert FROM ProjSoum WHERE IDProjSoum = '" + sSoumission + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (!rstProjSoum.EOF) { rstProjSoum.Fields["Ouvert"].Value = true; rstProjSoum.Update(); }
                                rstProjSoum.Close(); rstProjSoum = default;
                            }
                            else
                            {
                                UpdateSQL("DELETE FROM Soumission_Pieces WHERE IDSoumission = '" + txtNoProjSoum.Text + "' AND Type = 'E'");
                                UpdateSQL("DELETE FROM Soumission_Modint WHERE IDSoumission = '" + txtNoProjSoum.Text + "' AND Type = 'E'");
                                UpdateSQL("DELETE FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'");
                                UpdateSQL("DELETE FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'");
                            }
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                RecreerProjetCumulatint();
                            }
                            else
                            {
                                RecreerSoumissionCumulatint();
                            }
                            AfficherProjSoum(string.Empty);
                        }
                    }
                    else
                    if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Ce projet est en Modification par " + sUser + "!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("Cette soumission est en Modification par " + sUser + "!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdSupprimer_Click", ex);
            }
        }
        private void FrmProjSoumMec_Load(object eventSender, EventArgs e)
        {
            try
            {
                m_eLangage = EnumLangage.FRANCAIS;
                cmdAnglaisFrancais.Text = "Anglais";
                cmbTri.SelectedIndex = I_CMB_PIECE;
                ActiverBoutonsGroupe();
                m_eMode = EnumMode.MODE_INACTIF;
                RemplirComboClients(string.Empty);
                RemplirComboSections();
                RemplirComboCategoriesPieces();
                cmbOuvertFerme.SelectedIndex = I_CMB_OUVERT;
                if (m_eType == EnumType.TYPE_PROJET) { cmbChoix.SelectedIndex = I_IDX_PROJET; } else { cmbChoix.SelectedIndex = I_IDX_SOUMISSION; }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "Form_Load", ex);
            }
        }
        private void RemplirColonnes()
        {
            try
            {
                bool bModint;
                var bCacherPrix = default(bool);
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    if (m_bModintProj == false)
                    {
                        bCacherPrix = true;
                    }
                }
                else
                if (m_bModintSoum == false)
                {
                    bCacherPrix = true;
                }
                if (bCacherPrix == true)
                {
                    m_bDroitPrix = false;
                    if (lvwSoumission.Columns.Count == 12) { return; }
                }
                else
                {
                    m_bDroitPrix = true;
                    if (lvwSoumission.Columns.Count == 18) { return; }
                }
                lvwSoumission.Columns.Clear();
                lvwSoumission.Columns.Add("", "Qté", 50);
                lvwSoumission.Columns.Add("", "No. Item", 100);
                lvwSoumission.Columns.Add("", "Description", 250);
                lvwSoumission.Columns.Add("", "Manufacturier", 250);
                if (bCacherPrix == false)
                {
                    lvwSoumission.Columns.Add("Prix listé", 75, HorizontalAlignment.Right);
                    lvwSoumission.Columns.Add("Escompte", 75, HorizontalAlignment.Right);
                    lvwSoumission.Columns.Add("Prix net", 75, HorizontalAlignment.Right);
                }
                lvwSoumission.Columns.Add("Distributeur", 175, HorizontalAlignment.Left);
                lvwSoumission.Columns.Add("Temps", 75, HorizontalAlignment.Right);
                lvwSoumission.Columns.Add("Montage", 75, HorizontalAlignment.Right);
                if (bCacherPrix == false)
                {
                    lvwSoumission.Columns.Add("TOTAL", 75, HorizontalAlignment.Right);
                    lvwSoumission.Columns.Add("Profit", 75, HorizontalAlignment.Right);
                }
                lvwSoumission.Columns.Add("Commentaire", 275, HorizontalAlignment.Right);
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    lvwSoumission.Columns.Add("ID", 25, HorizontalAlignment.Right);
                    if (bCacherPrix == false)
                    {
                        lvwSoumission.Columns.Add("Facturation", 175, HorizontalAlignment.Right);
                    }
                    lvwSoumission.Columns.Add("Date Commande", 75, HorizontalAlignment.Right);
                    lvwSoumission.Columns.Add("Date Requise", 75, HorizontalAlignment.Right);
                    lvwSoumission.Columns.Add("Commandé par", 75, HorizontalAlignment.Right);
                    lvwSoumission.Columns.Add("No Séquentiel", 75, HorizontalAlignment.Right);
                }
                lvwSoumission.Columns.Add("Provenance", 175, HorizontalAlignment.Left);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirColonnes", ex);
            }
        }
        private void BarrerChamps(bool bBarrer)
        {
            try
            {
                txtProjet.ReadOnly = bBarrer;
                txtNbreManuel.ReadOnly = bBarrer;
                txtPrixManuel.ReadOnly = bBarrer;
                picApprob.Enabled = !bBarrer;
                txtCheminPhotos.ReadOnly = bBarrer;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "BarrerChamps", ex);
            }
        }
        private void ViderChamps()
        {
            try
            {
                txtClient.Text = string.Empty;
                txtContact.Text = string.Empty;
                txtProjet.Text = string.Empty;
                txtNbreManuel.Text = 0.ToString();
                txtPrixManuel.Text = 0.ToString();
                txtTransport.Text = string.Empty;
                txtPrixReception.Text = "0$";
                txtPrixSoumission.Text = "0$";
                chkCSA.CheckState = CheckState.Unchecked;
                chkCUL.CheckState = CheckState.Unchecked;
                chkUL.CheckState = CheckState.Unchecked;
                chkCUR.CheckState = CheckState.Unchecked;
                chkUR.CheckState = CheckState.Unchecked;
                chkCE.CheckState = CheckState.Unchecked;
                txtPrixTotal.Text = 0.ToString();
                txtProfit.Text = 0.ToString();
                txtDelais.Text = string.Empty;
                txtCommission.Text = 0.ToString();
                txtNoSoumission.Text = string.Empty;
                txtCheminPhotos.Text = string.Empty;
                txtForfait.Text = string.Empty;
                lblForfaitInitiale.Text = string.Empty;
                cmbTransport.SelectedIndex = I_TRANS_FAB_GRANBY;
                cmbClient.SelectedIndex = -1;
                m_bSansTemps = false;
                lblPasTemps.Visible = false;
                tmrTemps.Enabled = false;
                lvwSoumission.Items.Clear();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ViderChamps", ex);
            }
        }
        private void RemplirComboProjSoum(string sNoProjSoum)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                cmbProjSoum.Items.Clear();
                rstProjSoum = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    if (cmbOuvertFerme.SelectedIndex == I_CMB_OUVERT)
                    {
                        rstProjSoum.Open("SELECT IDProjet FROM ProjetMec " +
                            "INNER JOIN ProjSoum ON ProjetMec.IDProjet = ProjSoum.IDProjSoum " +
                            "WHERE Ouvert = 1 ORDER BY IDProjet DESC", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    else { rstProjSoum.Open("SELECT IDProjet FROM ProjetMec ORDER BY IDProjet DESC", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); }
                }
                else
                if (cmbOuvertFerme.SelectedIndex == I_CMB_OUVERT)
                {
                    rstProjSoum.Open("SELECT IDSoumission FROM SoumissionMec INNER JOIN ProjSoum ON SoumissionMec.IDSoumission = ProjSoum.IDProjSoum " +
                        "WHERE Ouvert = 1 ORDER BY IDSoumission DESC", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstProjSoum.Open("SELECT IDSoumission FROM SoumissionMec ORDER BY IDSoumission DESC", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                while (!rstProjSoum.EOF)
                {
                    if (m_eType == EnumType.TYPE_PROJET) { cmbProjSoum.Items.Add(rstProjSoum.Fields["IDProjet"].Value); } else { cmbProjSoum.Items.Add(rstProjSoum.Fields["IDSoumission"].Value); }
                    rstProjSoum.MoveNext();
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                if (cmbProjSoum.Items.Count > 0)
                {
                    if (!string.IsNullOrEmpty(sNoProjSoum))
                    {
                        RechercherProjSoum(sNoProjSoum);
                    }
                    else
                    {
                        cmbProjSoum.SelectedIndex = 0;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirComboProjSoum", ex);
            }
        }
        private void CalculerPrixReel(string sNoItem)
        {
            try
            {
                ADODB.Recordset rstPieceFRS;
                ADODB.Recordset rstConfig;
                var sPrixCalcul = default(string);
                string sTauxUSA;
                string sTauxSPA;
                rstConfig = new Recordset();
                rstConfig.Open("SELECT TauxAmericain, TauxEspagnol FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                sTauxUSA = rstConfig.Fields["TauxAmericain"].Value;
                sTauxSPA = rstConfig.Fields["TauxEspagnol"].Value;
                rstConfig.Close();
                rstConfig = default;
                rstPieceFRS = new Recordset();
                rstPieceFRS.CursorLocation = CursorLocationEnum.adUseServer;
                rstPieceFRS.Open("SELECT PrixReel, PRIX_NET, PRIX_SP, DeviseMonétaire FROM PiecesFRS WHERE PIECE = '" + Strings.Replace(sNoItem, "'", "''") + "' AND Type = 'E'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstPieceFRS.EOF)
                {
                    if (rstPieceFRS.Fields["PRIX_NET"].Value != string.Empty) { sPrixCalcul = rstPieceFRS.Fields["PRIX_NET"].Value; }
                    else
                    if (rstPieceFRS.Fields["PRIX_SP"].Value != string.Empty) { sPrixCalcul = rstPieceFRS.Fields["PRIX_SP"].Value; }
                    sPrixCalcul = Strings.Replace(sPrixCalcul, ".", ",");
                    if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "USA") { rstPieceFRS.Fields["PrixReel"].Value = Math.Round(double.Parse(sPrixCalcul) / double.Parse(sTauxUSA), 4).ToString(); }
                    else
                    if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "SPA") { rstPieceFRS.Fields["PrixReel"].Value.Text = Math.Round(double.Parse(sPrixCalcul) / double.Parse(sTauxSPA), 4).ToString(); } else { rstPieceFRS.Fields["PrixReel"].Value = sPrixCalcul; }
                    rstPieceFRS.Update();
                    rstPieceFRS.MoveNext();
                }
                rstPieceFRS.Close();
                rstPieceFRS = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerPrixReel", ex);
            }
        }
        private void RemplirListViewFournisseur()
        {
            try
            {
                ADODB.Recordset rstPieceFRS;
                ADODB.Recordset rstContact;
                ADODB.Recordset rstFRS;
                ADODB.Recordset rstInv;
                ListViewItem itmFRS;
                int X;
                bool iNoClient;
                var bAjouterDP = default(bool);
                string sDevise;
                Color lColor;
                rstPieceFRS = new Recordset();
                rstContact = new Recordset();
                rstFRS = new Recordset();
                lvwFournisseur.Items.Clear();
                if (m_bPieceInutile == true | m_bChangementFRS == true) { CalculerPrixReel(Strings.Trim(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text)); }
                else
                if (m_bRecherchePiece == true)
                {
                    CalculerPrixReel(Strings.Trim(lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text));
                }
                else
                {
                    CalculerPrixReel(Strings.Trim(lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text));
                }
                rstFRS.Open("SELECT IDFRS FROM Fournisseur WHERE NomFournisseur = 'FOURNI PAR LE CLIENT'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                iNoClient = rstFRS.Fields["IDFRS"].Value;
                rstFRS.Close();
                rstFRS = default;
                if (m_bPieceInutile == true | m_bChangementFRS == true)
                {
                    rstPieceFRS.Open("SELECT PiecesFRS.*, Fournisseur.NomFournisseur FROM PiecesFRS " +
                    "INNER JOIN Fournisseur ON PiecesFRS.IDFRS = Fournisseur.IDFRS " +
                    "WHERE PIECE = '" + Strings.Trim(Strings.Replace(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text, "'", "''")) + "' AND Type = 'E' ORDER BY CDbl(PrixReel)", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                if (m_bRecherchePiece == true)
                {
                    rstPieceFRS.Open("SELECT PiecesFRS.*, Fournisseur.NomFournisseur FROM PiecesFRS " +
                        "INNER JOIN Fournisseur ON PiecesFRS.IDFRS = .IDFRS " +
                        "WHERE PIECE = '" + Strings.Trim(Strings.Replace(lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text, "'", "''")) + "' AND Type = 'E' ORDER BY CDbl(PrixReel)", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstPieceFRS.Open("SELECT PiecesFRS.*, Fournisseur.NomFournisseur FROM PiecesFRS " +
                        "INNER JOIN Fournisseur ON PiecesFRS.IDFRS = Fournisseur.IDFRS WHERE PIECE = '" + Strings.Trim(Strings.Replace(lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text, "'", "''")) + "' AND Type = 'E' ORDER BY CDbl(PrixReel)", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                while (!rstPieceFRS.EOF)
                {
                    if (m_bPieceInutile == true)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BRUN, false)))
                        {
                            if (rstPieceFRS.Fields["IDFRS"].Value == iNoClient)
                            {
                                rstPieceFRS.MoveNext();
                                if (rstPieceFRS.EOF) { break; }
                            }
                        }
                    }
                    if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "CAN")
                    {
                        sDevise = "CAN";
                        lColor = COLOR_NOIR;
                    }
                    else
                    if (rstPieceFRS.Fields["DeviseMonétaire"].Value == "USA")
                    {
                        sDevise = "USA";
                        lColor = COLOR_BLEU;
                    }
                    else
                    {
                        sDevise = "SPA";
                        lColor = COLOR_BLEU;
                    }
                    itmFRS = lvwFournisseur.Items.Add(string.Empty);
                    if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_LIST) { itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmFRS.SubItems.Count > I_COL_FRS_ESCOMPTE) { itmFRS.SubItems[I_COL_FRS_ESCOMPTE].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_NET) { itmFRS.SubItems[I_COL_FRS_PRIX_NET].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_NET, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_SP) { itmFRS.SubItems[I_COL_FRS_PRIX_SP].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_SP, new ListViewItem.ListViewSubItem(null, " ")); }
                    itmFRS.Text = rstPieceFRS.Fields["NomFournisseur"].Value;
                    itmFRS.Tag = rstPieceFRS.Fields["IDFRS"].Value;
                    itmFRS.ForeColor = lColor;
                    if (!(rstPieceFRS.Fields["PERS_RESS"].Value is DBNull))
                    {
                        if (!string.IsNullOrEmpty(Strings.Trim(rstPieceFRS.Fields["PERS_RESS"].Value)))
                        {
                            rstContact.Open("SELECT NomContact FROM Contact WHERE IDContact = " + rstPieceFRS.Fields["PERS_RESS"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            if (!rstContact.EOF)
                            {
                                if (itmFRS.SubItems.Count > I_COL_FRS_PERS_RESS) { itmFRS.SubItems[I_COL_FRS_PERS_RESS].Text = rstContact.Fields["NomContact"].Value; } else { itmFRS.SubItems.Insert(I_COL_FRS_PERS_RESS, new ListViewItem.ListViewSubItem(null, rstContact.Fields["NomContact"].Value)); }
                                itmFRS.SubItems[I_COL_FRS_PERS_RESS].ForeColor = lColor;
                            }
                            rstContact.Close();
                        }
                    }
                    if (!(rstPieceFRS.Fields["Date"].Value is DBNull))
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_DATE) { itmFRS.SubItems[I_COL_FRS_DATE].Text = rstPieceFRS.Fields["Date"].Value; } else { itmFRS.SubItems.Insert(I_COL_FRS_DATE, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["Date"].Value)); }
                    }
                    else
                    if (itmFRS.SubItems.Count > I_COL_FRS_DATE) { itmFRS.SubItems[I_COL_FRS_DATE].Text = string.Empty; } else { itmFRS.SubItems.Insert(I_COL_FRS_DATE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                    itmFRS.SubItems[I_COL_FRS_DATE].ForeColor = lColor;
                    if (!(rstPieceFRS.Fields["Entrer_Par"].Value is DBNull))
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_ENTRER_PAR) { itmFRS.SubItems[I_COL_FRS_ENTRER_PAR].Text = rstPieceFRS.Fields["ENTRER_PAR"].Value; } else { itmFRS.SubItems.Insert(I_COL_FRS_ENTRER_PAR, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["ENTRER_PAR"].Value)); }
                    }
                    else
                    if (itmFRS.SubItems.Count > I_COL_FRS_ENTRER_PAR) { itmFRS.SubItems[I_COL_FRS_ENTRER_PAR].Text = string.Empty; } else { itmFRS.SubItems.Insert(I_COL_FRS_ENTRER_PAR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                    itmFRS.SubItems[I_COL_FRS_ENTRER_PAR].ForeColor = lColor;
                    if (!(rstPieceFRS.Fields["Valide"].Value is DBNull))
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_VALIDE) { itmFRS.SubItems[I_COL_FRS_VALIDE].Text = rstPieceFRS.Fields["Valide"].Value; } else { itmFRS.SubItems.Insert(I_COL_FRS_VALIDE, new ListViewItem.ListViewSubItem(null, rstPieceFRS.Fields["Valide"].Value)); }
                    }
                    else
                    if (itmFRS.SubItems.Count > I_COL_FRS_VALIDE) { itmFRS.SubItems[I_COL_FRS_VALIDE].Text = string.Empty; } else { itmFRS.SubItems.Insert(I_COL_FRS_VALIDE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                    itmFRS.SubItems[I_COL_FRS_VALIDE].ForeColor = lColor;
                    if (rstPieceFRS.Fields["PRIX_LIST"].Value != string.Empty)
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_LIST) { itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Text = Math.Round(double.Parse(Strings.Replace(rstPieceFRS.Fields["PRIX_LIST"].Value, ".", ",")), 4); } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(rstPieceFRS.Fields["PRIX_LIST"].Value, ".", ",")), 4))); }
                    }
                    itmFRS.SubItems[I_COL_FRS_PRIX_LIST].ForeColor = lColor;
                    if (rstPieceFRS.Fields["ESCOMPTE"].Value != string.Empty)
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_ESCOMPTE) { itmFRS.SubItems[I_COL_FRS_ESCOMPTE].Text = double.Parse(Strings.Replace(Strings.Replace(rstPieceFRS.Fields["ESCOMPTE"].Value, "_", string.Empty), ".", ",")) * 100d; } else { itmFRS.SubItems.Insert(I_COL_FRS_ESCOMPTE, new ListViewItem.ListViewSubItem(null, double.Parse(Strings.Replace(Strings.Replace(rstPieceFRS.Fields["ESCOMPTE"].Value, "_", string.Empty), ".", ",")) * 100d)); }
                    }
                    itmFRS.SubItems[I_COL_FRS_ESCOMPTE].ForeColor = lColor;
                    if (rstPieceFRS.Fields["PRIX_NET"].Value != string.Empty)
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_NET) { itmFRS.SubItems[I_COL_FRS_PRIX_NET].Text = Math.Round(double.Parse(Strings.Replace(rstPieceFRS.Fields["PRIX_NET"].Value, ".", ",")), 4); } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(rstPieceFRS.Fields["PRIX_NET"].Value, ".", ",")), 4))); }
                    }
                    itmFRS.SubItems[I_COL_FRS_PRIX_NET].ForeColor = lColor;
                    if (rstPieceFRS.Fields["PRIX_SP"].Value != string.Empty)
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_SP) { itmFRS.SubItems[I_COL_FRS_PRIX_SP].Text = Math.Round(rstPieceFRS.Fields["PRIX_SP"].Value, 4); } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_SP, new ListViewItem.ListViewSubItem(null, Math.Round(rstPieceFRS.Fields["PRIX_SP"].Value, 4))); }
                    }
                    itmFRS.SubItems[I_COL_FRS_PRIX_SP].ForeColor = lColor;
                    if (rstPieceFRS.Fields["QUOTER"].Value == true)
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_QUOTER) { itmFRS.SubItems[I_COL_FRS_QUOTER].Text = "Oui"; } else { itmFRS.SubItems.Insert(I_COL_FRS_QUOTER, new ListViewItem.ListViewSubItem(null, "Oui")); }
                    }
                    else
                    if (itmFRS.SubItems.Count > I_COL_FRS_QUOTER) { itmFRS.SubItems[I_COL_FRS_QUOTER].Text = "Non"; } else { itmFRS.SubItems.Insert(I_COL_FRS_QUOTER, new ListViewItem.ListViewSubItem(null, "Non")); }
                    itmFRS.SubItems[I_COL_FRS_QUOTER].ForeColor = lColor;
                    if (rstPieceFRS.Fields["IDFRS"].Value == 717)
                    {
                        rstInv = new Recordset();
                        rstInv.Open("SELECT * FROM InventaireMec WHERE TRIM(NoItem) = '" + Strings.Trim(rstPieceFRS.Fields["PIECE"].Value) + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        if (!rstInv.EOF)
                        {
                            if (!(rstInv.Fields["QuantitéStock"].Value is DBNull))
                            {
                                if (itmFRS.SubItems.Count > I_COL_FRS_STOCK) { itmFRS.SubItems[I_COL_FRS_STOCK].Text = rstInv.Fields["QuantitéStock"].Value; } else { itmFRS.SubItems.Insert(I_COL_FRS_STOCK, new ListViewItem.ListViewSubItem(null, rstInv.Fields["QuantitéStock"].Value)); }
                            }
                            else
                            if (itmFRS.SubItems.Count > I_COL_FRS_STOCK) { itmFRS.SubItems[I_COL_FRS_STOCK].Text = 0.ToString(); } else { itmFRS.SubItems.Insert(I_COL_FRS_STOCK, new ListViewItem.ListViewSubItem(null, 0.ToString())); }
                        }
                        rstInv.Close();
                        rstInv = default;
                    }
                    if (string.IsNullOrEmpty(itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Text))
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_LIST) { itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                    }
                    if (rstPieceFRS.Fields["PRIX_NET"].Value != string.Empty)
                    {
                        if (rstPieceFRS.Fields["PRIX_LIST"].Value == "0,00" | rstPieceFRS.Fields["PRIX_LIST"].Value == "0") { itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Tag = Strings.Replace(rstPieceFRS.Fields["PRIX_NET"].Value, ".", ","); } else { itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Tag = Strings.Replace(rstPieceFRS.Fields["PRIX_LIST"].Value, ".", ","); }
                    }
                    else
                    {
                        itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Tag = Strings.Replace(rstPieceFRS.Fields["PRIX_SP"].Value, ".", ",");
                    }
                    if (string.IsNullOrEmpty(itmFRS.SubItems[I_COL_FRS_ENTRER_PAR].Text))
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_ENTRER_PAR) { itmFRS.SubItems[I_COL_FRS_ENTRER_PAR].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_ENTRER_PAR, new ListViewItem.ListViewSubItem(null, " ")); }
                    }
                    itmFRS.SubItems[I_COL_FRS_ENTRER_PAR].Tag = rstPieceFRS.Fields["NoEnreg"].Value;
                    if (string.IsNullOrEmpty(itmFRS.SubItems[I_COL_FRS_PERS_RESS].Text))
                    {
                        if (itmFRS.SubItems.Count > I_COL_FRS_PERS_RESS) { itmFRS.SubItems[I_COL_FRS_PERS_RESS].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PERS_RESS, new ListViewItem.ListViewSubItem(null, " ")); }
                    }
                    itmFRS.SubItems[I_COL_FRS_PERS_RESS].Tag = sDevise;
                    rstPieceFRS.MoveNext();
                }
                rstPieceFRS.Close();
                rstPieceFRS = default;
                rstContact = default;
                if (m_bPieceInutile == false)
                {
                    if (lvwSoumission.Items.Count > 0)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BRUN, false))) { bAjouterDP = true; }
                        else
                        if (m_bChangementFRS == false) { bAjouterDP = true; }
                    }
                    else
                    { bAjouterDP = true; }
                }
                else
                if (m_bChangementFRS == true)
                {
                    if (lvwSoumission.Items.Count > 0)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BRUN, false))) { bAjouterDP = true; }
                    }
                    else
                    { bAjouterDP = true; }
                }
                if (bAjouterDP == true)
                {
                    itmFRS = lvwFournisseur.Items.Add(string.Empty);
                    itmFRS.Text = "CHOISIR ULTÉRIEUREMENT";
                    if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_LIST) { itmFRS.SubItems[I_COL_FRS_PRIX_LIST].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmFRS.SubItems.Count > I_COL_FRS_ESCOMPTE) { itmFRS.SubItems[I_COL_FRS_ESCOMPTE].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_NET) { itmFRS.SubItems[I_COL_FRS_PRIX_NET].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_NET, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmFRS.SubItems.Count > I_COL_FRS_PRIX_SP) { itmFRS.SubItems[I_COL_FRS_PRIX_SP].Text = " "; } else { itmFRS.SubItems.Insert(I_COL_FRS_PRIX_SP, new ListViewItem.ListViewSubItem(null, " ")); }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListViewFournisseur", ex);
            }
        }
        private void RemplirListViewPieces()
        {
            try
            {
                ADODB.Recordset rstPieces;
                ListViewItem itmPieces = default;
                string sCategorie;
                string sTri;
                var sOrderBy = default(string);
                bool bDebut;
                int iIndex = 0;
                sTri = m_sTri;
                switch (cmbTri.SelectedIndex)
                {
                    case I_CMB_PIECE_GRB:
                        { sOrderBy = "PIECE_GRB"; break; }
                    case I_CMB_PIECE:
                        { sOrderBy = "PIECE"; break; }
                    case I_CMB_FABRICANT:
                        { sOrderBy = "FABRICANT"; break; }
                    case I_CMB_DESCR_FR:
                        { sOrderBy = "DESC_FR"; break; }
                    case I_CMB_DESCR_EN:
                        { sOrderBy = "DESC_EN"; break; }
                }
                lvwPieces.Items.Clear();
                sCategorie = Strings.Replace(cmbPieces.Text, "'", "''");
                rstPieces = new Recordset();
                rstPieces.Open("SELECT * FROM CatalogueMec WHERE CATEGORIE = '" + sCategorie + "' ORDER BY " + sOrderBy, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                iIndex = 1;
                while (!rstPieces.EOF)
                {
                    if (rstPieces.Fields["PIECE"].Value != string.Empty & rstPieces.Fields["FABRICANT"].Value != string.Empty)
                    {
                        if (!string.IsNullOrEmpty(sTri))
                        {
                            bDebut = false;
                            switch (m_iCol)
                            {
                                case I_COL_PIECES_PIECE_GRB:
                                    {
                                        if ($"{rstPieces.Fields["PIECE_GRB"].Value}".ToUpper().Contains(sTri.ToUpper()))
                                        {
                                            bDebut = true;
                                        }
                                        break;
                                    }
                                case I_COL_PIECES_NO_ITEM:
                                    {
                                        if ($"{rstPieces.Fields["PIECE"].Value}".ToUpper().Contains(sTri.ToUpper()))
                                        {
                                            bDebut = true;
                                        }
                                        break;
                                    }
                                case I_COL_PIECES_MANUFACT:
                                    {
                                        if ($"{rstPieces.Fields["FABRICANT"].Value}".ToUpper().Contains(sTri.ToUpper()))
                                        {
                                            bDebut = true;
                                        }
                                        break;
                                    }
                                case I_COL_PIECES_DESCR_FR:
                                    {
                                        if ($"{rstPieces.Fields["DESC_FR"].Value}".ToUpper().Contains(sTri.ToUpper()))
                                        {
                                            bDebut = true;
                                        }
                                        break;
                                    }
                                case I_COL_PIECES_DESCR_EN:
                                    {
                                        if ($"{rstPieces.Fields["DESC_EN"].Value}".ToUpper().Contains(sTri.ToUpper()))
                                        {
                                            bDebut = true;
                                        }
                                        break;
                                    }
                            }
                            if (bDebut == true)
                            {
                                itmPieces = lvwPieces.Items.Insert(iIndex, ""); iIndex = iIndex + 1;
                            }
                            else
                            {
                                itmPieces = lvwPieces.Items.Add(string.Empty);
                            }
                        }
                        else
                        {
                            if (!(rstPieces.Fields["TEMPS"].Value is DBNull)) { itmPieces.Tag = rstPieces.Fields["TEMPS"].Value; } else { itmPieces.Tag = string.Empty; }
                            if (!(rstPieces.Fields["PIECE_GRB"].Value is DBNull)) { itmPieces.Text = Strings.Trim(rstPieces.Fields["PIECE_GRB"].Value); } else { itmPieces.Text = string.Empty; }
                            if (!(rstPieces.Fields["PIECE"].Value is DBNull))
                            {
                                if (itmPieces.SubItems.Count > I_COL_PIECES_NO_ITEM) { itmPieces.SubItems[I_COL_PIECES_NO_ITEM].Text = Strings.Trim(rstPieces.Fields["PIECE"].Value); } else { itmPieces.SubItems.Insert(I_COL_PIECES_NO_ITEM, new ListViewItem.ListViewSubItem(null, Strings.Trim(rstPieces.Fields["PIECE"].Value))); }
                            }
                            else
                            if (itmPieces.SubItems.Count > I_COL_PIECES_NO_ITEM) { itmPieces.SubItems[I_COL_PIECES_NO_ITEM].Text = string.Empty; } else { itmPieces.SubItems.Insert(I_COL_PIECES_NO_ITEM, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstPieces.Fields["FABRICANT"].Value is DBNull))
                            {
                                if (itmPieces.SubItems.Count > I_COL_PIECES_MANUFACT) { itmPieces.SubItems[I_COL_PIECES_MANUFACT].Text = Strings.Trim(rstPieces.Fields["FABRICANT"].Value); } else { itmPieces.SubItems.Insert(I_COL_PIECES_MANUFACT, new ListViewItem.ListViewSubItem(null, Strings.Trim(rstPieces.Fields["FABRICANT"].Value))); }
                            }
                            else
    if (itmPieces.SubItems.Count > I_COL_PIECES_MANUFACT) { itmPieces.SubItems[I_COL_PIECES_MANUFACT].Text = string.Empty; } else { itmPieces.SubItems.Insert(I_COL_PIECES_MANUFACT, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstPieces.Fields["DESC_FR"].Value is DBNull))
                            {
                                if (itmPieces.SubItems.Count > I_COL_PIECES_DESCR_FR) { itmPieces.SubItems[I_COL_PIECES_DESCR_FR].Text = Strings.Trim(rstPieces.Fields["DESC_FR"].Value); } else { itmPieces.SubItems.Insert(I_COL_PIECES_DESCR_FR, new ListViewItem.ListViewSubItem(null, Strings.Trim(rstPieces.Fields["DESC_FR"].Value))); }
                            }
                            else
                            if (itmPieces.SubItems.Count > I_COL_PIECES_DESCR_FR) { itmPieces.SubItems[I_COL_PIECES_DESCR_FR].Text = string.Empty; } else { itmPieces.SubItems.Insert(I_COL_PIECES_DESCR_FR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstPieces.Fields["DESC_EN"].Value is DBNull))
                            {
                                if (itmPieces.SubItems.Count > I_COL_PIECES_DESCR_EN) { itmPieces.SubItems[I_COL_PIECES_DESCR_EN].Text = Strings.Trim(rstPieces.Fields["DESC_EN"].Value); } else { itmPieces.SubItems.Insert(I_COL_PIECES_DESCR_EN, new ListViewItem.ListViewSubItem(null, Strings.Trim(rstPieces.Fields["DESC_EN"].Value))); }
                            }
                            else
                            if (itmPieces.SubItems.Count > I_COL_PIECES_DESCR_EN) { itmPieces.SubItems[I_COL_PIECES_DESCR_EN].Text = string.Empty; } else { itmPieces.SubItems.Insert(I_COL_PIECES_DESCR_EN, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        rstPieces.MoveNext();
                    }
                    rstPieces.Close();
                    rstPieces = default;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListViewPieces", ex);
            }
        }
        private bool TrouverIndexSection(string sSousSection)
        {
            bool TrouverIndexSectionRet = default;
            try
            {
                int X;
                var iIndex = default(int);
                int iTagSection;
                int iIDSection;
                var iIndexSect = default(int);
                var bTrouverSect = default(bool);
                var bTrouverSSect = default(bool);
                var bTrouverIndexItem = default(bool);
                int iIndexSSection = 0;
                string sTagSousSection;
                ListViewItem itmSoum;
                if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                {
                    sSousSection = string.Empty;
                    sTagSousSection = S_PAS_SOUS_SECTION;
                }
                else { sTagSousSection = sSousSection; }
                if (lvwSoumission.Items.Count > 0)
                {
                    var loopTo = lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo; X++)
                    {
                        if ((lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text ?? "") == (cmbSections.Text ?? ""))
                        {
                            bTrouverSect = true; iIndexSect = X; X++; while ((string)lvwSoumission.Items[X].Tag != cmbSections.Items[cmbSections.SelectedIndex].ToString())
                            {
                                if ((lvwSoumission.Items[X].SubItems[I_COL_SOUM_DESCR].Text ?? "") == (sSousSection ?? "")) { bTrouverSSect = true; iIndex++; break; }
                                X++;
                                if (X > lvwSoumission.Items.Count) { break; }
                            }
                            break;
                        }
                    }
                }
                else
                {
                    bTrouverSect = false;
                }
                if (bTrouverSect == false)
                {
                    if (lvwSoumission.Items.Count > 0)
                    {
                        var loopTo1 = lvwSoumission.Items.Count;
                        for (X = 1; X <= loopTo1; X++)
                        {
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                            {
                                iTagSection = (int)lvwSoumission.Items[X].SubItems[I_COL_SOUM_MANUFACT].Tag;
                                iIDSection = cmbSections.SelectedIndex + 1;
                                if (X == 2)
                                {
                                    if (iIDSection < iTagSection) { iIndex = 1; break; }
                                }
                                else
                                if (X == lvwSoumission.Items.Count)
                                {
                                    if (iIDSection > iTagSection) { iIndex++; break; }
                                }
                                else
                                if ((string)lvwSoumission.Items[X + 1].Tag != string.Empty)
                                {
                                    if (iIDSection != (int)lvwSoumission.Items[X + 1].SubItems[I_COL_SOUM_MANUFACT].Tag)
                                    {
                                        iIndex++; break;
                                    }
                                }
                                if (iIDSection > iTagSection & iIDSection != (int)lvwSoumission.Items[X + 2].SubItems[I_COL_SOUM_MANUFACT].Tag)
                                {
                                    iIndex++;
                                }
                            }
                        }
                    }
                    else
                    {
                        iIndex = 1;
                    }
                    itmSoum = lvwSoumission.Items.Insert(iIndex, "");
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmSoum.SubItems[I_COL_SOUM_PIECE].Text = cmbSections.Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, cmbSections.Text)); }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                    itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = (cmbSections.SelectedIndex + 1).ToString();
                    ValeurParDefaut(itmSoum);
                    iIndex++;
                    if (AjouterSousSection(iIndex, sTagSousSection)) { iIndexSSection++; }
                    iIndex = iIndexSSection;
                }
                else
                if (bTrouverSSect == false)
                {
                    if (AjouterSousSection(iIndexSect + 1, sTagSousSection)) { iIndexSSection++; }
                    iIndex = iIndexSSection;
                }
                int counter = 0;
                counter = iIndex;
                for (X = counter; X <= lvwSoumission.Items.Count; X++)
                {
                    if ((string)lvwSoumission.Items[X].Tag != cmbSections.Items[cmbSections.SelectedIndex].ToString())
                    {
                        bTrouverIndexItem = true;
                        iIndex = X;
                        break;
                    }
                }
                if (bTrouverIndexItem == false)
                {
                    iIndex = lvwSoumission.Items.Count + 1;
                }
                return true;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "TrouverIndexSection", ex);
                return false;
            }
        }
        private bool AjouterSousSection(int iIndexSection, string sSousSection)
        {
            try
            {
                ListViewItem itmSoum;
                int X;
                var bTrouverIndexSSection = default(bool);
                var iIndex = default(int);
                string sTag;
                if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                {
                    sSousSection = string.Empty;
                    sTag = S_PAS_SOUS_SECTION;
                }
                else { sTag = sSousSection; }
                if ((sTag ?? "") != S_PAS_SOUS_SECTION)
                {
                    var loopTo = lvwSoumission.Items.Count;
                    for (X = iIndexSection; X <= loopTo; X++)
                    {
                        if ((string)lvwSoumission.Items[X].Tag == cmbSections.Items[cmbSections.SelectedIndex].ToString()) { bTrouverIndexSSection = true; iIndex = X; break; }
                    }
                    if (bTrouverIndexSSection == false)
                    {
                        iIndex = lvwSoumission.Items.Count + 1;
                    }
                }
                else
                {
                    iIndex = iIndexSection;
                }
                itmSoum = lvwSoumission.Items.Insert(iIndex, "");
                ValeurParDefaut(itmSoum);
                if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = sSousSection; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection)); }
                itmSoum.Tag = cmbSections.Items[cmbSections.SelectedIndex].ToString();
                if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = (cmbSections.SelectedIndex + 1).ToString();
                return true;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterSousSection", ex);
                return false;
            }
        }
        private void AjouterNegatintDansListView(double dblQuantite, string sSousSection)
        {
            try
            {
                int iIndex = default;
                ListViewItem itmSoum;
                int X;
                int iIDSection;
                int iTagSection;
                bool bSelected;
                var iIndexSel = default(int);
                double dblTempsMec;
                ADODB.Recordset rstProjet;
                var bQteOK = default(bool);
                var sNoProjet = default(string);
                string sPrixList;
                string sEscompte;
                string sPrixNet;
                string sTemps;
                var dblTotalQte = default(double);
                rstProjet = new Recordset();
                if (double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 60d & double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 98d)
                {
                    sNoProjet = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + m_sLiaison;
                    if (m_bRecherchePiece == true)
                    {
                        rstProjet.Open(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND NumItem = '" + Strings.Replace(lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text, "'", "''") + "' AND IDFRS = ", lvwFournisseur.FocusedItem.Tag), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    else
                    {
                        rstProjet.Open(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND NumItem = '" + Strings.Replace(lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text, "'", "''") + "' AND IDFRS = ", lvwFournisseur.FocusedItem.Tag), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                }
                if (!rstProjet.EOF)
                {
                    while (!rstProjet.EOF)
                    {
                        dblTotalQte = dblTotalQte + rstProjet.Fields["Qté"].Value;
                        rstProjet.MoveNext();
                    }
                    if (dblTotalQte >= Math.Abs(dblQuantite)) { bQteOK = true; }
                }
                else
                {
                    MessageBox.Show("La pièce n'existe pas dans le projet " + sNoProjet, "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    rstProjet.Close();
                    rstProjet = default;
                    return;
                }
                if (bQteOK == true)
                {
                    rstProjet.MovePrevious();
                    sPrixList = rstProjet.Fields["Prix_List"].Value;
                    sEscompte = rstProjet.Fields["Escompte"].Value;
                    sPrixNet = rstProjet.Fields["Prix_Net"].Value;
                    sTemps = rstProjet.Fields["Temps"].Value;
                }
                else
                {
                    if (m_bRecherchePiece == true)
                    {
                        MessageBox.Show("Il n'y a pas assez de " + lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text + " dans le projet " + sNoProjet + " pour en enlever " + Math.Abs(dblQuantite) + "!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    }
                    else
                    {
                        MessageBox.Show("Il n'y a pas assez de " + lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text + " dans le projet " + sNoProjet + " pour en enlever " + Math.Abs(dblQuantite) + "!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    }
                    rstProjet.Close();
                    rstProjet = default;
                    return;
                }
                rstProjet.Close();
                rstProjet = default;
                bSelected = false;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (lvwSoumission.FocusedItem.Index > 1)
                    {
                        bSelected = true;
                        iIndexSel = lvwSoumission.FocusedItem.Index;
                    }
                }
                if (bSelected == false) { bool bIndex = TrouverIndexSection(sSousSection); } else { iIndex = iIndexSel; }
                itmSoum = lvwSoumission.Items.Insert(iIndex, "");
                itmSoum.Checked = true;
                itmSoum.Text = dblQuantite.ToString();
                if (lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_QUOTER].Text == "Oui")
                {
                    itmSoum.Text = itmSoum.Text + "*";
                    itmSoum.ForeColor = COLOR_VERT;
                }
                else { itmSoum.ForeColor = COLOR_NOIR; }
                itmSoum.Tag = cmbSections.Items[cmbSections.SelectedIndex].ToString();
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text)); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text)); }
                itmSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = lColor;
                itmSoum.SubItems[I_COL_SOUM_PIECE].Tag = sSousSection;
                if (m_eLangage == EnumLangage.ANGLAIS)
                {
                    if (m_bRecherchePiece == true)
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text)); }
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text;
                    }
                    else
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text)); }
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text;
                    }
                }
                else
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text)); }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text;
                }
                else
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text)); }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text;
                }
                itmSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = lColor;
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text)); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text)); }
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = (cmbSections.SelectedIndex + 1).ToString();
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = lColor;
                if (string.IsNullOrEmpty(Strings.Trim(sPrixList)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = "0"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, "0")); }
                }
                else
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = sPrixList; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, sPrixList)); }
                    itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = sPrixList;
                }
                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = lColor;
                if (!string.IsNullOrEmpty(Strings.Trim(sEscompte)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = sEscompte; } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, sEscompte)); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = "0"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, "0")); }
                itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = lColor;
                if (!string.IsNullOrEmpty(Strings.Trim(sPrixNet)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = sPrixNet; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, sPrixNet)); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = "0"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, "0")); }
                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = lColor;
                if (itmSoum.SubItems.Count > I_COL_SOUM_DISTRIB) { itmSoum.SubItems[I_COL_SOUM_DISTRIB].Text = lvwFournisseur.FocusedItem.Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.Text)); }
                itmSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = lvwFournisseur.FocusedItem.Tag;
                itmSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = lColor;
                if (itmSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmSoum.SubItems[I_COL_SOUM_TEMPS].Text = sTemps; } else { itmSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, sTemps)); }
                itmSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = lColor;
                if (!string.IsNullOrEmpty(Strings.Trim(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString())); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                itmSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = lColor;
                if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(m_sProfit), 2).ToString())); }
                itmSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = lColor;
                if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString() + "$"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString() + "$")); }
                itmSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = lColor;
                if (string.IsNullOrEmpty(itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = " "; } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                }
                CalculerTempsFabrication();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterNegatintDansListView", ex);
            }
        }
        private void AjouterDansListViewSoumission(double dblQuantite, string sSousSection)
        {
            try
            {
                ADODB.Recordset rstConfig;
                int iIndex = 0;
                int X;
                int iIDSection;
                int iTagSection;
                var iIndexSel = default(int);
                ListViewItem itmSoum;
                bool bSelected;
                bool bIndex = false;
                double dblTempsMec;
                string sDistrib;
                string sTauxUSA;
                string sTauxSPA;
                Color lColor;
                bSelected = false;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (lvwSoumission.FocusedItem.Index > 1)
                    {
                        bSelected = true;
                        iIndexSel = lvwSoumission.FocusedItem.Index;
                    }
                }
                if (bSelected == false)
                {
                    bIndex = TrouverIndexSection(sSousSection);
                }
                else
                {
                    iIndex = iIndexSel;
                }
                rstConfig = new Recordset();
                rstConfig.Open("SELECT TauxAmericain, TauxEspagnol FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                sTauxUSA = rstConfig.Fields["TauxAmericain"].Value;
                sTauxSPA = rstConfig.Fields["TauxEspagnol"].Value;
                rstConfig.Close();
                rstConfig = default;
                itmSoum = lvwSoumission.Items.Insert(iIndex, "");
                itmSoum.Checked = true;
                itmSoum.Text = dblQuantite.ToString();
                if (lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_QUOTER].Text == "Oui")
                {
                    itmSoum.Text = itmSoum.Text + "*";
                    itmSoum.ForeColor = COLOR_VERT;
                }
                else { itmSoum.ForeColor = COLOR_NOIR; }
                if (lvwFournisseur.FocusedItem.Text == "CHOISIR ULTÉRIEUREMENT") { lColor = COLOR_MAGENTA; } else { lColor = COLOR_NOIR; }
                itmSoum.Tag = cmbSections.Items[cmbSections.SelectedIndex].ToString();
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text)); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text)); }
                itmSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = lColor;
                itmSoum.SubItems[I_COL_SOUM_PIECE].Tag = sSousSection;
                if (m_eLangage == EnumLangage.ANGLAIS)
                {
                    if (m_bRecherchePiece == true)
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text)); }
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text;
                    }
                    else
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text)); }
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text;
                    }
                }
                else
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text)); }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text;
                }
                else
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text)); }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text;
                }
                itmSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = lColor;
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text)); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text)); }
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = (cmbSections.SelectedIndex + 1).ToString();
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = lColor;
                if (string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = "0"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, "0")); }
                }
                else
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "USA", false)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxUSA), 4).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxUSA), 4).ToString())); }
                }
                else
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "SPA", false)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxSPA), 4).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxSPA), 4).ToString())); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text)); }
                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Tag;
                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = lColor;
                if (!string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text)))
                {
                    if (!string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ESCOMPTE].Text)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ESCOMPTE].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ESCOMPTE].Text)); }
                    }
                    else
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = 0.ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, 0.ToString())); }
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "USA", false)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxUSA), 4).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxUSA), 4).ToString())); }
                    }
                    else
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "SPA", false)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxSPA), 4).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxSPA), 4).ToString())); }
                    }
                    else
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text)); }
                }
                else
                if (!string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text)))
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "USA", false)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxUSA), 4).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxUSA), 4).ToString())); }
                    }
                    else
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "SPA", false)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxSPA), 4).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxSPA), 4).ToString())); }
                    }
                    else
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text)); }
                }
                else
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = "0"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, "0")); }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = "0"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, "0")); }
                }
                itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = lColor;
                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = lColor;
                if (lvwFournisseur.FocusedItem.Text == "CHOISIR ULTÉRIEUREMENT") { sDistrib = string.Empty; } else { sDistrib = lvwFournisseur.FocusedItem.Text; }
                if (itmSoum.SubItems.Count > I_COL_SOUM_DISTRIB) { itmSoum.SubItems[I_COL_SOUM_DISTRIB].Text = sDistrib; } else { itmSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, sDistrib)); }
                itmSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = lvwFournisseur.FocusedItem.Tag;
                itmSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = lColor;
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmSoum.SubItems[I_COL_SOUM_TEMPS].Text = Strings.Replace((string)lvwPieceTrouve.FocusedItem.Tag, ".", ","); } else { itmSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, Strings.Replace((string)lvwPieceTrouve.FocusedItem.Tag, ".", ","))); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmSoum.SubItems[I_COL_SOUM_TEMPS].Text = Strings.Replace((string)lvwPieces.FocusedItem.Tag, ".", ","); } else { itmSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, Strings.Replace((string)lvwPieces.FocusedItem.Tag, ".", ","))); }
                itmSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = lColor;
                if (!string.IsNullOrEmpty(Strings.Trim(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString())); }
                }
                else
                if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                itmSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = lColor;
                if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(); } else { itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString())); }
                itmSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = lColor;
                itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag;
                if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString() + "$"; } else { itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString() + "$")); }
                itmSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = lColor;
                if (string.IsNullOrEmpty(itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = " "; } else { itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                }
                CalculerTempsFabrication();
                itmSoum.Focused = true;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterDansListViewSoumission", ex);
            }
        }
        private void CalculerTempsFabrication()
        {
            try
            {
                var dblTempsFab = default(double);
                int X;
                var loopTo = lvwSoumission.Items.Count;
                for (X = 1; X <= loopTo; X++)
                {
                    if (!string.IsNullOrEmpty(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_MONTAGE].Text)))
                    {
                        dblTempsFab = dblTempsFab + double.Parse(Strings.Replace(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_MONTAGE].Text), ".", ","));
                    }
                }
                m_sTempsFabrication = Strings.Replace((dblTempsFab / 10d).ToString(), ".", ",");
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerTempsFabrication", ex);
            }
        }
        private bool VerintierEmplacement(int iIndexSelection)
        {
            bool VerintierEmplacementRet = default;
            try
            {
                ListViewItem itmSoum;
                itmSoum = lvwSoumission.Items[iIndexSelection];
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(itmSoum.Tag, string.Empty, false))) { itmSoum = lvwSoumission.Items[iIndexSelection - 1]; }
                if ((string)itmSoum.Tag == cmbSections.Items[cmbSections.SelectedIndex].ToString()) { VerintierEmplacementRet = true; } else { VerintierEmplacementRet = false; }
                return VerintierEmplacementRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerintierEmplacement", ex);
                return false;
            }
        }
        private void ValeurParDefaut(ListViewItem itmSoumission)
        {
            try
            {
                if (m_bDroitPrix == true)
                {
                    if (itmSoumission.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmSoumission.SubItems[I_COL_SOUM_PRIX_LIST].Text = " "; } else { itmSoumission.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmSoumission.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmSoumission.SubItems[I_COL_SOUM_ESCOMPTE].Text = " "; } else { itmSoumission.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmSoumission.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmSoumission.SubItems[I_COL_SOUM_PRIX_NET].Text = " "; } else { itmSoumission.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmSoumission.SubItems.Count > I_COL_SOUM_TOTAL) { itmSoumission.SubItems[I_COL_SOUM_TOTAL].Text = " "; } else { itmSoumission.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, " ")); }
                    if (itmSoumission.SubItems.Count > I_COL_SOUM_PROFIT) { itmSoumission.SubItems[I_COL_SOUM_PROFIT].Text = " "; } else { itmSoumission.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, " ")); }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ValeurParDefaut", ex);
            }
        }
        private void RemplirListViewProjSoum(string sNoProjSoum)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstSection;
                ADODB.Recordset rstFRS;
                ListViewItem itmProjSoum;
                bool bPremierEnr;
                var iOrdreSection = default(bool);
                var sSousSection = default(string);
                string sSection;
                Color lColor;
                bool bBold;
                rstProjSoum = new Recordset();
                rstSection = new Recordset();
                rstFRS = new Recordset();
                lvwSoumission.Items.Clear();
                bPremierEnr = true;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstProjSoum.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjSoum + "' ORDER BY (OrdreSection), NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstProjSoum.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoProjSoum + "' ORDER BY C(OrdreSection), NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                if (m_eLangage == EnumLangage.ANGLAIS) { sSection = "NomSectionEN"; } else { sSection = "NomSectionFR"; }
                while (!rstProjSoum.EOF)
                {
                    itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                    if (bPremierEnr == true)
                    {
                        iOrdreSection = rstProjSoum.Fields["OrdreSection"].Value;
                        sSousSection = rstProjSoum.Fields["SousSection"].Value;
                        rstSection.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstProjSoum.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!(rstSection.Fields[sSection].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE)
                            {
                                itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstSection.Fields[sSection].Value;
                            }
                            else
                            {
                                itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstSection.Fields[sSection].Value));
                            }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE)
                        {
                            itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty;
                        }
                        else
                        {
                            itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty));
                        }
                        ValeurParDefaut(itmProjSoum);
                        rstSection.Close();
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = sSousSection; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection)); }
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                        ValeurParDefaut(itmProjSoum);
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                        bPremierEnr = false;
                    }
                    else
                    if (iOrdreSection != rstProjSoum.Fields["OrdreSection"].Value)
                    {
                        iOrdreSection = rstProjSoum.Fields["OrdreSection"].Value;
                        rstSection.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstProjSoum.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!(rstSection.Fields[sSection].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE)
                            {
                                itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstSection.Fields[sSection].Value;
                            }
                            else
                            {
                                itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstSection.Fields[sSection].Value));
                            }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE)
                        {
                            itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty;
                        }
                        else
                        {
                            itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty));
                        }
                        ValeurParDefaut(itmProjSoum);
                        rstSection.Close();
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                        sSousSection = rstProjSoum.Fields["SousSection"].Value;
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["SousSection"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["SousSection"].Value)); }
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        ValeurParDefaut(itmProjSoum);
                        itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                    }
                    else
                    if (sSousSection != rstProjSoum.Fields["SousSection"].Value)
                    {
                        sSousSection = rstProjSoum.Fields["SousSection"].Value;
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = sSousSection; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection)); }
                        ValeurParDefaut(itmProjSoum);
                        itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                    }
                    if (rstProjSoum.Fields["PieceExtraChargeable"].Value == true)
                    {
                        lColor = COLOR_BLEU;
                        bBold = true;
                    }
                    else
                    if (rstProjSoum.Fields["PieceExtraNonChargeable"].Value == true)
                    {
                        lColor = COLOR_ROSE;
                        bBold = true;
                    }
                    else
                    if (rstProjSoum.Fields["CommandeAnnulée"].Value == true)
                    {
                        lColor = COLOR_VERT_FORET;
                        bBold = true;
                    }
                    else
                    if (rstProjSoum.Fields["Retour"].Value == true)
                    {
                        lColor = COLOR_ROUGE;
                        bBold = false;
                    }
                    else
                    if (rstProjSoum.Fields["Commandé"].Value == true)
                    {
                        lColor = COLOR_ORANGE;
                        bBold = false;
                    }
                    else
                    if (rstProjSoum.Fields["Recu"].Value == true)
                    {
                        lColor = COLOR_GRIS;
                        bBold = false;
                    }
                    else
                    if (rstProjSoum.Fields["IDFRS"].Value == 0 & rstProjSoum.Fields["NumItem"].Value != "Texte" & rstProjSoum.Fields["NumItem"].Value != "Text")
                    {
                        lColor = COLOR_MAGENTA;
                        bBold = false;
                    }
                    else
                    if (rstProjSoum.Fields["MatérielInutile"].Value == true)
                    {
                        lColor = COLOR_BRUN;
                        bBold = false;
                    }
                    else
                    {
                        lColor = COLOR_NOIR;
                        bBold = false;
                    }
                    itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                    if (rstProjSoum.Fields[".Visible"].Value == true) { itmProjSoum.Checked = true; } else { itmProjSoum.Checked = false; }
                    if (!(rstProjSoum.Fields["Qté"].Value is DBNull)) { itmProjSoum.Text = rstProjSoum.Fields["Qté"].Value; } else { itmProjSoum.Text = string.Empty; }
                    if (rstProjSoum.Fields["Quoté"].Value == true)
                    {
                        itmProjSoum.Text = itmProjSoum.Text + "*";
                        itmProjSoum.ForeColor = COLOR_VERT;
                        itmProjSoum.ForeColor = COLOR_NOIR;
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            if (g_bModificationProjetsMec)
                            {
                                if (!(rstProjSoum.Fields["Facturation"].Value is DBNull))
                                {
                                    if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Facturation"].Value)))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_FACTURATION) { itmProjSoum.SubItems[I_COL_SOUM_FACTURATION].Text = rstProjSoum.Fields["Facturation"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Facturation"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_FACTURATION) { itmProjSoum.SubItems[I_COL_SOUM_FACTURATION].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, " ")); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_FACTURATION) { itmProjSoum.SubItems[I_COL_SOUM_FACTURATION].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, " ")); }
                            }
                        }
                        if (!(rstProjSoum.Fields["NumItem"].Value is DBNull))
                        {
                            if (rstProjSoum.Fields["NumItem"].Value == "Texte" | rstProjSoum.Fields["NumItem"].Value == "Text")
                            {
                                if (m_eLangage == EnumLangage.ANGLAIS)
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = "Text"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, "Text")); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = "Texte"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, "Texte")); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstProjSoum.Fields["NumItem"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["NumItem"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = lColor;
                        itmProjSoum.SubItems[I_COL_SOUM_PIECE].Tag = rstProjSoum.Fields["SousSection"].Value;
                        if (itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text == "Texte" | itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text == "Text")
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["DESC_FR"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DESC_FR"].Value)); }
                        }
                        else
                        if (m_eLangage == EnumLangage.ANGLAIS)
                        {
                            if (!(rstProjSoum.Fields["DESC_EN"].Value is DBNull))
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["DESC_EN"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DESC_EN"].Value)); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstProjSoum.Fields["DESC_FR"].Value is DBNull)) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = rstProjSoum.Fields["DESC_FR"].Value; } else { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = string.Empty; }
                        }
                        else
                        {
                            if (!(rstProjSoum.Fields["DESC_FR"].Value is DBNull))
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["DESC_FR"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DESC_FR"].Value)); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstProjSoum.Fields["DESC_EN"].Value is DBNull)) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = rstProjSoum.Fields["DESC_EN"].Value; } else { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = string.Empty; }
                        }
                        itmProjSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = lColor;
                        if (!(rstProjSoum.Fields["Manufact"].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = rstProjSoum.Fields["Manufact"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Manufact"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = lColor;
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        if (m_bDroitPrix == true)
                        {
                            if (!(rstProjSoum.Fields["PRIX_LIST"].Value is DBNull))
                            {
                                if (rstProjSoum.Fields["PRIX_LIST"].Value != "")
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                    {
                                        itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = rstProjSoum.Fields["PRIX_LIST"].Value;
                                    }
                                    else
                                    {
                                        itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["PRIX_LIST"].Value));
                                    }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = lColor;
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = rstProjSoum.Fields["PrixOrigine"].Value;
                            if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Escompte"].Value)))
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = rstProjSoum.Fields["Escompte"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Escompte"].Value)); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                            itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = lColor;
                            if (!(rstProjSoum.Fields["PRIX_NET"].Value is DBNull))
                            {
                                if (rstProjSoum.Fields["PRIX_NET"].Value != "")
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = rstProjSoum.Fields["PRIX_NET"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["PRIX_NET"].Value)); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, " ")); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = ""; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, "")); }
                            itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = lColor;
                            if (m_eType == EnumType.TYPE_PROJET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Tag = rstProjSoum.Fields["DateRéception"].Value; }
                            if (!(rstProjSoum.Fields["IDFRS"].Value is DBNull) & rstProjSoum.Fields["IDFRS"].Value > 0)
                            {
                                if (itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                                {
                                    rstFRS.Open("SELECT NomFournisseur FROM Fournisseur WHERE IDFRS = " + rstProjSoum.Fields["IDFRS"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_DISTRIB) { itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Text = rstFRS.Fields["NomFournisseur"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, rstFRS.Fields["NomFournisseur"].Value)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = lColor;
                                }
                                else
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_DISTRIB) { itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = 0.ToString();
                                }
                                if (!(rstProjSoum.Fields["Temps"].Value is DBNull))
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_TEMPS].Text = rstProjSoum.Fields["Temps"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Temps"].Value)); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_TEMPS].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                itmProjSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = lColor;
                                if (!(rstProjSoum.Fields["Temps_total"].Value is DBNull))
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].Text = rstProjSoum.Fields["Temps_total"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Temps_total"].Value)); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = lColor;
                                if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Prix_total"].Value)))
                                {
                                    if (IsNumeric(rstProjSoum.Fields["Prix_Total"].Value))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(rstProjSoum.Fields["Prix_total"].Value, 2) + "$"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(rstProjSoum.Fields["Prix_total"].Value, 2) + "$")); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, " ")); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, " ")); }
                                itmProjSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = lColor;
                                itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Tag = rstProjSoum.Fields["Devise"].Value;
                                //Profit
                                if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Profit_argent"].Value)))
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(rstProjSoum.Fields["Profit_Argent"].Value, 2) + "$"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(rstProjSoum.Fields["Profit_Argent"].Value, 2) + "$")); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, " ")); }
                                if (m_eType == EnumType.TYPE_PROJET)
                                {
                                    if (rstProjSoum.Fields["PieceExtraChargeable"].Value == true | rstProjSoum.Fields["PieceExtraNonChargeable"].Value == true) { itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Tag = "EXTRA"; }
                                }
                                itmProjSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = lColor;
                                if (!(rstProjSoum.Fields["Commentaire"].Value is DBNull))
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = rstProjSoum.Fields["Commentaire"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Commentaire"].Value)); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = lColor;
                                if (m_eType == EnumType.TYPE_PROJET)
                                {
                                    //
                                    if (!(rstProjSoum.Fields["ID"].Value is DBNull))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_ID) { itmProjSoum.SubItems[I_COL_SOUM_ID].Text = rstProjSoum.Fields["ID"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ID, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["ID"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_ID) { itmProjSoum.SubItems[I_COL_SOUM_ID].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ID, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_ID].ForeColor = lColor;
                                    if (!(rstProjSoum.Fields["DateCommande"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["DateCommande"].Value)))
                                        {
                                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = rstProjSoum.Fields["DateCommande"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DateCommande"].Value)); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, " ")); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, " ")); }
                                    itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = lColor; itmProjSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Tag = rstProjSoum.Fields["NoRetour"].Value;
                                    if (!(rstProjSoum.Fields["DateRequise"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["DateRequise"].Value)))
                                        {
                                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Text = rstProjSoum.Fields["DateRequise"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DateRequise"].Value)); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, " ")); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, " ")); }
                                    itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = lColor; itmProjSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Tag = rstProjSoum.Fields["DateRetour"].Value;
                                    if (!(rstProjSoum.Fields["NomCommande"].Value is DBNull))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_NOM_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].Text = rstProjSoum.Fields["NomCommande"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_NOM_COMMANDE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["NomCommande"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_NOM_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_NOM_COMMANDE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = lColor;
                                    if (!(rstProjSoum.Fields["NoSéquentiel"].Value is DBNull))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_NO_SEQUENTIEL) { itmProjSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text = rstProjSoum.Fields["NoSéquentiel"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_NO_SEQUENTIEL, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["NoSéquentiel"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_NO_SEQUENTIEL) { itmProjSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_NO_SEQUENTIEL, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = lColor;
                                    if (!(rstProjSoum.Fields["Provenance"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Provenance"].Value)))
                                        {
                                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_PROVENANCE].Text = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROVENANCE, new ListViewItem.ListViewSubItem(null, Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value)); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_PROVENANCE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROVENANCE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_PROVENANCE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROVENANCE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_PROVENANCE].ForeColor = lColor;
                                    if (!(rstProjSoum.Fields["Provenance"].Value is DBNull))
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Provenance"].Value)))
                                        {
                                            if (itmProjSoum.SubItems.Count > I_COL_SOUMISSION_PROV) { itmProjSoum.SubItems[I_COL_SOUMISSION_PROV].Text = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUMISSION_PROV, new ListViewItem.ListViewSubItem(null, Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value)); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUMISSION_PROV)
                                        {
                                            itmProjSoum.SubItems[I_COL_SOUMISSION_PROV].Text = string.Empty;
                                        }
                                        else { itmProjSoum.SubItems.Insert(I_COL_SOUMISSION_PROV, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUMISSION_PROV) { itmProjSoum.SubItems[I_COL_SOUMISSION_PROV].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUMISSION_PROV, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUMISSION_PROV].ForeColor = lColor;
                                }
                                else
                                {
                                    if (!(rstProjSoum.Fields["IDFRS"].Value is DBNull) & rstProjSoum.Fields["IDFRS"].Value > 0)
                                    {
                                        if (itmProjSoum.SubItems[I_COL_SOUM_SP_PIECE].Text != "Texte" & itmProjSoum.SubItems[I_COL_SOUM_SP_PIECE].Text != "Text")
                                        {
                                            rstFRS.Open("SELECT NomFournisseur FROM Fournisseur WHERE IDFRS = " + rstProjSoum.Fields["IDFRS"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DISTRIB) { itmProjSoum.SubItems[I_COL_SOUM_SP_DISTRIB].Text = rstFRS.Fields["NomFournisseur"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DISTRIB, new ListViewItem.ListViewSubItem(null, rstFRS.Fields["NomFournisseur"].Value)); }
                                            itmProjSoum.SubItems[I_COL_SOUM_SP_DISTRIB].ForeColor = lColor; itmProjSoum.SubItems[I_COL_SOUM_SP_DISTRIB].Tag = rstProjSoum.Fields["IDFRS"].Value; rstFRS.Close();
                                        }
                                    }
                                    else
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DISTRIB) { itmProjSoum.SubItems[I_COL_SOUM_SP_DISTRIB].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DISTRIB, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_DISTRIB].Tag = 0.ToString();
                                    }
                                    if (!(rstProjSoum.Fields["Temps"].Value is DBNull))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_SP_TEMPS].Text = rstProjSoum.Fields["Temps"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_TEMPS, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Temps"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_SP_TEMPS].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_TEMPS, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_SP_TEMPS].ForeColor = lColor;
                                    if (!(rstProjSoum.Fields["Temps_total"].Value is DBNull))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_SP_MONTAGE].Text = rstProjSoum.Fields["Temps_total"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_MONTAGE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Temps_total"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_SP_MONTAGE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_SP_MONTAGE].ForeColor = lColor;
                                    if (!(rstProjSoum.Fields["Commentaire"].Value is DBNull))
                                    {
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_SP_COMMENTAIRE].Text = rstProjSoum.Fields["Commentaire"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Commentaire"].Value)); }
                                    }
                                    else
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_SP_COMMENTAIRE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                    itmProjSoum.SubItems[I_COL_SOUM_SP_COMMENTAIRE].ForeColor = lColor;
                                    if (m_eType == EnumType.TYPE_PROJET)
                                    {
                                        //
                                        if (!(rstProjSoum.Fields["ID"].Value is DBNull))
                                        {
                                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_ID) { itmProjSoum.SubItems[I_COL_SOUM_SP_ID].Text = rstProjSoum.Fields["ID"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_ID, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["ID"].Value)); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_ID) { itmProjSoum.SubItems[I_COL_SOUM_SP_ID].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_ID, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_ID].ForeColor = lColor;
                                        if (!(rstProjSoum.Fields["DateCommande"].Value is DBNull))
                                        {
                                            if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["DateCommande"].Value)))
                                            {
                                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_COMMANDE].Text = rstProjSoum.Fields["DateCommande"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DateCommande"].Value)); }
                                            }
                                            else
if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_COMMANDE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, " ")); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DATE_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_COMMANDE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, " ")); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_COMMANDE].ForeColor = lColor; itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_COMMANDE].Tag = rstProjSoum.Fields["DateCommande"].Value;
                                        if (!(rstProjSoum.Fields["DateRequise"].Value is DBNull))
                                        {
                                            if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["DateRequise"].Value)))
                                            {
                                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_REQUISE].Text = rstProjSoum.Fields["DateRequise"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DateRequise"].Value)); }
                                            }
                                            else
if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_REQUISE].Text = ""; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, "")); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_DATE_REQUISE) { itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_REQUISE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, " ")); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_REQUISE].ForeColor = lColor; itmProjSoum.SubItems[I_COL_SOUM_SP_DATE_REQUISE].Tag = rstProjSoum.Fields["DateRetour"].Value;
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_NOM_COMMANDE) { itmProjSoum.SubItems[I_COL_SOUM_SP_NOM_COMMANDE].Text = rstProjSoum.Fields["NomCommande"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_NOM_COMMANDE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["NomCommande"].Value)); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_NOM_COMMANDE].ForeColor = lColor;
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_NO_SEQUENTIEL) { itmProjSoum.SubItems[I_COL_SOUM_SP_NO_SEQUENTIEL].Text = rstProjSoum.Fields["NoSéquentiel"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_NO_SEQUENTIEL, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["NoSéquentiel"].Value)); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_NO_SEQUENTIEL].ForeColor = lColor;
                                        if (!(rstProjSoum.Fields["Provenance"].Value is DBNull))
                                        {
                                            if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Provenance"].Value)))
                                            {
                                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_SP_PROVENANCE].Text = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_PROVENANCE, new ListViewItem.ListViewSubItem(null, Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value)); }
                                            }
                                            else
if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_SP_PROVENANCE].Text = ""; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_PROVENANCE, new ListViewItem.ListViewSubItem(null, "")); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_SP_PROVENANCE) { itmProjSoum.SubItems[I_COL_SOUM_SP_PROVENANCE].Text = ""; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_SP_PROVENANCE, new ListViewItem.ListViewSubItem(null, "")); }
                                        itmProjSoum.SubItems[I_COL_SOUM_SP_PROVENANCE].ForeColor = lColor;
                                        if (!(rstProjSoum.Fields["Provenance"].Value is DBNull))
                                        {
                                            if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Provenance"].Value)))
                                            {
                                                if (itmProjSoum.SubItems.Count > I_COL_SOUMISSION_SP_PROV) { itmProjSoum.SubItems[I_COL_SOUMISSION_SP_PROV].Text = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUMISSION_SP_PROV, new ListViewItem.ListViewSubItem(null, Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + rstProjSoum.Fields["Provenance"].Value)); }
                                            }
                                            else
if (itmProjSoum.SubItems.Count > I_COL_SOUMISSION_SP_PROV) { itmProjSoum.SubItems[I_COL_SOUMISSION_SP_PROV].Text = ""; } else { itmProjSoum.SubItems.Insert(I_COL_SOUMISSION_SP_PROV, new ListViewItem.ListViewSubItem(null, "")); }
                                        }
                                        else
                                        if (itmProjSoum.SubItems.Count > I_COL_SOUMISSION_SP_PROV) { itmProjSoum.SubItems[I_COL_SOUMISSION_SP_PROV].Text = ""; } else { itmProjSoum.SubItems.Insert(I_COL_SOUMISSION_SP_PROV, new ListViewItem.ListViewSubItem(null, "")); }
                                        itmProjSoum.SubItems[I_COL_SOUMISSION_SP_PROV].ForeColor = lColor;
                                    }
                                    rstProjSoum.MoveNext();
                                    lvwSoumission.Refresh();
                                }
                                if (lvwSoumission.Items.Count > 0)
                                {
                                    Deselect();
                                    lvwSoumission.Items[1].Selected = true;
                                }
                                CalculerPrix();
                                rstProjSoum.Close();
                                rstProjSoum = default;
                                rstFRS = default;
                                rstSection = default;
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec" + sNoProjSoum, "RemplirListViewProjSoum", ex);
            }
        }
        private void RemplirListViewSoumissionProjet(string sNoProjet)
        {
            try
            {
                ADODB.Recordset rstProjSoum = new ADODB.Recordset();
                ADODB.Recordset rstSection = new ADODB.Recordset();
                ADODB.Recordset rstFRS = new ADODB.Recordset();
                ListViewItem itmProjSoum;
                bool bPremierEnr;
                var iOrdreSection = default(bool);
                var sSousSection = default(string);
                string sSection;
                Color lColor;
                lvwSoumission.Items.Clear();
                bPremierEnr = true;
                rstProjSoum.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (m_eLangage == EnumLangage.ANGLAIS) { sSection = "NomSectionEN"; } else { sSection = "NomSectionFR"; } while (!rstProjSoum.EOF)
                {
                    itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                    if (bPremierEnr == true)
                    {
                        iOrdreSection = rstProjSoum.Fields["OrdreSection"].Value;
                        sSousSection = rstProjSoum.Fields["SousSection"].Value;
                        rstSection.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstProjSoum.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!(rstSection.Fields[sSection].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstSection.Fields[sSection].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstSection.Fields[sSection].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        ValeurParDefaut(itmProjSoum);
                        rstSection.Close();
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = sSousSection; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection)); }
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                        ValeurParDefaut(itmProjSoum);
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                        bPremierEnr = false;
                    }
                    else
                    if (iOrdreSection != rstProjSoum.Fields["OrdreSection"].Value)
                    {
                        iOrdreSection = rstProjSoum.Fields["OrdreSection"].Value;
                        rstSection.Open("SELECT " + sSection + " FROM SoumProjSectionMec WHERE IDSection = " + rstProjSoum.Fields["IDSection"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!(rstSection.Fields[sSection].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstSection.Fields[sSection].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstSection.Fields[sSection].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        ValeurParDefaut(itmProjSoum);
                        rstSection.Close();
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                        sSousSection = rstProjSoum.Fields["SousSection"].Value;
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["SousSection"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["SousSection"].Value)); }
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        ValeurParDefaut(itmProjSoum);
                        itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                    }
                    else
                    if (sSousSection != rstProjSoum.Fields["SousSection"].Value)
                    {
                        sSousSection = rstProjSoum.Fields["SousSection"].Value;
                        if ((sSousSection ?? "") == S_PAS_SOUS_SECTION)
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = sSousSection; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection)); }
                        ValeurParDefaut(itmProjSoum);
                        itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        itmProjSoum = lvwSoumission.Items.Add(string.Empty);
                    }
                    if (rstProjSoum.Fields["IDFRS"].Value == 0 & rstProjSoum.Fields["NumItem"].Value != "Texte" & rstProjSoum.Fields["NumItem"].Value != "Text")
                    {
                        lColor = COLOR_MAGENTA;
                    }
                    else
                    {
                        lColor = COLOR_NOIR;
                    }
                    itmProjSoum.Tag = rstProjSoum.Fields["IDSection"].Value;
                    if (rstProjSoum.Fields[".Visible"].Value == true) { itmProjSoum.Checked = true; } else { itmProjSoum.Checked = false; }
                    if (!(rstProjSoum.Fields["Qté"].Value is DBNull)) { itmProjSoum.Text = rstProjSoum.Fields["Qté"].Value; } else { itmProjSoum.Text = string.Empty; }
                    if (rstProjSoum.Fields["Quoté"].Value == true)
                    {
                        itmProjSoum.Text = itmProjSoum.Text + "*";
                        itmProjSoum.ForeColor = COLOR_VERT;
                        if (!(rstProjSoum.Fields["NumItem"].Value is DBNull))
                        {
                            if (rstProjSoum.Fields["NumItem"].Value == "Texte" | rstProjSoum.Fields["NumItem"].Value == "Text")
                            {
                                if (m_eLangage == EnumLangage.ANGLAIS)
                                {
                                    if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = "Text"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, "Text")); }
                                }
                                else
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = "Texte"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, "Texte")); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = rstProjSoum.Fields["NumItem"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["NumItem"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PIECE) { itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = lColor;
                        itmProjSoum.SubItems[I_COL_SOUM_PIECE].Tag = rstProjSoum.Fields["SousSection"].Value;
                        if (itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text == "Texte" | itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text == "Text")
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["DESC_FR"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DESC_FR"].Value)); }
                        }
                        else
                        if (m_eLangage == EnumLangage.ANGLAIS)
                        {
                            if (!(rstProjSoum.Fields["DESC_EN"].Value is DBNull))
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["DESC_EN"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DESC_EN"].Value)); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstProjSoum.Fields["DESC_FR"].Value is DBNull)) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = rstProjSoum.Fields["DESC_FR"].Value; } else { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = string.Empty; }
                        }
                        else
                        {
                            if (!(rstProjSoum.Fields["DESC_FR"].Value is DBNull))
                            {
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = rstProjSoum.Fields["DESC_FR"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["DESC_FR"].Value)); }
                            }
                            else
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DESCR) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            if (!(rstProjSoum.Fields["DESC_EN"].Value is DBNull)) { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = rstProjSoum.Fields["DESC_EN"].Value; } else { itmProjSoum.SubItems[I_COL_SOUM_DESCR].Tag = string.Empty; }
                        }
                        itmProjSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = lColor;
                        //Fabricant
                        if (!(rstProjSoum.Fields["Manufact"].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = rstProjSoum.Fields["Manufact"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Manufact"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MANUFACT) { itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = lColor;
                        itmProjSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = iOrdreSection.ToString();
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Prix_List"].Value)))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = rstProjSoum.Fields["Prix_list"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Prix_list"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = lColor;
                        itmProjSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = rstProjSoum.Fields["PrixOrigine"].Value;
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Escompte"].Value)))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = rstProjSoum.Fields["Escompte"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Escompte"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = lColor;
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Prix_net"].Value)))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = rstProjSoum.Fields["Prix_net"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Prix_net"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = lColor;
                        if (!(rstProjSoum.Fields["IDFRS"].Value is DBNull) & rstProjSoum.Fields["IDFRS"].Value > 0)
                        {
                            if (itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & itmProjSoum.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                            {
                                rstFRS.Open("SELECT NomFournisseur FROM Fournisseur WHERE IDFRS = " + rstProjSoum.Fields["IDFRS"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (itmProjSoum.SubItems.Count > I_COL_SOUM_DISTRIB)
                                {
                                    itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Text = rstFRS.Fields["NomFournisseur"].Value;
                                }
                                else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, rstFRS.Fields["NomFournisseur"].Value)); }
                                itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = lColor;
                                itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = rstProjSoum.Fields["IDFRS"].Value;
                                rstFRS.Close();
                            }
                        }
                        else
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_DISTRIB) { itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                            itmProjSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = 0.ToString();
                        }
                        if (!(rstProjSoum.Fields["Temps"].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_TEMPS].Text = rstProjSoum.Fields["Temps"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Temps"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_TEMPS) { itmProjSoum.SubItems[I_COL_SOUM_TEMPS].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = lColor;
                        if (!(rstProjSoum.Fields["Temps_total"].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].Text = rstProjSoum.Fields["Temps_total"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Temps_total"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_MONTAGE) { itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = lColor;
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Prix_total"].Value)))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(rstProjSoum.Fields["Prix_total"].Value, 2) + "$"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(rstProjSoum.Fields["Prix_total"].Value, 2) + "$")); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_TOTAL) { itmProjSoum.SubItems[I_COL_SOUM_TOTAL].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = lColor;
                        //Profit
                        if (!string.IsNullOrEmpty(Strings.Trim(rstProjSoum.Fields["Profit_argent"].Value)))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(rstProjSoum.Fields["Profit_Argent"].Value, 2) + "$"; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(rstProjSoum.Fields["Profit_Argent"].Value, 2) + "$")); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_PROFIT) { itmProjSoum.SubItems[I_COL_SOUM_PROFIT].Text = " "; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, " ")); }
                        itmProjSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = lColor;
                        if (!(rstProjSoum.Fields["Commentaire"].Value is DBNull))
                        {
                            if (itmProjSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = rstProjSoum.Fields["Commentaire"].Value; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Commentaire"].Value)); }
                        }
                        else
                        if (itmProjSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE) { itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = string.Empty; } else { itmProjSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        itmProjSoum.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = lColor;
                        rstProjSoum.MoveNext();
                        lvwSoumission.Refresh();
                    }
                    rstProjSoum.Close();
                    rstProjSoum = default;
                    rstFRS = default;
                    rstSection = default;
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListSoumissionProjet", ex);
            }
        }
        private void CalculerPrix()
        {
            try
            {
                var dblPrixPieces = default(double);
                double dblPrixTotal;
                double dblCommission;
                double dblTotalTemps;
                var dblProfit = default(double);
                double dblTotalManuel;
                double dblTotalImprevue;
                double dblGrandTotal;
                double dblTotalDessin;
                double dblTotalFabrication;
                double dblTotalAssemblage;
                double dblTotalProgInterface;
                double dblTotalProgAutomate;
                double dblTotalProgRobot;
                double dblTotalVision;
                double dblTotalTest;
                double dblTotalInstallation;
                double dblTotalMiseService;
                double dblTotalFormation;
                double dblTotalGestion;
                double dblTotalShipping;
                var dblHebergement = default(double);
                double dblRepas;
                double dblTransport;
                double dblUniteMobile;
                double dblPrixEmballage;
                double dblTotalResteTemps;
                var bDemande = default(bool);
                int iNbrePersonne;
                int X;
                if (m_bModeAffichage == false)
                {
                    var loopTo = lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo; X++)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                        {
                            if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text) & lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text != "Text")
                            {
                                if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_DISTRIB].Text))
                                {
                                    if (IsNumeric(lvwSoumission.Items[X].SubItems[I_COL_SOUM_TOTAL].Text) & IsNumeric(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text))
                                    {
                                        dblPrixPieces = dblPrixPieces + double.Parse(lvwSoumission.Items[X].SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text);
                                    }
                                    else
                                    {
                                        MessageBox.Show("La pièce " + lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text + " a un prix non numérique!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                    }
                                    if (IsNumeric(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text)) == true)
                                    {
                                        dblProfit = dblProfit + double.Parse(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text);
                                    }
                                }
                                else
                                {
                                    bDemande = true;
                                }
                            }
                        }
                    }
                    dblTotalDessin = double.Parse(m_sTempsDessin) * double.Parse(m_sTauxDessin);
                    if (m_bSansTemps == false)
                    {
                        dblTotalFabrication = double.Parse(m_sTempsFabrication) * double.Parse(m_sTauxFabrication);
                    }
                    else
                    {
                        dblTotalFabrication = 0d;
                    }
                    dblTotalAssemblage = double.Parse(m_sTempsAssemblage) * double.Parse(m_sTauxAssemblage);
                    dblTotalProgInterface = double.Parse(m_sTempsProgInterface) * double.Parse(m_sTauxProgInterface);
                    dblTotalProgAutomate = double.Parse(m_sTempsProgAutomate) * double.Parse(m_sTauxProgAutomate);
                    dblTotalProgRobot = double.Parse(m_sTempsProgRobot) * double.Parse(m_sTauxProgRobot);
                    dblTotalVision = double.Parse(m_sTempsVision) * double.Parse(m_sTauxVision);
                    dblTotalTest = double.Parse(m_sTempsTest) * double.Parse(m_sTauxTest);
                    dblTotalInstallation = double.Parse(m_sTempsInstallation) * double.Parse(m_sTauxInstallation);
                    dblTotalMiseService = double.Parse(m_sTempsMiseService) * double.Parse(m_sTauxMiseService);
                    dblTotalFormation = double.Parse(m_sTempsFormation) * double.Parse(m_sTauxFormation);
                    dblTotalGestion = double.Parse(m_sTempsGestion) * double.Parse(m_sTauxGestion);
                    dblTotalShipping = double.Parse(m_sTempsShipping) * double.Parse(m_sTauxShipping);
                    dblTotalTemps = dblTotalDessin + dblTotalFabrication + dblTotalAssemblage + dblTotalProgInterface + dblTotalProgAutomate + dblTotalProgRobot
                        + dblTotalVision + dblTotalTest + dblTotalInstallation + dblTotalMiseService + dblTotalFormation + dblTotalGestion + dblTotalShipping;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        dblHebergement = 0d;
                        dblRepas = 0d;
                        dblTransport = 0d;
                        dblUniteMobile = 0d;
                    }
                    else
                    {
                        iNbrePersonne = int.Parse(m_sNbrePersonne);
                        while (iNbrePersonne > 0)
                        {
                            if (iNbrePersonne >= 2) { dblHebergement = dblHebergement + double.Parse(m_sTempsHebergement) * double.Parse(m_sTauxHebergement2); iNbrePersonne -= 2; } else { dblHebergement = dblHebergement + double.Parse(m_sTempsHebergement) * double.Parse(m_sTauxHebergement1); iNbrePersonne--; }
                        }
                        dblRepas = double.Parse(m_sTempsRepas) * double.Parse(m_sTauxRepas) * double.Parse(m_sNbrePersonne);
                        dblTransport = double.Parse(m_sTempsTransport) * double.Parse(m_sTauxTransport);
                        dblUniteMobile = double.Parse(m_sTempsUniteMobile) * double.Parse(m_sTauxUniteMobile);
                    }
                    if (IsNumeric(m_sPrixEmballage)) { dblPrixEmballage = double.Parse(m_sPrixEmballage); } else { dblPrixEmballage = 0d; }
                    dblTotalResteTemps = dblHebergement + dblRepas + dblTransport + dblUniteMobile + dblPrixEmballage;
                    if (IsNumeric(txtPrixManuel.Text)) { dblTotalManuel = double.Parse(txtPrixManuel.Text); } else { dblTotalManuel = 0d; }
                    dblTotalImprevue = (dblPrixPieces + dblProfit) * double.Parse(m_sImprevue);
                    dblPrixTotal = dblPrixPieces + dblProfit + dblTotalTemps + dblTotalImprevue + dblTotalManuel + dblTotalResteTemps;
                    dblCommission = dblPrixTotal * double.Parse(m_sCommission);
                    dblGrandTotal = dblPrixTotal + dblCommission;
                    txtTotalPieces.Text = Math.Round(dblPrixPieces, 2).ToString() + "$";
                    txtTotalTemps.Text = Math.Round(dblTotalTemps, 2).ToString() + "$";
                    txtPrixTotal.Text = Math.Round(dblGrandTotal, 2).ToString() + "$";
                    if (bDemande == true)
                    {
                        txtPrixTotal.ForeColor = COLOR_JAUNE;
                    }
                    else

                    {
                        txtPrixTotal.ForeColor = COLOR_ROUGE;
                    }
                    txtImprevus.Text = Math.Round(dblTotalImprevue, 2).ToString() + "$";
                    txtCommission.Text = Math.Round(dblCommission, 2).ToString() + "$";
                    txtProfit.Text = Math.Round(dblProfit, 2).ToString() + "$";
                }
                else
                {
                    var loopTo1 = lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo1; X++)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                        {
                            if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text) & lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text != "Text")
                            {
                                if (m_bDroitPrix == true)
                                {
                                    if (string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_DISTRIB].Text))
                                    {
                                        bDemande = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (bDemande == true)
                    {
                        txtPrixTotal.ForeColor = COLOR_JAUNE;
                    }
                    else
                    {
                        txtPrixTotal.ForeColor = COLOR_ROUGE;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerPrix", ex);
            }
        }
        private void CalculerTempsFabricationRecordset(string sNoProjSoum)
        {
            try
            {
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstPiece;
                var dblTempsFab = default(double);
                rstProjet = new Recordset();
                rstPiece = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet ='" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstPiece.EOF)
                {
                    if (!string.IsNullOrEmpty(Strings.Trim(rstPiece.Fields["Temps_total"].Value)))
                    {
                        dblTempsFab = dblTempsFab + double.Parse(Strings.Replace(Strings.Trim(rstPiece.Fields["Temps_total"].Value), ".", ","));
                    }
                    rstPiece.MoveNext();
                }
                rstProjet.Fields["TempsFabrication"].Value = Strings.Replace((dblTempsFab / 10d).ToString(), ".", ",");
                rstProjet.Update();
                rstPiece.Close();
                rstPiece = default;
                rstProjet.Close();
                rstProjet = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerTempsFabricationRecordset", ex);
            }
        }
        private void CalculerTotalRecordset(string sNoProjSoum)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstPunch;
                double dblTotalDessin;
                double dblTotalFabrication;
                double dblTotalAssemblage;
                double dblTotalProgInterface = 0d;
                double dblTotalProgAutomate;
                double dblTotalProgRobot;
                double dblTotalVision;
                double dblTotalTest;
                double dblTotalInstallation;
                double dblTotalMiseService;
                double dblTotalFormation;
                double dblTotalGestion;
                double dblTotalShipping;
                double dblHebergement;
                double dblRepas;
                double dblTransport;
                double dblUniteMobile;
                double dblPrixEmballage;
                double dblTotalResteTemps;
                var dblPrixPieces = default(double);
                double dblPrixTotal;
                double dblCommission;
                double dblTotalTemps;
                var dblProfit = default(double);
                double dblTotalManuel;
                double dblTotalPieceImprevue;
                double dblGrandTotal;
                string sDateDebut;
                string sDateFin;
                string sTotal;
                string sFilterNoProjet;
                rstProjSoum = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET) { rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } else { rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); }
                if (!rstProjSoum.EOF)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (Droite(sNoProjSoum, 2) == "99") { sFilterNoProjet = "LEFT(NoProjet, 6) = '" + Gauche(sNoProjSoum, 6) + "'"; } else { sFilterNoProjet = "NoProjet = '" + sNoProjSoum + "'"; }
                        sDateDebut = "TIMESERIAL(Left(Punch.HeureDébut,2),RIGHT(Punch.HeureDébut,2),0)";
                        sDateFin = "TIMESERIAL(Left(Punch.HeureFin,2),RIGHT(Punch.HeureFin,2),0)";
                        sTotal = "(SUM(" + sDateFin + " - " + sDateDebut + ")* 24) As Total";
                        rstPunch = new Recordset();
                        rstPunch.Open("SELECT Type, " + sTotal + " FROM Punch WHERE " + sFilterNoProjet + " And HeureFin is not null AND HeureDébut is not null GROUP BY Type", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        dblTotalDessin = 0d;
                        dblTotalFabrication = 0d;
                        dblTotalAssemblage = 0d;
                        dblTotalProgInterface = 0d;
                        dblTotalProgAutomate = 0d;
                        dblTotalProgRobot = 0d;
                        dblTotalVision = 0d;
                        dblTotalTest = 0d;
                        dblTotalInstallation = 0d;
                        dblTotalMiseService = 0d;
                        dblTotalFormation = 0d;
                        dblTotalGestion = 0d;
                        dblTotalShipping = 0d;
                        while (!rstPunch.EOF)
                        {
                            //
                            if (!(rstPunch.Fields["Total"].Value is DBNull))
                            {
                                switch (rstPunch.Fields["Type"].Value)
                                {
                                    case "Dessin": { if (!(rstProjSoum.Fields["TauxDessin"].Value is DBNull)) { dblTotalDessin = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxDessin"].Value; } else { dblTotalDessin = 0d; } break; }
                                    case "Fabrication": { if (!(rstProjSoum.Fields["TauxFabrication"].Value is DBNull)) { dblTotalFabrication = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxFabrication"].Value; } else { dblTotalFabrication = 0d; } break; }
                                    case "Assemblage": { if (!(rstProjSoum.Fields["TauxAssemblage"].Value is DBNull)) { dblTotalAssemblage = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxAssemblage"].Value; } else { dblTotalAssemblage = 0d; } break; }
                                    case "ProgInterface": { if (!(rstProjSoum.Fields["TauxProgInterface"].Value is DBNull)) { dblTotalProgInterface = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxProgInterface"].Value; } else { dblTotalProgInterface = 0d; } break; }
                                    case "ProgAutomate": { if (!(rstProjSoum.Fields["TauxProgAutomate"].Value is DBNull)) { dblTotalProgAutomate = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxProgAutomate"].Value; } else { dblTotalProgAutomate = 0d; } break; }
                                    case "ProgRobot": { if (!(rstProjSoum.Fields["TauxProgRobot"].Value is DBNull)) { dblTotalProgRobot = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxProgRobot"].Value; } else { dblTotalProgRobot = 0d; } break; }
                                    case "Vision": { if (!(rstProjSoum.Fields["TauxVision"].Value is DBNull)) { dblTotalVision = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxVision"].Value; } else { dblTotalVision = 0d; } break; }
                                    case "Test": { if (!(rstProjSoum.Fields["TauxTest"].Value is DBNull)) { dblTotalTest = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxTest"].Value; } else { dblTotalTest = 0d; } break; }
                                    case "Installation": { if (!(rstProjSoum.Fields["TauxInstallation"].Value is DBNull)) { dblTotalInstallation = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxInstallation"].Value; } else { dblTotalInstallation = 0d; } break; }
                                    case "MiseService": { if (!(rstProjSoum.Fields["TauxMiseService"].Value is DBNull)) { dblTotalMiseService = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxMiseService"].Value; } else { dblTotalMiseService = 0d; } break; }
                                    case "Formation": { if (!(rstProjSoum.Fields["TauxFormation"].Value is DBNull)) { dblTotalFormation = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxFormation"].Value; } else { dblTotalFormation = 0d; } break; }
                                    case "Gestion": { if (!(rstProjSoum.Fields["TauxGestion"].Value is DBNull)) { dblTotalGestion = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxGestion"].Value; } else { dblTotalGestion = 0d; } break; }
                                    case "Shipping": { if (!(rstProjSoum.Fields["TauxShipping"].Value is DBNull)) { dblTotalShipping = (double)rstPunch.Fields["Total"].Value * (double)rstProjSoum.Fields["TauxShipping"].Value; } else { dblTotalShipping = 0d; } break; }
                                }
                            }
                            rstPunch.MoveNext();
                        }
                        rstPunch.Close();
                        rstPunch = default;
                    }
                    else
                    {
                        if (!(rstProjSoum.Fields["TempsDessin"].Value is DBNull) & !(rstProjSoum.Fields["TauxDessin"].Value is DBNull)) { dblTotalDessin = (double)rstProjSoum.Fields["TempsDessin"].Value * (double)rstProjSoum.Fields["TauxDessin"].Value; } else { dblTotalDessin = 0d; }
                        if (rstProjSoum.Fields["SansTemps"].Value == false)
                        {
                            if (!(rstProjSoum.Fields["TempsFabrication"].Value is DBNull) & !(rstProjSoum.Fields["TauxFabrication"].Value is DBNull)) { dblTotalFabrication = (double)rstProjSoum.Fields["TempsFabrication"].Value * (double)rstProjSoum.Fields["TauxFabrication"].Value; } else { dblTotalFabrication = 0d; }
                        }
                        else { dblTotalFabrication = 0d; }
                        if (!(rstProjSoum.Fields["TempsAssemblage"].Value is DBNull) & !(rstProjSoum.Fields["TauxAssemblage"].Value is DBNull)) { dblTotalAssemblage = (double)rstProjSoum.Fields["TempsAssemblage"].Value * (double)rstProjSoum.Fields["TauxAssemblage"].Value; } else { dblTotalAssemblage = 0d; }
                        if (!(rstProjSoum.Fields["TempsProgInterface"].Value is DBNull) & !(rstProjSoum.Fields["TauxProgInterface"].Value is DBNull)) { dblTotalProgInterface = (double)rstProjSoum.Fields["TempsProgInterface"].Value * (double)rstProjSoum.Fields["TauxProgInterface"].Value; } else { dblTotalProgInterface = 0d; }
                        if (!(rstProjSoum.Fields["TempsProgAutomate"].Value is DBNull) & !(rstProjSoum.Fields["TauxProgAutomate"].Value is DBNull)) { dblTotalProgAutomate = (double)rstProjSoum.Fields["TempsProgAutomate"].Value * (double)rstProjSoum.Fields["TauxProgAutomate"].Value; } else { dblTotalProgAutomate = 0d; }
                        if (!(rstProjSoum.Fields["TempsProgRobot"].Value is DBNull) & !(rstProjSoum.Fields["TauxProgRobot"].Value is DBNull)) { dblTotalProgRobot = (double)rstProjSoum.Fields["TempsProgRobot"].Value * (double)rstProjSoum.Fields["TauxProgRobot"].Value; } else { dblTotalProgRobot = 0d; }
                        if (!(rstProjSoum.Fields["TempsVision"].Value is DBNull) & !(rstProjSoum.Fields["TauxVision"].Value is DBNull)) { dblTotalVision = (double)rstProjSoum.Fields["TempsVision"].Value * (double)rstProjSoum.Fields["TauxVision"].Value; } else { dblTotalVision = 0d; }
                        if (!(rstProjSoum.Fields["TempsTest"].Value is DBNull) & !(rstProjSoum.Fields["TauxTest"].Value is DBNull)) { dblTotalTest = (double)rstProjSoum.Fields["TempsTest"].Value * (double)rstProjSoum.Fields["TauxTest"].Value; } else { dblTotalTest = 0d; }
                        if (!(rstProjSoum.Fields["TempsInstallation"].Value is DBNull) & !(rstProjSoum.Fields["TauxInstallation"].Value is DBNull)) { dblTotalInstallation = (double)rstProjSoum.Fields["TempsInstallation"].Value * (double)rstProjSoum.Fields["TauxInstallation"].Value; } else { dblTotalInstallation = 0d; }
                        if (!(rstProjSoum.Fields["TempsMiseService"].Value is DBNull) & !(rstProjSoum.Fields["TauxMiseService"].Value is DBNull)) { dblTotalMiseService = (double)rstProjSoum.Fields["TempsMiseService"].Value * (double)rstProjSoum.Fields["TauxMiseService"].Value; } else { dblTotalMiseService = 0d; }
                        if (!(rstProjSoum.Fields["TempsFormation"].Value is DBNull) & !(rstProjSoum.Fields["TauxFormation"].Value is DBNull)) { dblTotalFormation = (double)rstProjSoum.Fields["TempsFormation"].Value * (double)rstProjSoum.Fields["TauxFormation"].Value; } else { dblTotalFormation = 0d; }
                        if (!(rstProjSoum.Fields["TempsGestion"].Value is DBNull) & !(rstProjSoum.Fields["TauxGestion"].Value is DBNull)) { dblTotalGestion = (double)rstProjSoum.Fields["TempsGestion"].Value * (double)rstProjSoum.Fields["TauxGestion"].Value; } else { dblTotalGestion = 0d; }
                        if (!(rstProjSoum.Fields["TempsShipping"].Value is DBNull) & !(rstProjSoum.Fields["TauxShipping"].Value is DBNull)) { dblTotalShipping = (double)rstProjSoum.Fields["TempsShipping"].Value * (double)rstProjSoum.Fields["TauxShipping"].Value; } else { dblTotalShipping = 0d; }
                    }
                    dblTotalTemps = dblTotalDessin + dblTotalFabrication + dblTotalAssemblage + dblTotalProgInterface + dblTotalProgAutomate + dblTotalProgRobot + dblTotalVision
+ dblTotalTest + dblTotalInstallation + dblTotalMiseService + dblTotalFormation + dblTotalGestion + dblTotalShipping;
                    rstPiece = new Recordset();
                    if (m_eType == EnumType.TYPE_PROJET) { rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjSoum + "' AND Type = 'E'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); }
                    else
                    {
                        rstPiece.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoProjSoum + "' AND Type = 'E'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    while (!rstPiece.EOF)
                    {
                        if (!string.IsNullOrEmpty(Strings.Trim(rstPiece.Fields["Prix_total"].Value)))
                        {
                            dblPrixPieces = dblPrixPieces + (double)rstPiece.Fields["Prix_total"].Value - (double)rstPiece.Fields["Profit_Argent"].Value;
                            dblProfit = dblProfit + (double)rstPiece.Fields["Profit_Argent"].Value;
                        }
                        rstPiece.MoveNext();
                    }
                    rstPiece.Close();
                    rstPiece = default;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        dblHebergement = 0d;
                        dblRepas = 0d;
                        dblTransport = 0d;
                        dblUniteMobile = 0d;
                    }
                    else
                    {
                        if (!(rstProjSoum.Fields["TotalHebergement"].Value is DBNull)) { dblHebergement = (double)rstProjSoum.Fields["TotalHebergement"].Value; } else { dblHebergement = 0d; }
                        if (!(rstProjSoum.Fields["TotalRepas"].Value is DBNull)) { dblRepas = (double)rstProjSoum.Fields["TotalRepas"].Value; } else { dblRepas = 0d; }
                        if (!(rstProjSoum.Fields["TempsTransport"].Value is DBNull)) { dblTransport = (double)rstProjSoum.Fields["TempsTransport"].Value * (double)rstProjSoum.Fields["TauxTransport"].Value; } else { dblTransport = 0d; }
                        if (!(rstProjSoum.Fields["TempsUniteMobile"].Value is DBNull)) { dblUniteMobile = (double)rstProjSoum.Fields["TempsUniteMobile"].Value * (double)rstProjSoum.Fields["TauxUniteMobile"].Value; } else { dblUniteMobile = 0d; }
                    }
                    if (IsNumeric(rstProjSoum.Fields["PrixEmballage"].Value)) { dblPrixEmballage = (double)rstProjSoum.Fields["PrixEmballage"].Value; } else { dblPrixEmballage = 0d; }
                    dblTotalResteTemps = dblHebergement + dblRepas + dblTransport + dblUniteMobile + dblPrixEmballage;
                    if (IsNumeric(rstProjSoum.Fields["total_manuel"].Value)) { dblTotalManuel = (double)rstProjSoum.Fields["total_manuel"].Value; } else { dblTotalManuel = 0d; }
                    dblTotalPieceImprevue = (dblPrixPieces + dblProfit) * (1d + (double)rstProjSoum.Fields["Imprevue"].Value);
                    dblPrixTotal = dblTotalTemps + dblTotalManuel + dblTotalPieceImprevue + dblTotalResteTemps;
                    dblCommission = dblPrixTotal * (double)rstProjSoum.Fields["Commission"].Value;
                    dblGrandTotal = dblPrixTotal + dblCommission;
                    rstProjSoum.Fields["total_commission"].Value = dblCommission;
                    rstProjSoum.Fields["Total_manuel"].Value = dblTotalManuel;
                    rstProjSoum.Fields["Total_temps"].Value = dblTotalTemps;
                    rstProjSoum.Fields["total_imprevue"].Value = dblTotalPieceImprevue - (dblPrixPieces + dblProfit);
                    rstProjSoum.Fields["total_piece"].Value = dblPrixPieces;
                    rstProjSoum.Fields["Total_Commission"].Value.Text = Math.Round(dblCommission, 2).ToString() + "$";
                    rstProjSoum.Fields["PrixTotal"].Value.Text = Math.Round(dblGrandTotal, 2).ToString() + "$";
                    rstProjSoum.Fields["Total_Profit"].Value.Text = Math.Round(dblProfit, 2).ToString() + "$";
                    rstProjSoum.Update();
                }
                else
                if (m_eType == EnumType.TYPE_PROJET) { MessageBox.Show("Le projet " + sNoProjSoum + " est inexistant!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); } else { MessageBox.Show("La soumission " + sNoProjSoum + " est inexistant!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                rstProjSoum.Close();
                rstProjSoum = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerTotalRecordset " + sNoProjSoum, ex);
            }
        }
        private void CalculerPrixFacturation(string sNoFacturation, ref string sCommission, ref string sPrixTotal, ref string sProfit, ref string sTempsFabrication, ref string sTotalPiece, ref string sImprevue, ref string sTotalTemps, ref string sManuel)
        {
            try
            {
                int X;
                double dblTotalDessin;
                double dblTotalFabrication;
                double dblTotalAssemblage;
                double dblTotalProgInterface;
                double dblTotalProgAutomate;
                double dblTotalProgRobot;
                double dblTotalVision;
                double dblTotalTest;
                double dblTotalInstallation;
                double dblTotalMiseService;
                double dblTotalFormation;
                double dblTotalGestion;
                double dblTotalShipping;
                var dblPrixPieces = default(double);
                double dblPrixTotal;
                double dblCommission;
                double dblTotalTemps;
                var dblProfit = default(double);
                double dblTotalManuel;
                double dblTotalPieceImprevue;
                double dblGrandTotal;
                var dblTempsFabrication = default(double);
                dblTotalDessin = double.Parse(m_sTempsDessin) * double.Parse(m_sTauxDessin);
                if (m_bSansTemps == false) { dblTotalFabrication = double.Parse(m_sTempsFabrication) * double.Parse(m_sTauxFabrication); }
                else
                {
                    dblTotalFabrication = 0d;
                }
                dblTotalAssemblage = double.Parse(m_sTempsAssemblage) * double.Parse(m_sTauxAssemblage);
                dblTotalProgInterface = double.Parse(m_sTempsProgInterface) * double.Parse(m_sTauxProgInterface);
                dblTotalProgAutomate = double.Parse(m_sTempsProgAutomate) * double.Parse(m_sTauxProgAutomate);
                dblTotalProgRobot = double.Parse(m_sTempsProgRobot) * double.Parse(m_sTauxProgRobot);
                dblTotalVision = double.Parse(m_sTempsVision) * double.Parse(m_sTauxVision);
                dblTotalTest = double.Parse(m_sTempsTest) * double.Parse(m_sTauxTest);
                dblTotalInstallation = double.Parse(m_sTempsInstallation) * double.Parse(m_sTauxInstallation);
                dblTotalMiseService = double.Parse(m_sTempsMiseService) * double.Parse(m_sTauxMiseService);
                dblTotalFormation = double.Parse(m_sTempsFormation) * double.Parse(m_sTauxFormation);
                dblTotalGestion = double.Parse(m_sTempsGestion) * double.Parse(m_sTauxGestion);
                dblTotalShipping = double.Parse(m_sTempsShipping) * double.Parse(m_sTauxShipping);
                dblTotalTemps = dblTotalDessin + dblTotalFabrication + dblTotalAssemblage + dblTotalProgInterface + dblTotalProgAutomate
                    + dblTotalProgRobot + dblTotalVision + dblTotalTest + dblTotalInstallation + dblTotalMiseService + dblTotalFormation
                    + dblTotalGestion + dblTotalShipping;
                for (X = 1; X <= lvwSoumission.Items.Count; X++)
                {
                    if (lvwSoumission.Items[X].Tag != string.Empty)
                    {
                        if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text) & lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text != "Text")
                        {
                            if ((lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text ?? "") == (sNoFacturation ?? ""))
                            {
                                if (!string.IsNullOrEmpty(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_TOTAL].Text)))
                                {
                                    dblPrixPieces += double.Parse(lvwSoumission.Items[X].SubItems[I_COL_SOUM_TOTAL].Text);
                                    dblProfit += double.Parse(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text);
                                    if (m_bSansTemps == false)
                                    {
                                        if (!string.IsNullOrEmpty(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_MONTAGE].Text))) { dblTempsFabrication += double.Parse(lvwSoumission.Items[X].SubItems[I_COL_SOUM_MONTAGE].Text); }
                                    }
                                }
                            }
                        }
                    }
                }
                if (IsNumeric(txtPrixManuel.Text))
                {
                    dblTotalManuel = double.Parse(txtPrixManuel.Text);
                }
                else { dblTotalManuel = 0d; }
                dblTotalPieceImprevue = dblPrixPieces * (1d + double.Parse(m_sImprevue));
                dblPrixTotal = dblTotalTemps + dblTotalManuel + dblTotalPieceImprevue;
                dblCommission = dblPrixTotal * double.Parse(m_sCommission);
                dblGrandTotal = dblPrixTotal + dblCommission;
                sCommission = Math.Round(dblCommission, 2).ToString() + "$";
                sPrixTotal = Math.Round(dblGrandTotal, 2).ToString() + "$";
                sProfit = Math.Round(dblProfit, 2).ToString() + "$";
                sTempsFabrication = dblTempsFabrication.ToString();
                sImprevue = Math.Round(dblPrixPieces * double.Parse(m_sImprevue), 2).ToString() + "$";
                sManuel = Math.Round(dblTotalManuel, 2).ToString() + "$";
                sTotalPiece = Math.Round(dblPrixPieces, 2).ToString() + "$";
                sTotalTemps = Math.Round(dblTotalTemps, 2).ToString() + "$";
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerPrix", ex);
            }
        }
        private void ChoisirFournisseur1()
        {
            try
            {
                string sQuantite;
                var sSousSection = default(string);
                var bDemanderSS = default(bool);
                string sParams;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (lvwSoumission.FocusedItem.Index > 1)
                    {
                        if (VerintierEmplacement(lvwSoumission.FocusedItem.Index) == true)
                        {
                            if (lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Tag != string.Empty)
                            {
                                if (lvwSoumission.Items[lvwSoumission.FocusedItem.Index - 1].Tag != string.Empty)
                                {
                                    MessageBox.Show("Vous ne pouvez pas mettre une pièce entre une section et une sous-section", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                    fraFournisseur.Visible = false;
                                    Deselect();
                                    lvwSoumission.Items[1].Selected = true;
                                    return;
                                }
                                else
                                {
                                    sSousSection = (string)lvwSoumission.Items[lvwSoumission.FocusedItem.Index - 1].SubItems[I_COL_SOUM_PIECE].Tag;
                                }
                            }
                            else
                            {
                                sSousSection = (string)lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Tag;
                            }
                        }
                    }
                    else
                    { bDemanderSS = true; }
                }
                else
                {
                    bDemanderSS = true;
                }
                sQuantite = Interaction.InputBox("Quelle est la quantité?");
                sQuantite.Replace(".", ",");
                if (!string.IsNullOrEmpty(sQuantite))
                {
                    if (!IsNumeric(sQuantite))
                    {
                        MessageBox.Show("Quantité non numérique!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                    else
                    if (double.Parse(sQuantite) < 0d)
                    {
                        if (lvwFournisseur.FocusedItem.Text == "CHOISIR ULTÉRIEUREMENT") { MessageBox.Show("Impossible de faire une demande de prix sur une pièce négative!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                    }
                }
                else
                {
                    return;
                }
                if (bDemanderSS == true)
                {
                    if ((m_sSousSection ?? "") != S_PAS_SOUS_SECTION)
                    {
                        sSousSection =
                                             Interaction.InputBox("Quelle est la sous-section?", DefaultResponse: m_sSousSection);
                    }
                    else
                    {
                        sSousSection =
                                           Interaction.InputBox("Quelle est la sous-section?");
                    }
                }
                if (string.IsNullOrEmpty(sSousSection))
                {
                    sSousSection = S_PAS_SOUS_SECTION;
                    m_sSousSection = string.Empty;
                }
                else { m_sSousSection = sSousSection; }
                if (double.Parse(sQuantite) < 0d)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 60d & double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 98d) { AjouterNegatintDansListView(double.Parse(sQuantite), sSousSection); } else { AjouterDansListViewSoumission(double.Parse(sQuantite), sSousSection); }
                    }
                    else
                    { AjouterDansListViewSoumission(double.Parse(sQuantite), sSousSection); }
                }
                else
                {
                    AjouterDansListViewSoumission(double.Parse(sQuantite), sSousSection);
                }
                CalculerPrix();
                fraFournisseur.Visible = false;
                if (lvwSoumission.Items.Count > 0)
                {
                    Deselect();
                    lvwSoumission.Items[1].Selected = true;
                }
                return;
            }
            catch (Exception ex)
            {
                if (Information.Err().Number == 13 & Information.Erl() == 110)
                {
                    ex.Source = (string)Operators.ConcatenateObject("cmbSections.Text : " + cmbSections.Text + "   " + "No Proj/Soum : " + txtNoProjSoum.Text + "   " + "lvwSoumission.SelectedItem.Index - 1 : " + (lvwSoumission.FocusedItem.Index - 1) + "   " + "lvwSoumission.ListItems(lvwSoumission.SelectedItem.Index - 1).ListSubItems(I_COL_SOUM_MANUFACT).Tag : ", lvwSoumission.Items[lvwSoumission.FocusedItem.Index - 1].SubItems[I_COL_SOUM_MANUFACT].Tag);
                    AfficherErreur("ProjSoumMec", "ChoisirFournisseur", ex);
                }
                else
                {
                    AfficherErreur("ProjSoumMec", "ChoisirFournisseur", ex);
                }
            }
        }
        private void AfficherListeFournisseurs()
        {
            try
            {
                RemplirListViewFournisseur();
                if (lvwFournisseur.Items.Count > 1)
                {
                    if (m_bRecherchePiece == true) { fraPieceTrouve.Visible = false; }
                    fraFournisseur.Visible = true;
                    lvwFournisseur.Focus();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AfficherListeFournisseurs", ex);
            }
        }
        private void ChoisirFournisseurMateriel()
        {
            try
            {
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstConfig;
                ListViewItem itmAncien;
                ListViewItem itmNouveau;
                string sQuantite;
                var sExtra = default(string);
                string sTauxUSA;
                string sTauxSPA;
                if (m_bChangementFRS == true)
                {
                    if (lvwFournisseur.FocusedItem.Text != "CHOISIR ULTÉRIEUREMENT")
                    {
                        rstConfig = new Recordset();
                        rstConfig.Open("SELECT TauxAmericain, TauxEspagnol FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        sTauxUSA = rstConfig.Fields["TauxAmericain"].Value;
                        sTauxSPA = rstConfig.Fields["TauxEspagnol"].Value;
                        rstConfig.Close();
                        rstConfig = default;
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DISTRIB) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].Text = lvwFournisseur.FocusedItem.Text; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.Text)); }
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].Tag = lvwFournisseur.FocusedItem.Tag;
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BRUN, false)))
                        {
                            if (string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text)))
                            {
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_LIST) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].Text = "0"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, "0")); }
                            }
                            else
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "USA", false)))
                            {
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_LIST) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxUSA), 4).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxUSA), 4).ToString())); }
                            }
                            else
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "SPA", false)))
                            {
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_LIST) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxSPA), 4).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text) / double.Parse(sTauxSPA), 4).ToString())); }
                            }
                            else
                            if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_LIST) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Text)); }
                            lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].Tag = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_LIST].Tag;
                            if (!string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text)))
                            {
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_ESCOMPTE) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ESCOMPTE].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ESCOMPTE].Text; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ESCOMPTE].Text)); }
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "USA", false)))
                                {
                                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxUSA), 4).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxUSA), 4).ToString())); }
                                }
                                else
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "SPA", false)))
                                {
                                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxSPA), 4).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text) / double.Parse(sTauxSPA), 4).ToString())); }
                                }
                                else
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_NET].Text)); }
                            }
                            else
                            if (!string.IsNullOrEmpty(Strings.Trim(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text)))
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "USA", false)))
                                {
                                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxUSA), 4).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxUSA), 4).ToString())); }
                                }
                                else
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag, "SPA", false)))
                                {
                                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxSPA), 4).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text) / double.Parse(sTauxSPA), 4).ToString())); }
                                }
                                else
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PRIX_SP].Text)); }
                            }
                            else
                            {
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_ESCOMPTE) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ESCOMPTE].Text = "0"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, "0")); }
                                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = "0"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, "0")); }
                            }
                            if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_TOTAL) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)) * double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)) * double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString())); }
                            lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Tag = lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_PERS_RESS].Tag;
                            if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PROFIT) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)), 2).ToString() + "$"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)), 2).ToString() + "$")); }
                        }
                    }
                    else
                    {
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DISTRIB) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].Text = string.Empty; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].Tag = 0.ToString();
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_LIST) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].Text = "0"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, "0")); }
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_ESCOMPTE) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ESCOMPTE].Text = "0"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, "0")); }
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PRIX_NET) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text = "0"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, "0")); }
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_TOTAL) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)) * double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(); } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)) * double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString())); }
                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PROFIT) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)), 2).ToString() + "$"; } else { lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)), 2).ToString() + "$")); }
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            if (!string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_COMMENTAIRE].Text)) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = COLOR_MAGENTA; }
                            if (!string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_FACTURATION].Text)) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_FACTURATION].ForeColor = COLOR_MAGENTA; }
                            if (!string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ID].Text)) { lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ID].ForeColor = COLOR_MAGENTA; }
                        }
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_MANUFACT].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_MONTAGE].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TEMPS].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_TOTAL].ForeColor = COLOR_MAGENTA;
                        lvwSoumission.Refresh();
                    }
                    CalculerPrix();
                    fraFournisseur.Visible = false;
                    m_bPieceInutile = false;
                    m_bChangementFRS = false;
                }
                else
                {
                    if (Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "00", false) >= 0 & Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "19", false) <= 0)
                    {
                        sExtra = Interaction.InputBox("Dans quel extra le retour doit être fait ? (2 chintfres seulement)");
                        if (Strings.Len(sExtra) != 2) { MessageBox.Show("Format incorrect!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                        if (!IsNumeric(sExtra)) { MessageBox.Show("L'extra doit être numérique!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                        if (double.Parse(sExtra) < 60d | double.Parse(sExtra) > 98d) { MessageBox.Show("L'extra doit être entre 60 et 98!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                        rstProjet = new Recordset();
                        rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjet.EOF) { MessageBox.Show("Le projet " + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + " n'existe pas!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); rstProjet.Close(); rstProjet = default; return; } else { rstProjet.Close(); rstProjet = default; }
                    }
                    sQuantite = Interaction.InputBox("Quelle est la quantité?");
                    sQuantite = Strings.Replace(sQuantite, ".", ",");
                    sQuantite = Strings.Replace(sQuantite, "-", "");
                    if (!string.IsNullOrEmpty(sQuantite))
                    {
                        if (!IsNumeric(sQuantite)) { MessageBox.Show("Quantité non numérique!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; }
                    }
                    else
                    { return; }
                    if (double.Parse(sQuantite) <= double.Parse(Strings.Replace(lvwSoumission.FocusedItem.Text, "*", string.Empty)))
                    {
                        itmAncien = lvwSoumission.FocusedItem;
                        itmNouveau = lvwSoumission.Items.Insert(itmAncien.Index + 1, "");
                        itmNouveau.Checked = itmAncien.Checked;
                        itmNouveau.Text = "-" + sQuantite;
                        itmNouveau.Tag = itmAncien.Tag;
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_PIECE) { itmNouveau.SubItems[I_COL_SOUM_PIECE].Text = itmAncien.SubItems[I_COL_SOUM_PIECE].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_PIECE].Text)); }
                        itmNouveau.SubItems[I_COL_SOUM_PIECE].Tag = itmAncien.SubItems[I_COL_SOUM_PIECE].Tag;
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_DESCR) { itmNouveau.SubItems[I_COL_SOUM_DESCR].Text = itmAncien.SubItems[I_COL_SOUM_DESCR].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_DESCR].Text)); }
                        itmNouveau.SubItems[I_COL_SOUM_DESCR].Tag = itmAncien.SubItems[I_COL_SOUM_DESCR].Tag;
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_MANUFACT) { itmNouveau.SubItems[I_COL_SOUM_MANUFACT].Text = itmAncien.SubItems[I_COL_SOUM_MANUFACT].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_MANUFACT].Text)); }
                        itmNouveau.SubItems[I_COL_SOUM_MANUFACT].Tag = itmAncien.SubItems[I_COL_SOUM_MANUFACT].Tag;
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmNouveau.SubItems[I_COL_SOUM_PRIX_LIST].Text = itmAncien.SubItems[I_COL_SOUM_PRIX_LIST].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_PRIX_LIST].Text)); }
                        itmNouveau.SubItems[I_COL_SOUM_PRIX_LIST].Tag = itmAncien.SubItems[I_COL_SOUM_PRIX_LIST].Tag;
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmNouveau.SubItems[I_COL_SOUM_ESCOMPTE].Text = itmAncien.SubItems[I_COL_SOUM_ESCOMPTE].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_ESCOMPTE].Text)); }
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].Text = itmAncien.SubItems[I_COL_SOUM_PRIX_NET].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_PRIX_NET].Text)); }
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_DISTRIB) { itmNouveau.SubItems[I_COL_SOUM_DISTRIB].Text = lvwFournisseur.FocusedItem.Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.Text)); }
                        itmNouveau.SubItems[I_COL_SOUM_DISTRIB].Tag = lvwFournisseur.FocusedItem.Tag;
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_TEMPS) { itmNouveau.SubItems[I_COL_SOUM_TEMPS].Text = itmAncien.SubItems[I_COL_SOUM_TEMPS].Text; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, itmAncien.SubItems[I_COL_SOUM_TEMPS].Text)); }
                        if (!string.IsNullOrEmpty(Strings.Trim(itmNouveau.SubItems[I_COL_SOUM_TEMPS].Text)))
                        {
                            if (itmNouveau.SubItems.Count > I_COL_SOUM_MONTAGE) { itmNouveau.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmNouveau.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmNouveau.Text, "*", string.Empty))).ToString(); } else { itmNouveau.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmNouveau.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmNouveau.Text, "*", string.Empty))).ToString())); }
                        }
                        else
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_MONTAGE) { itmNouveau.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_TOTAL) { itmNouveau.SubItems[I_COL_SOUM_TOTAL].Text = Math.Round(double.Parse(Strings.Replace(itmNouveau.Text, "*", "")) * double.Parse(itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(m_sProfit), 2).ToString() + "$"; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(Strings.Replace(itmNouveau.Text, "*", "")) * double.Parse(itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(m_sProfit), 2).ToString() + "$")); }
                        if (itmNouveau.SubItems.Count > I_COL_SOUM_PROFIT) { itmNouveau.SubItems[I_COL_SOUM_PROFIT].Text = Math.Round(double.Parse(itmNouveau.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(Strings.Replace(itmNouveau.Text, "*", "")) * double.Parse(itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].Text), 2).ToString() + "$"; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Math.Round(double.Parse(itmNouveau.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(Strings.Replace(itmNouveau.Text, "*", "")) * double.Parse(itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].Text), 2).ToString() + "$")); }
                        if (Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "00", false) >= 0 & Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "19", false) <= 0)
                        {
                            if (itmNouveau.SubItems.Count > I_COL_SOUM_DATE_COMMANDE) { itmNouveau.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = " "; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, " ")); }
                            if (itmNouveau.SubItems.Count > I_COL_SOUM_DATE_REQUISE) { itmNouveau.SubItems[I_COL_SOUM_DATE_REQUISE].Text = " "; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, " ")); }
                            if (itmNouveau.SubItems.Count > I_COL_SOUM_NOM_COMMANDE) { itmNouveau.SubItems[I_COL_SOUM_NOM_COMMANDE].Text = " "; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_NOM_COMMANDE, new ListViewItem.ListViewSubItem(null, " ")); }
                            if (itmNouveau.SubItems.Count > I_COL_SOUM_NO_SEQUENTIEL) { itmNouveau.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text = " "; } else { itmNouveau.SubItems.Insert(I_COL_SOUM_NO_SEQUENTIEL, new ListViewItem.ListViewSubItem(null, " ")); }
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(itmAncien.SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_NOIR, false))) { itmNouveau.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_DESCR].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_DISTRIB].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_ID].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_MANUFACT].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_MONTAGE].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_PIECE].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_PROFIT].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_TEMPS].ForeColor = COLOR_NOIR; itmNouveau.SubItems[I_COL_SOUM_TOTAL].ForeColor = COLOR_NOIR; } else { itmNouveau.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_DESCR].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_DISTRIB].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_ID].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_MANUFACT].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_MONTAGE].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_PIECE].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_PROFIT].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_TEMPS].ForeColor = COLOR_BRUN; itmNouveau.SubItems[I_COL_SOUM_TOTAL].ForeColor = COLOR_BRUN; }
                            CalculerTempsFabrication();
                            CalculerPrix();
                            fraFournisseur.Visible = false;
                            m_bPieceInutile = false;
                            if (lvwSoumission.Items.Count > 0) { Deselect(); lvwSoumission.Items[1].Selected = true; }
                        }
                        else
                        { MessageBox.Show("Quantité trop grande!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                    }
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ChoisirFournisseurMateriel", ex);
            }
        }
        private void FacturerDate()
        {
            try
            {
                int X;
                for (X = 1; X <= lvwSoumission.Items.Count; X++)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, "", false)))
                    {
                        if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text))
                        {
                            if (lvwSoumission.Items[X].Selected == true)
                            {
                                if (Gauche(lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text, 2) == "F-")
                                {
                                    if (lvwSoumission.Items[X].SubItems.Count > I_COL_SOUM_FACTURATION) { lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text = ""; } else { lvwSoumission.Items[X].SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, "")); }
                                }
                                if (string.IsNullOrEmpty(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text)))
                                {
                                    if (lvwSoumission.Items[X].SubItems.Count > I_COL_SOUM_FACTURATION) { lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text = "F-" + txtDateFacturation.Text; } else { lvwSoumission.Items[X].SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, "F-" + txtDateFacturation.Text)); }
                                }
                            }
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "FacturerDate", ex);
            }
        }
        private void FacturerNC()
        {
            try
            {
                int X;
                for (X = 1; X <= lvwSoumission.Items.Count; X++)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, "", false)))
                    {
                        if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text))
                        {
                            if (lvwSoumission.Items[X].Selected == true)
                            {
                                if (lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text == "NC")
                                {
                                    if (lvwSoumission.Items[X].SubItems.Count > I_COL_SOUM_FACTURATION) { lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text = ""; } else { lvwSoumission.Items[X].SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, "")); }
                                }
                                if (string.IsNullOrEmpty(Strings.Trim(lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text)))
                                {
                                    if (lvwSoumission.Items[X].SubItems.Count > I_COL_SOUM_FACTURATION)
                                    {
                                        lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text = "NC";
                                    }
                                    else
                                    {
                                        lvwSoumission.Items[X].SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, "NC"));
                                    }
                                }
                            }
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "FacturerNC", ex);
            }
        }
        private void RechercherPieceListViewSoumission(string sTexte)
        {
            try
            {
                int X;
                int iSelected;
                var bTrouve = default(bool);
                if (lvwSoumission.FocusedItem.Index == 1) { iSelected = 1; }
                else
                if (lvwSoumission.FocusedItem.Index + 1 > lvwSoumission.Items.Count) { iSelected = 1; } else { iSelected = lvwSoumission.FocusedItem.Index + 1; }
                var loopTo = lvwSoumission.Items.Count;
                for (X = iSelected; X <= loopTo; X++)
                {
                    if (Strings.InStr(1, Strings.UCase(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text), Strings.UCase(sTexte)) > 0)
                    {
                        lvwSoumission.Focus();
                        Deselect();
                        lvwSoumission.Items[X].Selected = true;
                        lvwSoumission.Focus();
                        bTrouve = true;
                        break;
                    }
                }
                if (bTrouve == false)
                {
                    var loopTo1 = iSelected - 1;
                    for (X = 1; X <= loopTo1; X++)
                    {
                        if (Strings.InStr(1, Strings.UCase(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text), Strings.UCase(sTexte)) > 0)
                        {
                            lvwSoumission.Focus(); Deselect(); lvwSoumission.Items[X].Selected = true;
                        }
                    }
                    if (bTrouve == false) { MessageBox.Show("Aucun enregistrement trouvé!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RechercherPieceListViewSoumission", ex);
            }
        }
        private void EffacerItemListViewSoumission()
        {
            var COLOR_BRUN = default(object);
            try
            {
                bool bSeulSS;
                bool bSeulS;
                int iIndex;
                ListViewItem itmPrecedent;
                ListViewItem itmSuivant;
                int X;
                string sMessage;
                var iNbreSelected = default(int);
                bool bSupprimer;
                var bPermission = default(bool);
                var loopTo = lvwSoumission.Items.Count;
                for (X = 1; X <= loopTo; X++)
                {
                    if (lvwSoumission.Items[X].Selected == true)
                    {
                        iNbreSelected++;
                        if (iNbreSelected > 1) { break; }
                    }
                }
                if (iNbreSelected > 1) { sMessage = "Voulez-vous vraiment effacer ces pièces?"; } else { sMessage = "Voulez-vous vraiment effacer cette pièce?"; }
                if (m_eType == EnumType.TYPE_SOUMISSION) { bPermission = true; }
                else
                if (iNbreSelected > 1) { bPermission = true; }
                else
                {
                    var loopTo1 = lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo1; X++)
                    {
                        if (lvwSoumission.Items[X].Selected == true) { break; }
                    }
                    if (Conversions.ToBoolean(Operators.OrObject(Operators.OrObject(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_NOIR, false), Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BRUN, false)), Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_MAGENTA, false)))) { bPermission = true; }
                }
                X = 1;
                if (bPermission == true)
                {
                    if (MessageBox.Show(sMessage, "Projet soumission", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        while (X <= lvwSoumission.Items.Count)
                        {
                            bSupprimer = false; bSeulS = false; bSeulSS = false;
                            if (lvwSoumission.Items[X].Selected == true)
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                                {
                                    if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text))
                                    {
                                        if (m_eType == EnumType.TYPE_SOUMISSION)
                                        {
                                            bSupprimer = true;
                                        }
                                        else
                                        if (Conversions.ToBoolean(Operators.OrObject(Operators.OrObject(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_NOIR, false), Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_BRUN, false)), Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor, COLOR_MAGENTA, false)))) { bSupprimer = true; }
                                        if (bSupprimer == true)
                                        {
                                            if (string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text))
                                            {
                                                if (lvwSoumission.Items[X].SubItems.Count > I_COL_SOUM_PROFIT)
                                                {
                                                    lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Text = " ";
                                                }
                                                else
                                                {
                                                    lvwSoumission.Items[X].SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, " "));
                                                }
                                            }
                                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PROFIT].Tag, "EXTRA", false)))
                                            {
                                                if (m_bModeAjout == false) { AjouterSuppressionList<String>(X); }
                                                iIndex = X;
                                                if (iIndex == lvwSoumission.Items.Count)
                                                {
                                                    if (string.IsNullOrEmpty(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_PIECE].Text))
                                                    {
                                                        bSeulSS = true;
                                                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[iIndex - 2].Tag, string.Empty, false)))
                                                        {
                                                            bSeulS = true;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    itmPrecedent = lvwSoumission.Items[iIndex - 1]; itmSuivant = lvwSoumission.Items[iIndex + 1];
                                                    if (Conversions.ToBoolean(Operators.AndObject(Operators.ConditionalCompareObjectEqual(itmPrecedent.SubItems[I_COL_SOUM_PIECE].Tag, string.Empty, false), Operators.OrObject(Operators.ConditionalCompareObjectEqual(itmSuivant.Tag, string.Empty, false), Operators.AndObject(Operators.ConditionalCompareObjectNotEqual(itmSuivant.Tag, string.Empty, false), Operators.ConditionalCompareObjectEqual(itmSuivant.SubItems[I_COL_SOUM_PIECE].Tag, string.Empty, false))))))
                                                    {
                                                        bSeulSS = true;
                                                        if (lvwSoumission.Items[iIndex - 2].Tag != string.Empty & itmSuivant.Tag != string.Empty)
                                                        {
                                                            bSeulS = true;
                                                        }
                                                    }
                                                }
                                                lvwSoumission.Items.RemoveAt(iIndex);
                                                if (bSeulSS == true) { lvwSoumission.Items.RemoveAt(iIndex - 1); X++; }
                                                if (bSeulS == true) { lvwSoumission.Items.RemoveAt(iIndex - 2); X++; }
                                                CalculerTempsFabrication();
                                                CalculerPrix();
                                            }
                                            else
                                            {
                                                MessageBox.Show("La pièce " + lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text + " doit être effacée dans le projet " + lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROVENANCE].Text, "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); X++;
                                            }
                                        }
                                        else { MessageBox.Show("La pièce " + lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text + " ne peut pas être supprimée!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); X++; }
                                    }
                                    else { X++; }
                                }
                                else { X++; }
                            }
                            else { X++; }
                        }
                    }
                    else
                    { bPermission = false; }
                }
                if (lvwSoumission.Items.Count > 0)
                {
                    if (bPermission == true)
                    {
                        Deselect();
                        lvwSoumission.Items[1].Selected = true;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "EffacerItemListViewSoumission", ex);
            }
        }
        private void AjouterSuppressionList<String>(int iIndex)
        {
            try
            {
                if (lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                {
                    m_collQteSupp.Add(Strings.Replace(lvwSoumission.Items[iIndex].Text, "*", ""));
                    m_collNoItemSupp.Add(lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Text);
                    m_collDateSupp.Add(ConvertDate(DateTime.Today));
                    m_collHeureSupp.Add(DateTime.Now.ToShortTimeString());
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterSuppressionList<String>", ex);
            }
        }
        private void EnregistrerSuppression()
        {
            try
            {
                ADODB.Recordset rstBavard;
                bool IdNoEmploye;
                int X;
                rstBavard = new Recordset();
                rstBavard.Open("SELECT * FROM BavardSuppression", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                var loopTo = m_collNoItemSupp.Count;
                for (X = 1; X <= loopTo; X++)
                {
                    rstBavard.AddNew();
                    rstBavard.Fields["IDUser"].Value = Program.IdNoEmploye;
                    rstBavard.Fields["NoProjsoum"].Value = txtNoProjSoum.Text;
                    rstBavard.Fields["Type"].Value = "E";
                    rstBavard.Fields["Qté"].Value = m_collQteSupp[X];
                    rstBavard.Fields["No Item"].Value = m_collNoItemSupp[X];
                    rstBavard.Fields["Date"].Value = m_collDateSupp[X];
                    rstBavard.Fields["Heure"].Value = m_collHeureSupp[X];
                    rstBavard.Update();
                }
                rstBavard.Close();
                rstBavard = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "EnregistrerSuppression", ex);
            }
        }
        private void RemplirComboFournisseur()
        {
            try
            {
                ADODB.Recordset rstFRS;
                bool bExiste;
                rstFRS = new Recordset();
                cmbfrs.Items.Clear();
                rstFRS.Open("SELECT PiecesFRS.*, Fournisseur.NomFournisseur FROM PiecesFRS " +
                    "INNER JOIN Fournisseur ON PiecesFRS.IDFRS = Fournisseur.IDFRS WHERE PIECE = '" + Strings.Replace(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text, "'", "''") + "' ORDER BY NomFournisseur", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                while (!rstFRS.EOF)
                {
                    bExiste = false;
                    for (int X = 0; X <= cmbfrs.Items.Count - 1; X++)
                    {
                        if (cmbfrs.Items[X].ToString() == rstFRS.Fields[16].Value) { bExiste = true; break; }
                    }
                    if (bExiste == false)
                    {
                        cmbfrs.Items.Add($"{rstFRS.Fields[16].Value} - {rstFRS.Fields[1].Value}");
                    }
                    rstFRS.MoveNext();
                }
                rstFRS.Close();
                rstFRS = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirComboFournisseur", ex);
            }
        }
        private void CalculerPrixNet()
        {
            try
            {
                double dblEscompte;
                double dblPrix;
                if (txtPrixNet.ReadOnly == false)
                {
                    mskEscompte.Text = Strings.Replace(mskEscompte.Text, "_", string.Empty);
                    mskEscompte.Text = Strings.Replace(mskEscompte.Text, ".", ",");
                    if (!string.IsNullOrEmpty(mskEscompte.Text))
                    {
                        dblEscompte = double.Parse(mskEscompte.Text);
                    }
                    else { dblEscompte = 0d; }
                    if (!string.IsNullOrEmpty(txtPrixList.Text)) { dblPrix = double.Parse(Strings.Replace(txtPrixList.Text, ".", ",")); } else { dblPrix = 0d; }
                    txtPrixNet.Text = Math.Round(dblPrix * (1d - dblEscompte), 4).ToString();
                    txtPrixNet.Text = Strings.Replace(txtPrixNet.Text, ".", ",");
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CalculerPrixNet", ex);
            }
        }
        private void ViderChamps_frs()
        {
            try
            {
                txtPrixList.Text = string.Empty;
                mskEscompte.Text = string.Empty;
                txtPrixNet.Text = string.Empty;
                txtPrixSpecial.Text = string.Empty;
                optCAN.Checked = true;
                AfficherDrapeau();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ViderChamps_frs", ex);
            }
        }
        private void AfficherDrapeau()
        {
            try
            {
                if (optCAN.Checked == true)
                {
                    imgCanada.Visible = true;
                    imgEU.Visible = false;
                    imgSpain.Visible = false;
                }
                else if (optUSA.Checked == true)
                {
                    imgEU.Visible = true;
                    imgCanada.Visible = false;
                    imgSpain.Visible = false;
                }
                else
                {
                    imgSpain.Visible = true;
                    imgCanada.Visible = false;
                    imgEU.Visible = false;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AfficherDrapeau", ex);
            }
        }
        private void ModintierPrixCatalogue()
        {
            try
            {
                ADODB.Recordset rstPrix;
                double dblPrixList;
                double dblEscompte;
                double dblPrixNet;
                if (!string.IsNullOrEmpty(Strings.Trim(txtPrixList.Text))) { dblPrixList = double.Parse(txtPrixList.Text); } else { dblPrixList = 0d; }
                if (!string.IsNullOrEmpty(mskEscompte.Text))
                {
                    dblEscompte = double.Parse(mskEscompte.Text);
                }
                else { dblEscompte = 0d; }
                if (!string.IsNullOrEmpty(Strings.Trim(txtPrixNet.Text))) { dblPrixNet = double.Parse(txtPrixNet.Text); } else { dblPrixNet = double.Parse(txtPrixSpecial.Text); }
                rstPrix = new Recordset();
                if (txtPrixNet.Enabled == true)
                {
                    rstPrix.Open("SELECT * FROM PiecesFRS WHERE PIECE = '" + lvwSoumission.Items[(int)fraPrixPiece.Tag].SubItems[I_COL_SOUM_PIECE].Text.Replace("'", "''") + "' AND IDFRS = " + cmbfrs.Items[cmbfrs.SelectedIndex].ToString() + " AND PRIX_NET <> ''", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstPrix.EOF)
                    {
                        rstPrix.AddNew();
                        rstPrix.Fields["PIECE"].Value = lvwSoumission.Items[(int)fraPrixPiece.Tag].SubItems[I_COL_SOUM_PIECE].Text;
                        rstPrix.Fields["IDFRS"].Value = GetFournisseurID(cmbfrs.Items[cmbfrs.SelectedIndex].ToString());
                    }
                    rstPrix.Fields["PRIX_LIST"].Value = dblPrixList;
                    rstPrix.Fields["ESCOMPTE"].Value = dblEscompte;
                    rstPrix.Fields["PRIX_NET"].Value = dblPrixNet;
                    rstPrix.Fields["PRIX_SP"].Value = "";
                }
                else
                {
                    rstPrix.Open("SELECT * FROM PiecesFRS WHERE PIECE = '" + cmbfrs.Items[cmbfrs.SelectedIndex].ToString() + "' AND IDFRS = " + cmbfrs.Items[cmbfrs.SelectedIndex].ToString() + " AND PRIX_SP <> ''", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstPrix.EOF)
                    {
                        rstPrix.AddNew();
                        rstPrix.Fields["PIECE"].Value = lvwSoumission.Items[(int)fraPrixPiece.Tag].SubItems[I_COL_SOUM_PIECE].Text;
                        rstPrix.Fields["IDFRS"].Value = GetFournisseurID(cmbfrs.Items[cmbfrs.SelectedIndex].ToString());
                    }
                    rstPrix.Fields["PRIX_SP"].Value = dblPrixNet;
                    rstPrix.Fields["PRIX_LIST"].Value = "";
                    rstPrix.Fields["ESCOMPTE"].Value = "";
                    rstPrix.Fields["PRIX_NET"].Value = "";
                }
                if (optCAN.Checked == true) { rstPrix.Fields["DeviseMonétaire"].Value = "CAN"; }
                else
                if (optUSA.Checked == true) { rstPrix.Fields["DeviseMonétaire"].Value = "USA"; } else { rstPrix.Fields["DeviseMonétaire"].Value = "SPA"; }
                rstPrix.Fields["Type"].Value = "E";
                rstPrix.Fields["ENTRER_PAR"].Value = Conteneur.idInitiales.Text;
                rstPrix.Fields["Date"].Value = ConvertDate(DateTime.Today);
                rstPrix.Update();
                rstPrix.Close();
                rstPrix = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ModintierPrixCatalogue", ex);
            }
        }
        private bool VerintierSiOuvert(ref string sUser)
        {
            bool VerintierSiOuvertRet = default;
            try
            {
                ADODB.Recordset rstProjSoum;
                bool bModification;
                rstProjSoum = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET) { rstProjSoum.Open("SELECT Modification, Par FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } else { rstProjSoum.Open("SELECT Modification, Par FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); }
                if (rstProjSoum.Fields["Modification"].Value == true)
                {
                    sUser = rstProjSoum.Fields["Par"].Value;
                    bModification = true;
                }
                else
                {
                    sUser = "";
                    bModification = false;
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                VerintierSiOuvertRet = bModification;
                return VerintierSiOuvertRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerintierSiOuvert", ex);
                return false;
            }
        }
        private void OuvrirProjSoum(bool bOuvrir)
        {
            var IdNomEmploye = default(object);
            try
            {
                ADODB.Recordset rstProjSoum;
                rstProjSoum = new Recordset();
                rstProjSoum.CursorLocation = CursorLocationEnum.adUseServer;
                if (m_eType == EnumType.TYPE_PROJET) { rstProjSoum.Open("SELECT Modification, Par FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } else { rstProjSoum.Open("SELECT Modification, Par FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); } while (!rstProjSoum.EOF)
                {
                    if (bOuvrir == true)
                    {
                        rstProjSoum.Fields["Modification"].Value = true;
                        rstProjSoum.Fields["Par"].Value = IdNomEmploye;
                    }
                    else
                    {
                        rstProjSoum.Fields["Modification"].Value = false;
                        rstProjSoum.Fields["Par"].Value = "";
                    }
                    rstProjSoum.Update();
                    rstProjSoum.MoveNext();
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "OuvrirProjSoum", ex);
            }
        }
        private void AnnulerCommande()
        {
            try
            {
                ADODB.Recordset rstProjet;
                ListViewItem itmAvant;
                ListViewItem itmAnnulation;
                var sExtra = default(string);
                if (Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "00", false) >= 0 & Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "19", false) <= 0)
                {
                    sExtra =
                   Interaction.InputBox("Dans quel extra l'annulation de commande doit être faite ? (2 chintfres seulement)");
                    if (Strings.Len(sExtra) != 2)
                    {
                        MessageBox.Show("Format incorrect!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                    if (!IsNumeric(sExtra))
                    {
                        MessageBox.Show("L'extra doit être numérique!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                    if (double.Parse(sExtra) < 60d | double.Parse(sExtra) > 98d)
                    {
                        MessageBox.Show("L'extra doit être entre 60 et 98!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return;
                    }
                    rstProjet = new Recordset();
                    rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjet.EOF)
                    {
                        MessageBox.Show("Le projet " + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + " n'existe pas!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        rstProjet.Close();
                        rstProjet = default;
                        return;
                    }
                    else
                    {
                        rstProjet.Close();
                        rstProjet = default;
                    }
                }
                itmAvant = lvwSoumission.FocusedItem;
                itmAnnulation = lvwSoumission.Items.Insert(itmAvant.Index + 1, "");
                itmAnnulation.Checked = itmAvant.Checked;
                itmAnnulation.Text = "-" + itmAvant.Text;
                itmAnnulation.Tag = itmAvant.Tag;
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_PIECE) { itmAnnulation.SubItems[I_COL_SOUM_PIECE].Text = itmAvant.SubItems[I_COL_SOUM_PIECE].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PIECE].Text)); }
                itmAnnulation.SubItems[I_COL_SOUM_PIECE].Tag = itmAvant.SubItems[I_COL_SOUM_PIECE].Tag;
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_DESCR) { itmAnnulation.SubItems[I_COL_SOUM_DESCR].Text = itmAvant.SubItems[I_COL_SOUM_DESCR].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DESCR].Text)); }
                itmAnnulation.SubItems[I_COL_SOUM_DESCR].Tag = itmAvant.SubItems[I_COL_SOUM_DESCR].Tag;
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_MANUFACT) { itmAnnulation.SubItems[I_COL_SOUM_MANUFACT].Text = itmAvant.SubItems[I_COL_SOUM_MANUFACT].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_MANUFACT].Text)); }
                itmAnnulation.SubItems[I_COL_SOUM_MANUFACT].Tag = itmAvant.SubItems[I_COL_SOUM_MANUFACT].Tag;
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmAnnulation.SubItems[I_COL_SOUM_PRIX_LIST].Text = itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].Text)); }
                itmAnnulation.SubItems[I_COL_SOUM_PRIX_LIST].Tag = itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].Tag;
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmAnnulation.SubItems[I_COL_SOUM_ESCOMPTE].Text = itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].Text)); }
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmAnnulation.SubItems[I_COL_SOUM_PRIX_NET].Text = itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Text)); }
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_DISTRIB) { itmAnnulation.SubItems[I_COL_SOUM_DISTRIB].Text = itmAvant.SubItems[I_COL_SOUM_DISTRIB].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DISTRIB].Text)); }
                itmAnnulation.SubItems[I_COL_SOUM_DISTRIB].Tag = itmAvant.SubItems[I_COL_SOUM_DISTRIB].Tag;
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_TEMPS) { itmAnnulation.SubItems[I_COL_SOUM_TEMPS].Text = itmAvant.SubItems[I_COL_SOUM_TEMPS].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_TEMPS].Text)); }
                if (!string.IsNullOrEmpty(Strings.Trim(itmAnnulation.SubItems[I_COL_SOUM_TEMPS].Text)))
                {
                    if (itmAnnulation.SubItems.Count > I_COL_SOUM_MONTAGE) { itmAnnulation.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmAnnulation.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmAnnulation.Text, "*", string.Empty))).ToString(); } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmAnnulation.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmAnnulation.Text, "*", string.Empty))).ToString())); }
                }
                else
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_MONTAGE) { itmAnnulation.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty)); }
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_TOTAL) { itmAnnulation.SubItems[I_COL_SOUM_TOTAL].Text = "-" + itmAvant.SubItems[I_COL_SOUM_TOTAL].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, "-" + itmAvant.SubItems[I_COL_SOUM_TOTAL].Text)); }
                if (itmAnnulation.SubItems.Count > I_COL_SOUM_PROFIT) { itmAnnulation.SubItems[I_COL_SOUM_PROFIT].Text = "-" + itmAvant.SubItems[I_COL_SOUM_PROFIT].Text; } else { itmAnnulation.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, "-" + itmAvant.SubItems[I_COL_SOUM_PROFIT].Text)); }
                if (Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "00", false) >= 0 & Operators.CompareString(Droite(txtNoProjSoum.Text, 2), "19", false) <= 0)
                {
                    itmAnnulation.SubItems[I_COL_SOUM_PROFIT].Tag = "ANNULATION " + sExtra;
                }
                itmAnnulation.SubItems[I_COL_SOUM_PIECE].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_DESCR].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_DISTRIB].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_MANUFACT].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_MONTAGE].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_PROFIT].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_TEMPS].ForeColor = COLOR_VERT_FORET;
                itmAnnulation.SubItems[I_COL_SOUM_TOTAL].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_PIECE].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_DESCR].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_DISTRIB].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_MANUFACT].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_MONTAGE].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_PROFIT].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_TEMPS].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_TOTAL].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = COLOR_VERT_FORET;
                itmAvant.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = COLOR_VERT_FORET;
                lvwSoumission.Refresh();
                CalculerPrix();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AnnulerCommande", ex);
            }
        }
        private void CopierPiece()
        {
            try
            {
                ListViewItem itmCopier;
                int iNbreSelect;
                int X;
                var iNbreSelected = default(int);
                var iIndex = default(int);
                var loopTo = lvwSoumission.Items.Count;
                for (X = 1; X <= loopTo; X++)
                {
                    if (lvwSoumission.Items[X].Selected == true)
                    {
                        if (Conversions.ToBoolean(Operators.OrObject(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].Tag, "", false), string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text)))) { MessageBox.Show("Impossible de copier, la sélection contient une section ou une sous-section!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; } else { iNbreSelected++; }
                    }
                }
                Cursor.Current = Cursors.WaitCursor;
                m_iNbreCopie = iNbreSelected;
                m_arr_tyCopie = new CopiePiece[iNbreSelected];
                var loopTo1 = lvwSoumission.Items.Count;
                for (X = 1; X <= loopTo1; X++)
                {
                    if (lvwSoumission.Items[X].Selected == true)
                    {
                        itmCopier = lvwSoumission.Items[X];
                        m_arr_tyCopie[iIndex].lColor = itmCopier.SubItems[I_COL_SOUM_PIECE].ForeColor;
                        m_arr_tyCopie[iIndex].bChecked = itmCopier.Checked;
                        m_arr_tyCopie[iIndex].sQuantite = itmCopier.Text;
                        m_arr_tyCopie[iIndex].sPiece = itmCopier.SubItems[I_COL_SOUM_PIECE].Text;
                        m_arr_tyCopie[iIndex].sDescr = itmCopier.SubItems[I_COL_SOUM_DESCR].Text;
                        m_arr_tyCopie[iIndex].sDescrTag = (string)itmCopier.SubItems[I_COL_SOUM_DESCR].Tag;
                        m_arr_tyCopie[iIndex].sManufact = itmCopier.SubItems[I_COL_SOUM_MANUFACT].Text;
                        m_arr_tyCopie[iIndex].sPrixList = itmCopier.SubItems[I_COL_SOUM_PRIX_LIST].Text;
                        m_arr_tyCopie[iIndex].sPrixListTag = (string)itmCopier.SubItems[I_COL_SOUM_PRIX_LIST].Tag;
                        m_arr_tyCopie[iIndex].sEscompte = itmCopier.SubItems[I_COL_SOUM_ESCOMPTE].Text;
                        m_arr_tyCopie[iIndex].sPrixNet = itmCopier.SubItems[I_COL_SOUM_PRIX_NET].Text;
                        m_arr_tyCopie[iIndex].sFRS = itmCopier.SubItems[I_COL_SOUM_DISTRIB].Text;
                        m_arr_tyCopie[iIndex].sFRSTag = (string)itmCopier.SubItems[I_COL_SOUM_DISTRIB].Tag;
                        m_arr_tyCopie[iIndex].sTemps = itmCopier.SubItems[I_COL_SOUM_TEMPS].Text;
                        m_arr_tyCopie[iIndex].sMontage = itmCopier.SubItems[I_COL_SOUM_MONTAGE].Text;
                        m_arr_tyCopie[iIndex].sTotal = itmCopier.SubItems[I_COL_SOUM_TOTAL].Text;
                        m_arr_tyCopie[iIndex].sProfit = itmCopier.SubItems[I_COL_SOUM_PROFIT].Text;
                        iIndex++;
                    }
                }
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CopierPiece", ex);
            }
        }
        private void CollerPiece()
        {
            try
            {
                string sIDSection;
                string sOrdreSection;
                string sSousSection;
                ListViewItem itmColler;
                int X;
                int iIndexSelected;
                int iIndex;
                if (m_iNbreCopie == 0) { return; }
                iIndexSelected = lvwSoumission.FocusedItem.Index;
                if (iIndexSelected >= 3)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.FocusedItem.Tag, string.Empty, false))) { iIndex = iIndexSelected - 1; }
                    else
                    if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text))
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[iIndexSelected - 1].Tag, "", false))) { MessageBox.Show("Impossible de coller la pièce entre une section et une sous-section!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop); return; } else { iIndex = iIndexSelected - 1; }
                    }
                    else
                    { iIndex = iIndexSelected; }
                }
                else
                {
                    MessageBox.Show("Emplacement incorrect!", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    return;
                }
                sIDSection = (string)lvwSoumission.Items[iIndex].Tag;
                sOrdreSection = (string)lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_MANUFACT].Tag;
                sSousSection = (string)lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Tag;
                Cursor.Current = Cursors.WaitCursor;
                for (X = 0; X <= m_arr_tyCopie.Length; X++)
                {
                    itmColler = lvwSoumission.Items.Insert(iIndexSelected + X, "");
                    itmColler.Checked = m_arr_tyCopie[X].bChecked;
                    itmColler.Text = m_arr_tyCopie[X].sQuantite;
                    itmColler.Tag = sIDSection;
                    if (itmColler.SubItems.Count > I_COL_SOUM_PIECE) { itmColler.SubItems[I_COL_SOUM_PIECE].Text = m_arr_tyCopie[X].sPiece; } else { itmColler.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sPiece)); }
                    itmColler.SubItems[I_COL_SOUM_PIECE].Tag = sSousSection;
                    if (itmColler.SubItems.Count > I_COL_SOUM_DESCR) { itmColler.SubItems[I_COL_SOUM_DESCR].Text = m_arr_tyCopie[X].sDescr; } else { itmColler.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sDescr)); }
                    itmColler.SubItems[I_COL_SOUM_DESCR].Tag = m_arr_tyCopie[X].sDescrTag;
                    if (itmColler.SubItems.Count > I_COL_SOUM_MANUFACT) { itmColler.SubItems[I_COL_SOUM_MANUFACT].Text = m_arr_tyCopie[X].sManufact; } else { itmColler.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sManufact)); }
                    itmColler.SubItems[I_COL_SOUM_MANUFACT].Tag = sOrdreSection;
                    if (itmColler.SubItems.Count > I_COL_SOUM_PRIX_LIST) { itmColler.SubItems[I_COL_SOUM_PRIX_LIST].Text = m_arr_tyCopie[X].sPrixList; } else { itmColler.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sPrixList)); }
                    itmColler.SubItems[I_COL_SOUM_PRIX_LIST].Tag = m_arr_tyCopie[X].sPrixListTag;
                    if (itmColler.SubItems.Count > I_COL_SOUM_ESCOMPTE) { itmColler.SubItems[I_COL_SOUM_ESCOMPTE].Text = m_arr_tyCopie[X].sEscompte; } else { itmColler.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sEscompte)); }
                    if (itmColler.SubItems.Count > I_COL_SOUM_PRIX_NET) { itmColler.SubItems[I_COL_SOUM_PRIX_NET].Text = m_arr_tyCopie[X].sPrixNet; } else { itmColler.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sPrixNet)); }
                    if (itmColler.SubItems.Count > I_COL_SOUM_DISTRIB) { itmColler.SubItems[I_COL_SOUM_DISTRIB].Text = m_arr_tyCopie[X].sFRS; } else { itmColler.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sFRS)); }
                    itmColler.SubItems[I_COL_SOUM_DISTRIB].Tag = m_arr_tyCopie[X].sFRSTag;
                    if (itmColler.SubItems.Count > I_COL_SOUM_TEMPS) { itmColler.SubItems[I_COL_SOUM_TEMPS].Text = m_arr_tyCopie[X].sTemps; } else { itmColler.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sTemps)); }
                    if (itmColler.SubItems.Count > I_COL_SOUM_MONTAGE) { itmColler.SubItems[I_COL_SOUM_MONTAGE].Text = m_arr_tyCopie[X].sMontage; } else { itmColler.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sMontage)); }
                    if (itmColler.SubItems.Count > I_COL_SOUM_TOTAL) { itmColler.SubItems[I_COL_SOUM_TOTAL].Text = m_arr_tyCopie[X].sTotal; } else { itmColler.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sTotal)); }
                    if (itmColler.SubItems.Count > I_COL_SOUM_PROFIT) { itmColler.SubItems[I_COL_SOUM_PROFIT].Text = m_arr_tyCopie[X].sProfit; } else { itmColler.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, m_arr_tyCopie[X].sProfit)); }
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        itmColler.SubItems[I_COL_SOUM_PROFIT].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_TOTAL].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_MONTAGE].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_TEMPS].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_DISTRIB].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_DESCR].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_PIECE].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_MANUFACT].ForeColor = m_arr_tyCopie[X].lColor;
                        itmColler.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = m_arr_tyCopie[X].lColor;
                    }
                    else
                    {
                        itmColler.SubItems[I_COL_SOUM_PROFIT].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_TOTAL].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_MONTAGE].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_TEMPS].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_DISTRIB].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_DESCR].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_PIECE].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_MANUFACT].ForeColor = COLOR_NOIR;
                        itmColler.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = COLOR_NOIR;
                    }
                    lvwSoumission.Refresh();
                }
                CalculerTempsFabrication();
                CalculerPrix();
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "CollerPiece", ex);
            }
        }
        private void Deselect()
        {
            try
            {
                int X;
                if (lvwSoumission.Items.Count > 0)
                {
                    for (X = 1; X <= lvwSoumission.Items.Count; X++)
                        lvwSoumission.Items[X].Selected = false;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "Deselect", ex);
            }
        }
        private bool ValiderFormatMectrique(string sNoProjSoum)
        {
            bool ValiderFormatMectriqueRet = default;
            try
            {
                if (Strings.UCase(Gauche(sNoProjSoum, 1)) == "E") { ValiderFormatMectriqueRet = true; }
                else
                {
                    MessageBox.Show("Un numéro électrique doit absolument commencé par 'E' !", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    ValiderFormatMectriqueRet = false;
                }
                return ValiderFormatMectriqueRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ValiderFormatMectrique", ex);
                return false;
            }
        }
        private bool ValiderFormatSoumission(string sNoSoumission)
        {
            bool ValiderFormatSoumissionRet = default;
            try
            {
                if (sNoSoumission.Substring(3, 1) == "1") { ValiderFormatSoumissionRet = true; }
                else
                {
                    MessageBox.Show("Une soumission doit absolument avoir un '1' comme 3e caractère !", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    ValiderFormatSoumissionRet = false;
                }
                return ValiderFormatSoumissionRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ValiderFormatSoumission", ex);
                return false;
            }
        }
        private bool ValiderFormatJobSansSoum(string sNoProjet)
        {
            bool ValiderFormatJobSansSoumRet = default;
            try
            {
                if (sNoProjet.Substring(3, 1) != "3" & sNoProjet.Substring(3, 1) != "1") { ValiderFormatJobSansSoumRet = true; }
                else
                {
                    MessageBox.Show("Un projet créé sans soumission ne peut pas être un '" + sNoProjet.Substring(2, 2) + "' !", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    ValiderFormatJobSansSoumRet = false;
                }
                return ValiderFormatJobSansSoumRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ValiderFormatJobSansSoum", ex);
                return false;
            }
        }
        private bool ValiderFormatJobAvecSoum(string sNoProjet)
        {
            bool ValiderFormatJobAvecSoumRet = default;
            try
            {
                if (sNoProjet.Substring(3, 1) == "3") { ValiderFormatJobAvecSoumRet = true; }
                else
                {
                    MessageBox.Show("Un projet créé à partir d'une soumission doit absolument avec un '3' comme 3e caractère!", "Création projet", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    ValiderFormatJobAvecSoumRet = false;
                }
                return ValiderFormatJobAvecSoumRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ValiderFormatJobAvecSoum", ex);
                return false;
            }
        }
        private bool ValiderFormatJobExtra(string sNoProjet)
        {
            bool ValiderFormatJobExtraRet = default;
            try
            {
                if (int.Parse(Droite(sNoProjet, 2)) >= 50 & int.Parse(Droite(sNoProjet, 2)) <= 98)
                {
                    ValiderFormatJobExtraRet = true;
                }
                else
                {
                    MessageBox.Show("L'entension d'un extra doit être compris entre 50 et 98 !", "Erreur", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    ValiderFormatJobExtraRet = false;
                }
                return ValiderFormatJobExtraRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ValiderFormatJobExtra", ex);
                return false;
            }
        }
        private void AjouterProjetAuCumulatint()
        {
            try
            {
                string sNoCumulatint;
                ADODB.Recordset rstProj = new ADODB.Recordset();
                ADODB.Recordset rstPieces = new ADODB.Recordset();
                ADODB.Recordset rstProjCumulatint = new ADODB.Recordset();
                ADODB.Recordset rstPiecesCumulatint = new ADODB.Recordset();
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstSoum;
                bool bCumulatintExiste;
                var dblNbreManuel = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                sNoCumulatint = Gauche(txtNoProjSoum.Text, 7) + "99";
                rstProjCumulatint.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstProjCumulatint.EOF)
                {
                    bCumulatintExiste = false;
                    rstProjCumulatint.AddNew();
                    rstProjCumulatint.Fields["IDProjet"].Value = sNoCumulatint;
                    rstProj.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, 6) + "-01'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    if (!rstProj.EOF)
                    {
                        if (!(rstProj.Fields["IDSoumission"].Value is DBNull))
                        {
                            if ($"{rstProj.Fields["IDSoumission"].Value}".Length >= 6)
                            {
                                rstSoum = new Recordset(); rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + Gauche(rstProj.Fields["IDSoumission"].Value, 6) + "-99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                                if (!rstSoum.EOF) { rstProjCumulatint.Fields["IDSoumission"].Value = rstSoum.Fields["IDSoumission"].Value; }
                                rstSoum.Close();
                                rstSoum = default;
                            }
                        }
                        rstProj.Close();
                        rstProj.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjCumulatint.Fields["IDClient"].Value = rstProj.Fields["IDClient"].Value;
                        rstProjCumulatint.Fields["IDContact"].Value = rstProj.Fields["IDContact"].Value;
                        rstProjCumulatint.Fields["TauxDessin"].Value = rstProj.Fields["TauxDessin"].Value;
                        rstProjCumulatint.Fields["TauxFabrication"].Value = rstProj.Fields["TauxFabrication"].Value;
                        rstProjCumulatint.Fields["TauxAssemblage"].Value = rstProj.Fields["TauxAssemblage"].Value;
                        rstProjCumulatint.Fields["TauxProgInterface"].Value = rstProj.Fields["TauxProgInterface"].Value;
                        rstProjCumulatint.Fields["TauxProgAutomate"].Value = rstProj.Fields["TauxProgAutomate"].Value;
                        rstProjCumulatint.Fields["TauxProgRobot"].Value = rstProj.Fields["TauxProgRobot"].Value;
                        rstProjCumulatint.Fields["TauxVision"].Value = rstProj.Fields["TauxVision"].Value;
                        rstProjCumulatint.Fields["TauxTest"].Value = rstProj.Fields["TauxTest"].Value;
                        rstProjCumulatint.Fields["TauxInstallation"].Value = rstProj.Fields["TauxInstallation"].Value;
                        rstProjCumulatint.Fields["TauxMiseService"].Value = rstProj.Fields["TauxMiseService"].Value;
                        rstProjCumulatint.Fields["TauxFormation"].Value = rstProj.Fields["TauxFormation"].Value;
                        rstProjCumulatint.Fields["TauxGestion"].Value = rstProj.Fields["TauxGestion"].Value;
                        rstProjCumulatint.Fields["TauxShipping"].Value = rstProj.Fields["TauxShipping"].Value;
                        rstProjCumulatint.Fields["Transport"].Value = rstProj.Fields["Transport"].Value;
                        rstProjCumulatint.Fields["Profit"].Value = rstProj.Fields["Profit"].Value;
                        rstProjCumulatint.Fields["imprevue"].Value = rstProj.Fields["imprevue"].Value;
                        rstProjCumulatint.Fields["commission"].Value = rstProj.Fields["commission"].Value;
                        rstProj.Close();
                        rstProjCumulatint.Fields["Description"].Value = "Cumulatint de " + Gauche(txtNoProjSoum.Text, 6);
                        rstEmploye = new Recordset();
                        rstEmploye.Open("SELECT * FROM employés WHERE loginname = '" + IdLoginEmploye + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                        rstProjCumulatint.Fields["creer"].Value = ConvertDate(DateTime.Today);
                        rstProjCumulatint.Fields["creer_par"].Value = rstEmploye.Fields["NoEmploye"].Value;
                        rstEmploye.Close();
                        rstEmploye = default;
                        rstProjCumulatint.Update();
                        rstProjSoum = new Recordset();
                        rstProjSoum.Open("SELECT * FROM ProjSoum", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        rstProjSoum.AddNew();
                        rstProjSoum.Fields["IDProjSoum"].Value = sNoCumulatint;
                        rstProjSoum.Fields["NoClient"].Value = rstProjCumulatint.Fields["IDClient"].Value;
                        rstProjSoum.Fields["Description"].Value = rstProjCumulatint.Fields["Description"].Value;
                        rstProjSoum.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                        rstProjSoum.Fields["Ouvert"].Value = true;
                        rstProjSoum.Fields["Verrouillé"].Value = true;
                        rstProjSoum.Fields["Type"].Value = "P";
                        rstProjSoum.Update();
                        rstProjSoum.Close();
                        rstProjSoum = default;
                    }
                    else
                    {
                        bCumulatintExiste = true;
                    }
                    rstProj.CursorLocation = CursorLocationEnum.adUseClient;
                    rstProj.Open("SELECT * FROM ProjetMec WHERE LEFT(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDProjet, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    if (rstProj.RecordCount == 1)
                    {
                        rstProjCumulatint.Fields["NbreManuel"].Value = rstProj.Fields["NbreManuel"].Value;
                        rstProjCumulatint.Fields["PrixEmballage"].Value = rstProj.Fields["PrixEmballage"].Value;
                        rstProjCumulatint.Fields["total_manuel"].Value = rstProj.Fields["total_manuel"].Value;
                        rstProjCumulatint.Fields["MontantForfait"].Value = rstProj.Fields["MontantForfait"].Value;
                    }
                    else
                    {
                        while (!rstProj.EOF)
                        {//
                            if (!(rstProj.Fields["NbreManuel"].Value is DBNull)) { dblNbreManuel += (double)rstProj.Fields["NbreManuel"].Value; }
                            if (!(rstProj.Fields["PrixEmballage"].Value is DBNull)) { dblPrixEmballage += (double)rstProj.Fields["PrixEmballage"].Value; }
                            if (!(rstProj.Fields["total_manuel"].Value is DBNull)) { dblTotalManuel += (double)rstProj.Fields["total_manuel"].Value; }
                            if (!(rstProj.Fields["MontantForfait"].Value is DBNull))
                            {
                                if (IsNumeric(rstProj.Fields["MontantForfait"].Value)) { dblForfait += (double)rstProj.Fields["MontantForfait"].Value; }
                            }
                            rstProj.MoveNext();
                        }
                        rstProjCumulatint.Fields["NbreManuel"].Value = dblNbreManuel;
                        rstProjCumulatint.Fields["PrixEmballage"].Value = dblPrixEmballage;
                        rstProjCumulatint.Fields["total_manuel"].Value = dblTotalManuel;
                        rstProjCumulatint.Fields["MontantForfait"].Value = dblForfait;
                    }
                    rstProj.Close();
                    rstProjCumulatint.Update();
                    rstProjCumulatint.Close();
                    rstPiecesCumulatint.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (bCumulatintExiste == true)
                    {
                        UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatint + "' AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                        rstPieces.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + txtNoProjSoum.Text + "' AND Provenance Is Null OR Provenance = '' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    }
                    else { rstPieces.Open("SELECT * FROM Projet_Pieces WHERE LEFT(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDProjet, 2) <> '99' AND Provenance Is Null OR Provenance = '' ORDER BY OrdreSection, NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly); } while (!rstPieces.EOF)
                    {
                        rstPiecesCumulatint.AddNew();
                        rstPiecesCumulatint.Fields["IDProjet"].Value = sNoCumulatint;
                        rstPiecesCumulatint.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                        rstPiecesCumulatint.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                        rstPiecesCumulatint.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                        rstPiecesCumulatint.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                        rstPiecesCumulatint.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                        rstPiecesCumulatint.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                        rstPiecesCumulatint.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                        rstPiecesCumulatint.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                        rstPiecesCumulatint.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                        rstPiecesCumulatint.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                        rstPiecesCumulatint.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                        rstPiecesCumulatint.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                        rstPiecesCumulatint.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                        rstPiecesCumulatint.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                        rstPiecesCumulatint.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                        rstPiecesCumulatint.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                        rstPiecesCumulatint.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                        rstPiecesCumulatint.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                        rstPiecesCumulatint.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                        rstPiecesCumulatint.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                        rstPiecesCumulatint.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                        rstPiecesCumulatint.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                        rstPiecesCumulatint.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDProjet"].Value, 2);
                        rstPiecesCumulatint.Update();
                        rstPieces.MoveNext();
                    }
                    rstPiecesCumulatint.Close();
                    rstPieces.Close();
                    rstProj = default;
                    rstPieces = default;
                    rstProjCumulatint = default;
                    rstPiecesCumulatint = default;
                    CalculerTotalRecordset(sNoCumulatint);
                    if (bCumulatintExiste == false)
                    {
                        if (cmbOuvertFerme.SelectedIndex == I_CMB_OUVERT) { RemplirComboProjSoum(txtNoProjSoum.Text); }
                    }
                    return;
                }
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterProjetAuCumulatif", ex);
            }
        }
        private void AjouterSoumissionAuCumulatint()
        {
            try
            {
                string sNoCumulatint;
                ADODB.Recordset rstSoum;
                ADODB.Recordset rstPieces;
                ADODB.Recordset rstSoumCumulatint;
                ADODB.Recordset rstPiecesCumulatint;
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstEmploye;
                bool bCumulatintExiste;
                var dblNbreManuel = default(double);
                var dblTempsDessin = default(double);
                var dblTempsFabrication = default(double);
                var dblTempsAssemblage = default(double);
                var dblTempsProgInterface = default(double);
                var dblTempsProgAutomate = default(double);
                var dblTempsProgRobot = default(double);
                var dblTempsVision = default(double);
                var dblTempsTest = default(double);
                var dblTempsInstallation = default(double);
                var dblTempsMiseService = default(double);
                var dblTempsFormation = default(double);
                var dblTempsGestion = default(double);
                var dblTempsShipping = default(double);
                var dblTempsTransport = default(double);
                var dblTempsUniteMobile = default(double);
                var dblTotalHebergement = default(double);
                var dblTotalRepas = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                sNoCumulatint = Gauche(txtNoProjSoum.Text, 7) + "99";
                rstSoum = new Recordset();
                rstPieces = new Recordset();
                rstSoumCumulatint = new Recordset();
                rstPiecesCumulatint = new Recordset();
                rstSoumCumulatint.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstSoumCumulatint.EOF)
                {
                    bCumulatintExiste = false;
                    rstSoumCumulatint.AddNew();
                    rstSoumCumulatint.Fields["IDSoumission"].Value = sNoCumulatint;
                    rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstSoumCumulatint.Fields["IDClient"].Value = rstSoum.Fields["IDClient"].Value;
                    rstSoumCumulatint.Fields["IDContact"].Value = rstSoum.Fields["IDContact"].Value;
                    rstSoumCumulatint.Fields["TauxDessin"].Value = rstSoum.Fields["TauxDessin"].Value;
                    rstSoumCumulatint.Fields["TauxFabrication"].Value = rstSoum.Fields["TauxFabrication"].Value;
                    rstSoumCumulatint.Fields["TauxAssemblage"].Value = rstSoum.Fields["TauxAssemblage"].Value;
                    rstSoumCumulatint.Fields["TauxProgInterface"].Value = rstSoum.Fields["TauxProgInterface"].Value;
                    rstSoumCumulatint.Fields["TauxProgAutomate"].Value = rstSoum.Fields["TauxProgAutomate"].Value;
                    rstSoumCumulatint.Fields["TauxProgRobot"].Value = rstSoum.Fields["TauxProgRobot"].Value;
                    rstSoumCumulatint.Fields["TauxVision"].Value = rstSoum.Fields["TauxVision"].Value;
                    rstSoumCumulatint.Fields["TauxTest"].Value = rstSoum.Fields["TauxTest"].Value;
                    rstSoumCumulatint.Fields["TauxInstallation"].Value = rstSoum.Fields["TauxInstallation"].Value;
                    rstSoumCumulatint.Fields["TauxMiseService"].Value = rstSoum.Fields["TauxMiseService"].Value;
                    rstSoumCumulatint.Fields["TauxFormation"].Value = rstSoum.Fields["TauxFormation"].Value;
                    rstSoumCumulatint.Fields["TauxGestion"].Value = rstSoum.Fields["TauxGestion"].Value;
                    rstSoumCumulatint.Fields["TauxShipping"].Value = rstSoum.Fields["TauxShipping"].Value;
                    rstSoumCumulatint.Fields["TauxHebergement1"].Value = rstSoum.Fields["TauxHebergement1"].Value;
                    rstSoumCumulatint.Fields["TauxHebergement2"].Value = rstSoum.Fields["TauxHebergement2"].Value;
                    rstSoumCumulatint.Fields["TauxRepas"].Value = rstSoum.Fields["TauxRepas"].Value;
                    rstSoumCumulatint.Fields["TauxTransport"].Value = rstSoum.Fields["TauxTransport"].Value;
                    rstSoumCumulatint.Fields["TauxUniteMobile"].Value = rstSoum.Fields["TauxUniteMobile"].Value;
                    rstSoumCumulatint.Fields["Transport"].Value = rstSoum.Fields["Transport"].Value;
                    rstSoumCumulatint.Fields["Profit"].Value = rstSoum.Fields["Profit"].Value;
                    rstSoumCumulatint.Fields["imprevue"].Value = rstSoum.Fields["imprevue"].Value;
                    rstSoumCumulatint.Fields["commission"].Value = rstSoum.Fields["commission"].Value;
                    rstSoum.Close();
                    rstSoumCumulatint.Fields["Description"].Value = "Cumulatint de " + Gauche(txtNoProjSoum.Text, 6);
                    rstEmploye = new Recordset();
                    rstEmploye.Open("SELECT * FROM employés WHERE loginname = '" + IdLoginEmploye + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstSoumCumulatint.Fields["creer"].Value = ConvertDate(DateTime.Today);
                    rstSoumCumulatint.Fields["creer_par"].Value = rstEmploye.Fields["NoEmploye"].Value;
                    rstEmploye.Close();
                    rstEmploye = default;
                    rstSoumCumulatint.Update();
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstProjSoum.AddNew();
                    rstProjSoum.Fields["IDProjSoum"].Value = sNoCumulatint;
                    rstProjSoum.Fields["NoClient"].Value = rstSoumCumulatint.Fields["IDClient"].Value;
                    rstProjSoum.Fields["Description"].Value = rstSoumCumulatint.Fields["Description"].Value;
                    rstProjSoum.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                    rstProjSoum.Fields["Ouvert"].Value = true;
                    rstProjSoum.Fields["Verrouillé"].Value = true;
                    rstProjSoum.Fields["Type"].Value = "S";
                    rstProjSoum.Update();
                    rstProjSoum.Close();
                    rstProjSoum = default;
                }
                else { bCumulatintExiste = true; }
                rstSoum.CursorLocation = CursorLocationEnum.adUseClient;
                rstSoum.Open("SELECT * FROM SoumissionMec WHERE LEFT(IDSoumission, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDSoumission, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                if (rstSoum.RecordCount == 1)
                {
                    rstSoumCumulatint.Fields["NbreManuel"].Value = rstSoum.Fields["NbreManuel"].Value;
                    rstSoumCumulatint.Fields["TempsDessin"].Value = rstSoum.Fields["TempsDessin"].Value;
                    if (rstSoum.Fields["SansTemps"].Value == false) { rstSoumCumulatint.Fields["TempsFabrication"].Value = rstSoum.Fields["TempsFabrication"].Value; } else { rstSoumCumulatint.Fields["TempsFabrication"].Value = 0; }
                    rstSoumCumulatint.Fields["TempsAssemblage"].Value = rstSoum.Fields["TempsAssemblage"].Value;
                    rstSoumCumulatint.Fields["TempsProgInterface"].Value = rstSoum.Fields["TempsProgInterface"].Value;
                    rstSoumCumulatint.Fields["TempsProgAutomate"].Value = rstSoum.Fields["TempsProgAutomate"].Value;
                    rstSoumCumulatint.Fields["TempsProgRobot"].Value = rstSoum.Fields["TempsProgRobot"].Value;
                    rstSoumCumulatint.Fields["TempsVision"].Value = rstSoum.Fields["TempsVision"].Value;
                    rstSoumCumulatint.Fields["TempsTest"].Value = rstSoum.Fields["TempsTest"].Value;
                    rstSoumCumulatint.Fields["TempsInstallation"].Value = rstSoum.Fields["TempsInstallation"].Value;
                    rstSoumCumulatint.Fields["TempsMiseService"].Value = rstSoum.Fields["TempsMiseService"].Value;
                    rstSoumCumulatint.Fields["TempsFormation"].Value = rstSoum.Fields["TempsFormation"].Value;
                    rstSoumCumulatint.Fields["TempsGestion"].Value = rstSoum.Fields["TempsGestion"].Value;
                    rstSoumCumulatint.Fields["TempsShipping"].Value = rstSoum.Fields["TempsShipping"].Value;
                    rstSoumCumulatint.Fields["NbrePersonne"].Value = rstSoum.Fields["NbrePersonne"].Value;
                    rstSoumCumulatint.Fields["TempsHebergement"].Value = rstSoum.Fields["TempsHebergement"].Value;
                    rstSoumCumulatint.Fields["TempsRepas"].Value = rstSoum.Fields["TempsRepas"].Value;
                    rstSoumCumulatint.Fields["TempsTransport"].Value = rstSoum.Fields["TempsTransport"].Value;
                    rstSoumCumulatint.Fields["TempsUniteMobile"].Value = rstSoum.Fields["TempsUniteMobile"].Value;
                    rstSoumCumulatint.Fields["TotalHebergement"].Value = rstSoum.Fields["TotalHebergement"].Value;
                    rstSoumCumulatint.Fields["TotalRepas"].Value = rstSoum.Fields["TotalRepas"].Value;
                    rstSoumCumulatint.Fields["PrixEmballage"].Value = rstSoum.Fields["PrixEmballage"].Value;
                    rstSoumCumulatint.Fields["total_manuel"].Value = rstSoum.Fields["total_manuel"].Value;
                    rstSoumCumulatint.Fields["MontantForfait"].Value = rstSoum.Fields["MontantForfait"].Value;
                }
                else
                {
                    while (!rstSoum.EOF)
                    {//
                        if (!(rstSoum.Fields["NbreManuel"].Value is DBNull)) { dblNbreManuel += (double)rstSoum.Fields["NbreManuel"].Value; }
                        if (!(rstSoum.Fields["TempsDessin"].Value is DBNull)) { dblTempsDessin = (double)rstSoum.Fields["TempsDessin"].Value; }
                        if (rstSoum.Fields["SansTemps"].Value == false)
                        {
                            //
                            if (!(rstSoum.Fields["TempsFabrication"].Value is DBNull)) { dblTempsFabrication += (double)rstSoum.Fields["TempsFabrication"].Value; }
                        }
                        if (!(rstSoum.Fields["TempsAssemblage"].Value is DBNull)) { dblTempsAssemblage = dblTempsAssemblage + (double)rstSoum.Fields["TempsAssemblage"].Value; }
                        if (!(rstSoum.Fields["TempsProgInterface"].Value is DBNull)) { dblTempsProgInterface = dblTempsProgInterface + (double)rstSoum.Fields["TempsProgInterface"].Value; }
                        if (!(rstSoum.Fields["TempsProgAutomate"].Value is DBNull)) { dblTempsProgAutomate = dblTempsProgAutomate + (double)rstSoum.Fields["TempsProgAutomate"].Value; }
                        if (!(rstSoum.Fields["TempsProgRobot"].Value is DBNull)) { dblTempsProgRobot = dblTempsProgRobot + (double)rstSoum.Fields["TempsProgRobot"].Value; }
                        if (!(rstSoum.Fields["TempsVision"].Value is DBNull)) { dblTempsVision = dblTempsVision + (double)rstSoum.Fields["TempsVision"].Value; }
                        if (!(rstSoum.Fields["TempsTest"].Value is DBNull)) { dblTempsTest = dblTempsTest + (double)rstSoum.Fields["TempsTest"].Value; }
                        if (!(rstSoum.Fields["TempsInstallation"].Value is DBNull)) { dblTempsInstallation = dblTempsInstallation + (double)rstSoum.Fields["TempsInstallation"].Value; }
                        if (!(rstSoum.Fields["TempsMiseService"].Value is DBNull)) { dblTempsMiseService = dblTempsMiseService + (double)rstSoum.Fields["TempsMiseService"].Value; }
                        if (!(rstSoum.Fields["TempsFormation"].Value is DBNull)) { dblTempsFormation = dblTempsFormation + (double)rstSoum.Fields["TempsFormation"].Value; }
                        if (!(rstSoum.Fields["TempsGestion"].Value is DBNull)) { dblTempsGestion = dblTempsGestion + (double)rstSoum.Fields["TempsGestion"].Value; }
                        if (!(rstSoum.Fields["TempsShipping"].Value is DBNull)) { dblTempsShipping = dblTempsShipping + (double)rstSoum.Fields["TempsShipping"].Value; }
                        if (!(rstSoum.Fields["TempsTransport"].Value is DBNull)) { dblTempsTransport += (double)rstSoum.Fields["TempsTransport"].Value; }
                        if (!(rstSoum.Fields["TempsUniteMobile"].Value is DBNull)) { dblTempsUniteMobile += (double)rstSoum.Fields["TempsUniteMobile"].Value; }
                        if (!(rstSoum.Fields["TotalHebergement"].Value is DBNull)) { dblTotalHebergement += (double)rstSoum.Fields["TotalHebergement"].Value; }
                        if (!(rstSoum.Fields["TotalRepas"].Value is DBNull)) { dblTotalRepas += (double)rstSoum.Fields["TotalRepas"].Value; }
                        if (!(rstSoum.Fields["PrixEmballage"].Value is DBNull)) { dblPrixEmballage += (double)rstSoum.Fields["PrixEmballage"].Value; }
                        if (!(rstSoum.Fields["total_manuel"].Value is DBNull)) { dblTotalManuel += (double)rstSoum.Fields["total_manuel"].Value; }
                        if (!(rstSoum.Fields["MontantForfait"].Value is DBNull))
                        {
                            if (IsNumeric(rstSoum.Fields["MontantForfait"].Value)) { dblForfait += (double)rstSoum.Fields["MontantForfait"].Value; }
                        }
                        rstSoum.MoveNext();
                    }
                    rstSoumCumulatint.Fields["NbreManuel"].Value = dblNbreManuel;
                    rstSoumCumulatint.Fields["TempsDessin"].Value = dblTempsDessin;
                    rstSoumCumulatint.Fields["TempsFabrication"].Value = dblTempsFabrication;
                    rstSoumCumulatint.Fields["TempsAssemblage"].Value = dblTempsAssemblage;
                    rstSoumCumulatint.Fields["TempsProgInterface"].Value = dblTempsProgInterface;
                    rstSoumCumulatint.Fields["TempsProgAutomate"].Value = dblTempsProgAutomate;
                    rstSoumCumulatint.Fields["TempsProgRobot"].Value = dblTempsProgRobot;
                    rstSoumCumulatint.Fields["TempsVision"].Value = dblTempsVision;
                    rstSoumCumulatint.Fields["TempsTest"].Value = dblTempsTest;
                    rstSoumCumulatint.Fields["TempsInstallation"].Value = dblTempsInstallation;
                    rstSoumCumulatint.Fields["TempsMiseService"].Value = dblTempsMiseService;
                    rstSoumCumulatint.Fields["TempsFormation"].Value = dblTempsFormation;
                    rstSoumCumulatint.Fields["TempsGestion"].Value = dblTempsGestion;
                    rstSoumCumulatint.Fields["TempsShipping"].Value = dblTempsShipping;
                    rstSoumCumulatint.Fields["TempsTransport"].Value = dblTempsTransport;
                    rstSoumCumulatint.Fields["TempsUniteMobile"].Value = dblTempsUniteMobile;
                    rstSoumCumulatint.Fields["TotalHebergement"].Value = dblTotalHebergement;
                    rstSoumCumulatint.Fields["TotalRepas"].Value = dblTotalRepas;
                    rstSoumCumulatint.Fields["PrixEmballage"].Value = dblPrixEmballage;
                    rstSoumCumulatint.Fields["total_manuel"].Value = dblTotalManuel;
                    rstSoumCumulatint.Fields["MontantForfait"].Value = dblForfait;
                }
                rstSoumCumulatint.Update();
                rstSoumCumulatint.Close();
                rstSoum.Close();
                rstPiecesCumulatint.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (bCumulatintExiste == true)
                {
                    UpdateSQL("DELETE FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatint + "' AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                    rstPieces.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + txtNoProjSoum.Text + "' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                }
                else
                {
                    rstPieces.Open("SELECT * FROM Soumission_Pieces WHERE LEFT(IDSoumission, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDSoumission, 2) <> '99' ORDER BY OrdreSection, NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                }
                while (!rstPieces.EOF)
                {
                    rstPiecesCumulatint.AddNew();
                    rstPiecesCumulatint.Fields["IDSoumission"].Value = sNoCumulatint;
                    rstPiecesCumulatint.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                    rstPiecesCumulatint.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                    rstPiecesCumulatint.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                    rstPiecesCumulatint.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                    rstPiecesCumulatint.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                    rstPiecesCumulatint.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                    rstPiecesCumulatint.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                    rstPiecesCumulatint.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                    rstPiecesCumulatint.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                    rstPiecesCumulatint.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                    rstPiecesCumulatint.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                    rstPiecesCumulatint.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                    rstPiecesCumulatint.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                    rstPiecesCumulatint.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                    rstPiecesCumulatint.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                    rstPiecesCumulatint.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                    rstPiecesCumulatint.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                    rstPiecesCumulatint.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                    rstPiecesCumulatint.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                    rstPiecesCumulatint.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                    rstPiecesCumulatint.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                    rstPiecesCumulatint.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                    rstPiecesCumulatint.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDSoumission"].Value, 2);
                    rstPiecesCumulatint.Update();
                    rstPieces.MoveNext();
                }
                rstPiecesCumulatint.Close();
                rstPieces.Close();
                rstSoum = default;
                rstPieces = default;
                rstSoumCumulatint = default;
                rstPiecesCumulatint = default;
                CalculerTotalRecordset(sNoCumulatint);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterSoumissionAuCumulatif", ex);
            }
        }
        private void RecreerProjetCumulatint()
        {
            try
            {
                string sNoCumulatint;
                ADODB.Recordset rstProj;
                ADODB.Recordset rstPieces;
                ADODB.Recordset rstProjCumulatint;
                ADODB.Recordset rstPiecesCumulatint;
                ADODB.Recordset rstProjSoum;
                var dblNbreManuel = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                var bSupprimer = default(bool);
                sNoCumulatint = Gauche(txtNoProjSoum.Text, 7) + "99";
                rstProj = new Recordset();
                rstPieces = new Recordset();
                rstProjCumulatint = new Recordset();
                rstPiecesCumulatint = new Recordset();
                rstProj.CursorLocation = CursorLocationEnum.adUseClient;
                rstProj.Open("SELECT * FROM ProjetMec WHERE LEFT(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDProjet, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                if (rstProj.EOF)
                {
                    UpdateSQL("DELETE FROM ProjSoum WHERE IDProjSoum = '" + sNoCumulatint + "'");
                    UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatint + "' AND Type = 'E'");
                    UpdateSQL("DELETE FROM ProjetMec WHERE IDProjet = '" + sNoCumulatint + "'");
                    bSupprimer = true;
                }
                else
                {
                    rstProjCumulatint.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProj.RecordCount == 1)
                    {
                        rstProjCumulatint.Fields["NbreManuel"].Value = rstProj.Fields["NbreManuel"].Value;
                        rstProjCumulatint.Fields["PrixEmballage"].Value = rstProj.Fields["PrixEmballage"].Value;
                        rstProjCumulatint.Fields["total_manuel"].Value = rstProj.Fields["total_manuel"].Value;
                        rstProjCumulatint.Fields["MontantForfait"].Value = rstProj.Fields["MontantForfait"].Value;
                    }
                    else
                    {
                        while (!rstProj.EOF)
                        {
                            if (!(rstProj.Fields["NbreManuel"].Value is DBNull)) { dblNbreManuel += (double)rstProj.Fields["NbreManuel"].Value; }
                            if (!(rstProj.Fields["PrixEmballage"].Value is DBNull)) { dblPrixEmballage += (double)rstProj.Fields["PrixEmballage"].Value; }
                            if (!(rstProj.Fields["total_manuel"].Value is DBNull)) { dblTotalManuel += (double)rstProj.Fields["total_manuel"].Value; }
                            if (!(rstProj.Fields["MontantForfait"].Value is DBNull))
                            {
                                if (IsNumeric(rstProj.Fields["MontantForfait"].Value)) { dblForfait += (double)rstProj.Fields["MontantForfait"].Value; }
                            }
                            rstProj.MoveNext();
                        }
                        rstProjCumulatint.Fields["NbreManuel"].Value = dblNbreManuel;
                        rstProjCumulatint.Fields["PrixEmballage"].Value = dblPrixEmballage;
                        rstProjCumulatint.Fields["total_manuel"].Value = dblTotalManuel;
                        rstProjCumulatint.Fields["MontantForfait"].Value = dblForfait;
                    }
                    rstProj.Close();
                    rstProjCumulatint.Update();
                    rstProjCumulatint.Close();
                }
                rstPiecesCumulatint.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatint + "' AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                rstPieces.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + txtNoProjSoum.Text + "' AND Provenance Is Null OR Provenance = '' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                while (!rstPieces.EOF)
                {
                    rstPiecesCumulatint.AddNew();
                    rstPiecesCumulatint.Fields["IDProjet"].Value = sNoCumulatint;
                    rstPiecesCumulatint.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                    rstPiecesCumulatint.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                    rstPiecesCumulatint.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                    rstPiecesCumulatint.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                    rstPiecesCumulatint.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                    rstPiecesCumulatint.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                    rstPiecesCumulatint.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                    rstPiecesCumulatint.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                    rstPiecesCumulatint.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                    rstPiecesCumulatint.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                    rstPiecesCumulatint.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                    rstPiecesCumulatint.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                    rstPiecesCumulatint.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                    rstPiecesCumulatint.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                    rstPiecesCumulatint.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                    rstPiecesCumulatint.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                    rstPiecesCumulatint.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                    rstPiecesCumulatint.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                    rstPiecesCumulatint.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                    rstPiecesCumulatint.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                    rstPiecesCumulatint.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                    rstPiecesCumulatint.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                    rstPiecesCumulatint.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDProjet"].Value, 2);
                    rstPiecesCumulatint.Update();
                    rstPieces.MoveNext();
                }
                rstPiecesCumulatint.Close();
                rstPieces.Close();
                rstProj = default;
                rstPieces = default;
                rstProjCumulatint = default;
                rstPiecesCumulatint = default;
                if (bSupprimer == false) { CalculerTotalRecordset(sNoCumulatint); }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterProjetAuCumulatif", ex);
            }
        }
        private void RecreerSoumissionCumulatint()
        {
            try
            {
                string sNoCumulatint;
                ADODB.Recordset rstSoum;
                ADODB.Recordset rstPieces;
                ADODB.Recordset rstSoumCumulatint;
                ADODB.Recordset rstPiecesCumulatint;
                ADODB.Recordset rstProjSoum;
                var dblNbreManuel = default(double);
                var dblTempsDessin = default(double);
                var dblTempsFabrication = default(double);
                var dblTempsAssemblage = default(double);
                var dblTempsProgInterface = default(double);
                var dblTempsProgAutomate = default(double);
                var dblTempsProgRobot = default(double);
                var dblTempsVision = default(double);
                var dblTempsTest = default(double);
                var dblTempsInstallation = default(double);
                var dblTempsMiseService = default(double);
                var dblTempsFormation = default(double);
                var dblTempsGestion = default(double);
                var dblTempsShipping = default(double);
                var dblTempsTransport = default(double);
                var dblTempsUniteMobile = default(double);
                var dblTotalHebergement = default(double);
                var dblTotalRepas = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                var bSupprimer = default(bool);
                sNoCumulatint = Gauche(txtNoProjSoum.Text, 7) + "99";
                rstSoum = new Recordset();
                rstPieces = new Recordset();
                rstSoumCumulatint = new Recordset();
                rstPiecesCumulatint = new Recordset();
                rstSoum.CursorLocation = CursorLocationEnum.adUseClient;
                rstSoum.Open("SELECT * FROM SoumissionMec WHERE LEFT(IDSoumission, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDSoumission, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                ///supprime la soumission
                if (rstSoum.EOF)
                {
                    UpdateSQL("DELETE FROM ProjSoum WHERE IDProjSoum = '" + sNoCumulatint + "'");
                    UpdateSQL("DELETE FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatint + "' AND Type = 'E'");
                    UpdateSQL("DELETE FROM SoumissionMec WHERE IDSoumission = '" + sNoCumulatint + "'");
                    bSupprimer = true;
                }
                else
                {
                    rstSoumCumulatint.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstSoum.RecordCount == 1)
                    {
                        rstSoumCumulatint.Fields["NbreManuel"].Value = rstSoum.Fields["NbreManuel"].Value;
                        rstSoumCumulatint.Fields["TempsDessin"].Value = rstSoum.Fields["TempsDessin"].Value;
                        if (rstSoum.Fields["SansTemps"].Value == false) { rstSoumCumulatint.Fields["TempsFabrication"].Value = rstSoum.Fields["TempsFabrication"].Value; } else { rstSoumCumulatint.Fields["TempsFabrication"].Value = 0; }
                        rstSoumCumulatint.Fields["TempsAssemblage"].Value = rstSoum.Fields["TempsAssemblage"].Value;
                        rstSoumCumulatint.Fields["TempsProgInterface"].Value = rstSoum.Fields["TempsProgInterface"].Value;
                        rstSoumCumulatint.Fields["TempsProgAutomate"].Value = rstSoum.Fields["TempsProgAutomate"].Value;
                        rstSoumCumulatint.Fields["TempsProgRobot"].Value = rstSoum.Fields["TempsProgRobot"].Value;
                        rstSoumCumulatint.Fields["TempsVision"].Value = rstSoum.Fields["TempsVision"].Value;
                        rstSoumCumulatint.Fields["TempsTest"].Value = rstSoum.Fields["TempsTest"].Value;
                        rstSoumCumulatint.Fields["TempsInstallation"].Value = rstSoum.Fields["TempsInstallation"].Value;
                        rstSoumCumulatint.Fields["TempsMiseService"].Value = rstSoum.Fields["TempsMiseService"].Value;
                        rstSoumCumulatint.Fields["TempsFormation"].Value = rstSoum.Fields["TempsFormation"].Value;
                        rstSoumCumulatint.Fields["TempsGestion"].Value = rstSoum.Fields["TempsGestion"].Value;
                        rstSoumCumulatint.Fields["TempsShipping"].Value = rstSoum.Fields["TempsShipping"].Value;
                        rstSoumCumulatint.Fields["NbrePersonne"].Value = rstSoum.Fields["NbrePersonne"].Value;
                        rstSoumCumulatint.Fields["TempsHebergement"].Value = rstSoum.Fields["TempsHebergement"].Value;
                        rstSoumCumulatint.Fields["TempsRepas"].Value = rstSoum.Fields["TempsRepas"].Value;
                        rstSoumCumulatint.Fields["TempsTransport"].Value = rstSoum.Fields["TempsTransport"].Value;
                        rstSoumCumulatint.Fields["TempsUniteMobile"].Value = rstSoum.Fields["TempsUniteMobile"].Value;
                        rstSoumCumulatint.Fields["TotalHebergement"].Value = rstSoum.Fields["TotalHebergement"].Value;
                        rstSoumCumulatint.Fields["TotalRepas"].Value = rstSoum.Fields["TotalRepas"].Value;
                        rstSoumCumulatint.Fields["PrixEmballage"].Value = rstSoum.Fields["PrixEmballage"].Value;
                        rstSoumCumulatint.Fields["total_manuel"].Value = rstSoum.Fields["total_manuel"].Value;
                        rstSoumCumulatint.Fields["MontantForfait"].Value = rstSoum.Fields["MontantForfait"].Value;
                    }
                    else
                    {
                        while (!rstSoum.EOF)
                        {
                            if (!(rstSoum.Fields["NbreManuel"].Value is DBNull)) { dblNbreManuel += (double)rstSoum.Fields["NbreManuel"].Value; }
                            if (!(rstSoum.Fields["TempsDessin"].Value is DBNull)) { dblTempsDessin = (double)rstSoum.Fields["TempsDessin"].Value; }
                            if (rstSoum.Fields["SansTemps"].Value == false)
                            {
                                if (!(rstSoum.Fields["TempsFabrication"].Value is DBNull))
                                {
                                    dblTempsFabrication += (double)rstSoum.Fields["TempsFabrication"].Value;
                                }
                            }
                            if (!(rstSoum.Fields["TempsAssemblage"].Value is DBNull)) { dblTempsAssemblage = dblTempsAssemblage + (double)rstSoum.Fields["TempsAssemblage"].Value; }
                            if (!(rstSoum.Fields["TempsProgInterface"].Value is DBNull)) { dblTempsProgInterface = dblTempsProgInterface + (double)rstSoum.Fields["TempsProgInterface"].Value; }
                            if (!(rstSoum.Fields["TempsProgAutomate"].Value is DBNull)) { dblTempsProgAutomate = dblTempsProgAutomate + (double)rstSoum.Fields["TempsProgAutomate"].Value; }
                            if (!(rstSoum.Fields["TempsProgRobot"].Value is DBNull)) { dblTempsProgRobot = dblTempsProgRobot + (double)rstSoum.Fields["TempsProgRobot"].Value; }
                            if (!(rstSoum.Fields["TempsVision"].Value is DBNull)) { dblTempsVision = dblTempsVision + (double)rstSoum.Fields["TempsVision"].Value; }
                            if (!(rstSoum.Fields["TempsTest"].Value is DBNull)) { dblTempsTest = dblTempsTest + (double)rstSoum.Fields["TempsTest"].Value; }
                            if (!(rstSoum.Fields["TempsInstallation"].Value is DBNull)) { dblTempsInstallation = dblTempsInstallation + (double)rstSoum.Fields["TempsInstallation"].Value; }
                            if (!(rstSoum.Fields["TempsMiseService"].Value is DBNull)) { dblTempsMiseService = dblTempsMiseService + (double)rstSoum.Fields["TempsMiseService"].Value; }
                            if (!(rstSoum.Fields["TempsFormation"].Value is DBNull)) { dblTempsFormation = dblTempsFormation + (double)rstSoum.Fields["TempsFormation"].Value; }
                            if (!(rstSoum.Fields["TempsGestion"].Value is DBNull)) { dblTempsGestion = dblTempsGestion + (double)rstSoum.Fields["TempsGestion"].Value; }
                            if (!(rstSoum.Fields["TempsShipping"].Value is DBNull)) { dblTempsShipping = dblTempsShipping + (double)rstSoum.Fields["TempsShipping"].Value; }
                            if (!(rstSoum.Fields["TempsTransport"].Value is DBNull)) { dblTempsTransport += (double)rstSoum.Fields["TempsTransport"].Value; }
                            if (!(rstSoum.Fields["TempsUniteMobile"].Value is DBNull)) { dblTempsUniteMobile += (double)rstSoum.Fields["TempsUniteMobile"].Value; }
                            if (!(rstSoum.Fields["TotalHebergement"].Value is DBNull)) { dblTotalHebergement += (double)rstSoum.Fields["TotalHebergement"].Value; }
                            if (!(rstSoum.Fields["TotalRepas"].Value is DBNull)) { dblTotalRepas += (double)rstSoum.Fields["TotalRepas"].Value; }
                            if (!(rstSoum.Fields["PrixEmballage"].Value is DBNull)) { dblPrixEmballage += (double)rstSoum.Fields["PrixEmballage"].Value; }
                            if (!(rstSoum.Fields["total_manuel"].Value is DBNull)) { dblTotalManuel += (double)rstSoum.Fields["total_manuel"].Value; }
                            if (!(rstSoum.Fields["MontantForfait"].Value is DBNull))
                            {
                                if (IsNumeric(rstSoum.Fields["MontantForfait"].Value))
                                {
                                    dblForfait += (double)rstSoum.Fields["MontantForfait"].Value;
                                }
                            }
                            rstSoum.MoveNext();
                        }
                        rstSoumCumulatint.Fields["NbreManuel"].Value = dblNbreManuel;
                        rstSoumCumulatint.Fields["TempsDessin"].Value = dblTempsDessin;
                        rstSoumCumulatint.Fields["TempsFabrication"].Value = dblTempsFabrication;
                        rstSoumCumulatint.Fields["TempsAssemblage"].Value = dblTempsAssemblage;
                        rstSoumCumulatint.Fields["TempsProgInterface"].Value = dblTempsProgInterface;
                        rstSoumCumulatint.Fields["TempsProgAutomate"].Value = dblTempsProgAutomate;
                        rstSoumCumulatint.Fields["TempsProgRobot"].Value = dblTempsProgRobot;
                        rstSoumCumulatint.Fields["TempsVision"].Value = dblTempsVision;
                        rstSoumCumulatint.Fields["TempsTest"].Value = dblTempsTest;
                        rstSoumCumulatint.Fields["TempsInstallation"].Value = dblTempsInstallation;
                        rstSoumCumulatint.Fields["TempsMiseService"].Value = dblTempsMiseService;
                        rstSoumCumulatint.Fields["TempsFormation"].Value = dblTempsFormation;
                        rstSoumCumulatint.Fields["TempsGestion"].Value = dblTempsGestion;
                        rstSoumCumulatint.Fields["TempsShipping"].Value = dblTempsShipping;
                        rstSoumCumulatint.Fields["TempsTransport"].Value = dblTempsTransport;
                        rstSoumCumulatint.Fields["TempsUniteMobile"].Value = dblTempsUniteMobile;
                        rstSoumCumulatint.Fields["TotalHebergement"].Value = dblTotalHebergement;
                        rstSoumCumulatint.Fields["TotalRepas"].Value = dblTotalRepas;
                        rstSoumCumulatint.Fields["PrixEmballage"].Value = dblPrixEmballage;
                        rstSoumCumulatint.Fields["total_manuel"].Value = dblTotalManuel;
                        rstSoumCumulatint.Fields["MontantForfait"].Value = dblForfait;
                    }
                    rstSoum.Close();
                    rstSoumCumulatint.Update();
                    rstSoumCumulatint.Close();
                }
                rstPiecesCumulatint.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatint + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                UpdateSQL("DELETE FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatint + "'");
                rstPieces.Open("SELECT * FROM Soumission_Pieces WHERE LEFT(IDSoumission, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDSoumission, 2) <> '99' ORDER BY OrdreSection, NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                while (!rstPieces.EOF)
                {
                    rstPiecesCumulatint.AddNew();
                    rstPiecesCumulatint.Fields["IDSoumission"].Value = sNoCumulatint;
                    rstPiecesCumulatint.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                    rstPiecesCumulatint.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                    rstPiecesCumulatint.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                    rstPiecesCumulatint.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                    rstPiecesCumulatint.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                    rstPiecesCumulatint.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                    rstPiecesCumulatint.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                    rstPiecesCumulatint.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                    rstPiecesCumulatint.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                    rstPiecesCumulatint.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                    rstPiecesCumulatint.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                    rstPiecesCumulatint.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                    rstPiecesCumulatint.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                    rstPiecesCumulatint.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                    rstPiecesCumulatint.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                    rstPiecesCumulatint.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                    rstPiecesCumulatint.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                    rstPiecesCumulatint.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                    rstPiecesCumulatint.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                    rstPiecesCumulatint.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                    rstPiecesCumulatint.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                    rstPiecesCumulatint.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                    rstPiecesCumulatint.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDSoumission"].Value, 2);
                    rstPiecesCumulatint.Update();
                    rstPieces.MoveNext();
                }
                rstPiecesCumulatint.Close();
                rstPieces.Close();
                rstSoum = new Recordset();
                rstPieces = new Recordset();
                rstSoumCumulatint = new Recordset();
                rstPiecesCumulatint = new Recordset();
                if (bSupprimer == false)
                {
                    CalculerTotalRecordset(sNoCumulatint);
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RecreerSoumissionCumulatif", ex);
            }
        }
        private void ExporterVersExcel(ADODB.Recordset oRecordset)
        {
            try
            {
                int iCount;
                Application oXLApp;
                Workbook oXLBook;
                Worksheet oXLSheet;
                oXLApp = new Application();
                oXLBook = oXLApp.Workbooks.Add(oXLApp.Application.Name);
                oXLSheet = oXLBook.Worksheets[1];
                oXLSheet.Columns[1].ColumnWidth = 10;
                oXLSheet.Columns[2].ColumnWidth = 8;
                oXLSheet.Columns[3].ColumnWidth = 20;
                oXLSheet.Columns[4].ColumnWidth = 45;
                oXLSheet.Columns[5].ColumnWidth = 20;
                oXLSheet.Columns[6].ColumnWidth = 12;
                oXLSheet.Columns[7].ColumnWidth = 12;
                oXLSheet.Columns[8].ColumnWidth = 12;
                oXLSheet.Columns[9].ColumnWidth = 12;
                oXLSheet.Columns[10].ColumnWidth = 30;
                oXLSheet.Columns[11].ColumnWidth = 20;
                oXLSheet.Columns[12].ColumnWidth = 20;
                oXLSheet.Range["A1: N1"].Font.Bold = true;
                {
                    ref var withBlock = ref oXLSheet;
                    var loopTo = oRecordset.Fields.Count - 1;
                    for (iCount = 0; iCount <= loopTo; iCount++)
                        withBlock.Cells[1, iCount + 1] = oRecordset.Fields[iCount].Name;
                }
                oXLApp.Visible = true;
                oXLSheet = default;
                oXLBook = default;
                oXLApp = default;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ExporterVersExcel", ex);
            }
        }
        private void ProjSoumMec_Resize(object sender, EventArgs e)
        {
            try
            {
                PositionnerBoutons();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "Form_Resize", ex);
            }
        }
        private void ProjSoumMec_Load(object sender, EventArgs e)
        {
            try
            {
                if (cmbOuvertFerme.Items.Count > 0) cmbOuvertFerme.SelectedIndex = 0;
            }
            catch (Exception ex) { AfficherErreur("ProjSoumMec", "_Click", ex); }
        }
        private void ProjSoumMec_FormClosed(object sender, FormClosedEventArgs e)
        {
            try { } catch (Exception ex) { AfficherErreur("ProjSoumMec", "_Click", ex); }
        }
        private void ProjSoumMec_FormClosing(object sender, FormClosingEventArgs e)
        {
            try { } catch (Exception ex) { AfficherErreur("ProjSoumMec", "_Click", ex); }
        }
        private void cmbclient_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                RemplirComboContacts();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmbclient_Click", ex);
            }
        }
        private void cmbProjSoum_SelectedIndexChanged(object sender, EventArgs e)
        {
            var g_sEmploye = default(object);
            try
            {
                var rstProjSoum = default(ADODB.Recordset);
                ADODB.Recordset rstOuvert;
                short X;
                string sNomClient;
                string sNomContact;
                string sNumero;
                string sTransport;
                var bTrouve = default(bool);
                Cursor.Current = Cursors.WaitCursor;
                m_bRecherchePiece = false;
                m_bChangementFRS = false;
                m_bPieceInutile = false;
                if (!string.IsNullOrEmpty(cmbProjSoum.Text))
                {
                    sNumero = txtNoProjSoum.Text;
                    txtNoProjSoum.Text = cmbProjSoum.Text;
                    InitialiserVariables(txtNoProjSoum.Text);
                    if (m_bEnregistrement == false)
                    {
                        m_eLangage = EnumLangage.FRANCAIS;
                        cmdAnglaisFrancais.Text = "Anglais";
                    }
                    rstProjSoum = new Recordset();
                    if (m_eType == EnumType.TYPE_SOUMISSION)
                    {
                        rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    else
                    {
                        rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    if (rstProjSoum.Fields["Modification"].Value == true & $"{rstProjSoum.Fields["Par"].Value}" == g_sEmploye)
                    {
                        cmdReset.Visible = true;
                    }
                    InitialiserTempsTaux(false);
                    if (m_eType == EnumType.TYPE_SOUMISSION)
                    {
                        if (VerifierSiDejaProjet() == false)
                        {
                            cmdCreerProjet.Visible = true;
                        }
                        else
                        {
                            cmdCreerProjet.Visible = false;
                        }
                    }
                    RemplirProjSoum();
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        rstOuvert = new Recordset();
                        rstOuvert.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstOuvert.Fields["Ouvert"].Value == true)
                        {
                            m_bModeAffichage = false;
                            CalculerPrix();
                            m_bModeAffichage = true;
                            rstProjSoum.Fields["total_Commission"].Value = txtCommission.Text;
                            rstProjSoum.Fields["Total_Profit"].Value = txtProfit.Text;
                            rstProjSoum.Fields["PrixTotal"].Value = txtPrixTotal.Text;
                            rstProjSoum.Fields["Total_piece"].Value = txtTotalPieces.Text;
                            rstProjSoum.Fields["total_imprevue"].Value = txtImprevus.Text;
                            rstProjSoum.Fields["Total_Temps"].Value = txtTotalTemps.Text;
                            rstProjSoum.Update();
                        }
                    }
                    rstProjSoum.Close();
                    sNomClient = txtClient.Text;
                    sNomContact = txtContact.Text;
                    sTransport = txtTransport.Text;
                    for (X = 0; X <= (short)(cmbClient.Items.Count - 1); X++)
                    {
                        if (cmbClient.Items[X].ToString() == (sNomClient ?? ""))
                        {
                            cmbClient.SelectedIndex = X;
                            bTrouve = true; break;
                        }
                    }
                    if (bTrouve == false)
                    {
                        RemplirComboClients(string.Empty);
                        var loopTo1 = (short)(cmbClient.Items.Count - 1);
                        for (X = 0; X <= loopTo1; X++)
                        {
                            if (cmbClient.Items[X].ToString() == (sNomClient ?? ""))
                            {
                                cmbClient.SelectedIndex = X;
                                break;
                            }
                        }
                    }
                    for (X = 0; X <= (short)(cmbContact.Items.Count - 1); X++)
                    {
                        if (cmbContact.Items[X].ToString() == (sNomContact ?? ""))
                        {
                            cmbContact.SelectedIndex = X; break;
                        }
                    }
                    for (X = 0; X <= (short)(cmbTransport.Items.Count - 1); X++)
                    {
                        if (cmbTransport.Items[X].ToString() == (sTransport ?? ""))
                        {
                            cmbTransport.SelectedIndex = X; break;
                        }
                    }
                }
                CalculerPrixReception();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstProjSoum.CursorLocation = CursorLocationEnum.adUseServer;
                    rstProjSoum.Open("SELECT PrixRéception FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstProjSoum.Fields["PrixRéception"].Value = txtPrixReception.Text;
                    rstProjSoum.Update();
                    rstProjSoum.Close();
                }
                if (m_bSansTemps == true)
                {
                    tmrTemps.Enabled = true;
                }
                else
                {
                    tmrTemps.Enabled = false;
                    lblPasTemps.Visible = false;
                }
                rstProjSoum = default;
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmbProjSoum_Click", ex, txtNoProjSoum.Text);
            }
        }
        /// Méthode qui sert à vérifier si une soumission est déjà assignée à un projet
        private bool VerifierSiDejaProjet()
        {
            try
            {
                ADODB.Recordset rstProjet;
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF)
                {
                    return true;
                }
                rstProjet.Close();
                rstProjet = default;
                return false;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerifierSiDejaProjet", ex);
                return false;
            }
        }
        private void cmbChoix_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                bool bModif;
                short iCmbOuvertFerme;
                Cursor.Current = Cursors.WaitCursor;
                txtChoix.Text = cmbChoix.Text;
                lvwSoumission.CheckBoxes = true;
                if (cmbChoix.SelectedIndex == I_IDX_SOUMISSION)
                {
                    m_eType = EnumType.TYPE_SOUMISSION;
                    m_bChangementChoix = true;
                    iCmbOuvertFerme = (short)cmbOuvertFerme.SelectedIndex;
                    cmbOuvertFerme.Items.Clear();
                    cmbOuvertFerme.Items.Add("Ouvertes");
                    cmbOuvertFerme.Items.Add("Toutes");
                    cmbOuvertFerme.SelectedIndex = iCmbOuvertFerme;
                    m_bChangementChoix = false;
                    bModif = g_bModificationSoumissionsMec;
                    lblNoSoumission.Visible = false;
                    txtNoSoumission.Visible = false;
                    lblPrixReception.Visible = false;
                    txtPrixReception.Visible = false;
                    lblPrixSoumission.Visible = false;
                    txtPrixSoumission.Visible = false;
                }
                else
                {
                    m_eType = EnumType.TYPE_PROJET;
                    m_bChangementChoix = true;
                    iCmbOuvertFerme = (short)cmbOuvertFerme.SelectedIndex;
                    cmbOuvertFerme.Items.Clear();
                    cmbOuvertFerme.Items.Add("Ouverts");
                    cmbOuvertFerme.Items.Add("Tous");
                    cmbOuvertFerme.SelectedIndex = iCmbOuvertFerme;
                    m_bChangementChoix = false;
                    bModif = g_bModificationProjetsMec;
                    lblNoSoumission.Visible = true;
                    txtNoSoumission.Visible = true;
                    lblPrixReception.Visible = true;
                    txtPrixReception.Visible = true;
                    lblPrixSoumission.Visible = true;
                    txtPrixSoumission.Visible = true;
                    txtDateFacturation.Text = ConvertDate(DateTime.Today);
                }
                cmdModifier.Enabled = bModif;
                cmdSupprimer.Enabled = bModif;
                cmdAjouter.Enabled = bModif;
                cmdCopier.Enabled = bModif;
                cmdCreerProjet.Enabled = bModif;
                cmdBonCommande.Enabled = g_bModificationBC;
                cmdImprimer.Enabled = bModif;
                cmdAnglaisFrancais.Enabled = bModif;
                cmdDemande.Enabled = bModif;
                cmdExtra.Enabled = bModif;
                RemplirColonnes();
                m_bModeAffichage = true;
                ViderChamps();
                BarrerChamps(true);
                RemplirComboProjSoum(string.Empty);
                AfficherControles(EnumMode.MODE_INACTIF);
                PositionnerBoutons();
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmbChoix_Click", ex);
            }
        }
        private void cmdHistorique_Click(object sender, EventArgs e)
        {
        }
        private void cmdBavards_Click(object sender, EventArgs e)
        {
        }
        private void cmdAjouterSection_Click(object sender, EventArgs e)
        {
        }
        private void cmdDateFacturation_Click(object sender, EventArgs e)
        {
        }
        private void cmbOuvertFerme_SelectedIndexChanged(object eventSender, EventArgs e)
        {
            try
            {
                if (cmbChoix.SelectedIndex != -1)
                {
                    if (m_bChangementChoix == false)
                    {
                        RemplirComboProjSoum("");
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("FrmProjSoumMec", "cmbOuvertFerme_Click", ex);
            }
        }
        private void cmbPieces_SelectedIndexChanged(object eventSender, EventArgs e)
        {
            try
            {
                RemplirListViewPieces();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmbPieces_Click", ex);
            }
        }
        private void cmdAnglaisFrancais_Click(object eventSender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if (cmdAnglaisFrancais.Text == "Anglais")
                {
                    m_eLangage = EnumLangage.ANGLAIS;
                    cmdAnglaisFrancais.Text = "Français";
                }
                else
                {
                    m_eLangage = EnumLangage.FRANCAIS;
                    cmdAnglaisFrancais.Text = "Anglais";
                }
                UpdateDescription();
                RemplirComboSections();
                UpdateOrdre();
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnglaisFrancais_Click", ex);
            }
        }
        private void cmdAnnuler_Click(object eventSender, EventArgs e)
        {
            try
            {
                fraPieceTrouve.Visible = false;
                fraFournisseur.Visible = false;
                fraCommentaire.Visible = false;
                fraDateRequise.Visible = false;
                Cursor.Current = Cursors.WaitCursor;
                OuvrirProjSoum(false);
                AfficherControles(EnumMode.MODE_INACTIF);
                m_bEnregistrement = true;
                AfficherProjSoum(m_sAncienProjSoum);
                m_bEnregistrement = false;
                m_bModeAjout = false;
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnuler_Click", ex);
            }
        }
        private void cmdAnnulerCommentaire_Click(object eventSender, EventArgs e)
        {
            try
            {
                fraCommentaire.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnulerCommentaire_Click", ex);
            }
        }
        private void cmdAnnulerDateRequise_Click(object eventSender, EventArgs e)
        {
            try
            {
                fraDateRequise.Visible = false;
                m_bMonthViewHasFocus = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnulerDateRequise_Click", ex);
            }
        }
        private void cmdAnnulerDateRequise_MouseUp(object eventSender, MouseEventArgs e)
        {
            try
            {
                if (m_bMonthViewHasFocus == true)
                {
                    cmdAnnulerDateRequise_Click(cmdAnnulerDateRequise, new EventArgs());
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnulerDateRequise_MouseUp", ex);
            }
        }
        private void cmdOKCommentaire_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_COMMENTAIRE)
                {
                    lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_COMMENTAIRE].Text = txtCommentaire.Text;
                }
                else
                {
                    lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, txtCommentaire.Text));
                }
                fraCommentaire.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdOKCommentaire_Click", ex);
            }
        }
        private void cmdOKDateRequise_Click(object eventSender, EventArgs e)
        {
            var COLOR_ORANGE = default(object);
            try
            {
                DateTime datDate;
                datDate = mvwDateRequise.SelectionStart;
                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DATE_REQUISE)
                {
                    lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DATE_REQUISE].Text = ConvertDate(datDate);
                }
                else
                {
                    lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, ConvertDate(datDate)));
                }
                // chk: COLOR_ORANGE.
                lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_ORANGE));
                fraDateRequise.Visible = false;
                m_bMonthViewHasFocus = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdOKDateRequise_Click", ex);
            }
        }
        private void cmdAnnulerFRS_Click(object eventSender, EventArgs e)
        {
            try
            {
                fraFournisseur.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnulerFRS_Click", ex);
            }
        }
        private void cmdAnnulerPieceTrouve_Click(object eventSender, EventArgs e)
        {
            try
            {
                fraPieceTrouve.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnulerPieceTrouve", ex);
            }
        }
        private void cmdBonCommande_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                var sUser = default(string);
                if (Droite(txtNoProjSoum.Text, 2) == "99")
                {
                    MessageBox.Show("Vous ne pouvez pas commander de pièce à partir de ce projet!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                rstProjSoum = new Recordset();
                rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstProjSoum.Fields["Ouvert"].Value == true & rstProjSoum.Fields["Verrouillé"].Value == false)
                {
                    if (VerifierSiOuvert(ref sUser) == false)
                    {
                        if (lvwSoumission.Items.Count > 0)
                        {
                            Form f = new ChoixBonCommande(txtNoProjSoum.Text, this, (int)m_eLangage);
                            f.Text = "Commande n~ " + txtNoProjSoum.Text;
                        }
                        else
                        {
                            MessageBox.Show("Il n'y a pas de pièces à commander pour ce projet!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        MessageBox.Show("Ce projet est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else if (rstProjSoum.Fields["Ouvert"].Value == false)
                {
                    MessageBox.Show("Ce projet est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    MessageBox.Show("Ce projet est verrouillé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                if (g_bModificationBC == true)
                {
                    cmbProjSoum_SelectedIndexChanged(cmbProjSoum, new EventArgs());
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdBonCommande_Click", ex);
            }
        }
        // Pour ouvrir le catalogue électrique        
        private void cmdCatalogue_Click(object eventSender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                Form f = new CatalogueMec(cmbPieces.Text, string.Empty, string.Empty);
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdCatalogue_Click", ex);
            }
        }
        private void cmdMauvaisPrix_Click(object eventSender, EventArgs e)
        {
            try
            {
                MauvaisPrix();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdMauvaisPrix_Click", ex);
            }
        }
        private void cmdMaterielInutile_Click(object eventSender, EventArgs e)
        {
            try
            {
                MaterielInutile();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdMaterielInutile_Click", ex);
            }
        }
        private void cmdCopier_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                string sNoProjSoum;
                var sUser = default(string);
                bool bExiste;
                bool bVariables;
                bool bTauxHoraire;
                bool bPrixPieces;
                bool bNoValide;
                if (cmbProjSoum.Items.Count > 0)
                {
                    if (VerifierSiOuvert(ref sUser) == false)
                    {
                        sNoProjSoum = Interaction.InputBox("Quel est le numéro de la soumission?");
                        if (!string.IsNullOrEmpty(Strings.Trim(sNoProjSoum)))
                        {
                            Cursor.Current = Cursors.WaitCursor;
                            bNoValide = true;
                            if (ValiderFormatNumeroProjSoum(sNoProjSoum) == false)
                            {
                                bNoValide = false;
                            }
                            if (bNoValide == true)
                            {
                                if (ValiderFormatMectrique(sNoProjSoum) == false)
                                {
                                    bNoValide = false;
                                }
                            }
                            if (bNoValide == true)
                            {
                                if (ValiderFormatSoumission(sNoProjSoum) == false)
                                {
                                    bNoValide = false;
                                }
                            }
                            if (bNoValide == false)
                            {
                                Cursor.Current = Cursors.Default;
                                return;
                            }
                            sNoProjSoum = Strings.UCase(sNoProjSoum);
                            rstProjSoum = new Recordset();
                            rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            if (rstProjSoum.EOF)
                            {
                                bExiste = false;
                            }
                            else
                            {
                                bExiste = true;
                                MessageBox.Show("Ce numéro existe dans les soumissions électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            rstProjSoum.Close();
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstProjSoum.EOF)
                                {
                                    bExiste = false;
                                }
                                else
                                {
                                    bExiste = true;
                                    MessageBox.Show("Ce numéro existe dans les projets électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                                rstProjSoum.Close();
                            }
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstProjSoum.EOF)
                                {
                                    bExiste = false;
                                }
                                else
                                {
                                    bExiste = true;
                                    MessageBox.Show("Ce numéro existe dans les soumissions mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                                rstProjSoum.Close();
                            }
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstProjSoum.EOF)
                                {
                                    bExiste = false;
                                }
                                else
                                {
                                    bExiste = true;
                                    MessageBox.Show("Ce numéro existe dans les projets mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                                rstProjSoum.Close();
                            }
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (!rstProjSoum.EOF)
                                {
                                    if (rstProjSoum.Fields["Ouvert"].Value == false)
                                    {
                                        MessageBox.Show("Ce numéro est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        rstProjSoum.Close();
                                        rstProjSoum = default;
                                        Cursor.Current = Cursors.Default;
                                        return;
                                    }
                                }
                                rstProjSoum.Close();
                                rstProjSoum = default;
                                if (MessageBox.Show("Voulez-vous mettre à jour les variables systèmes?\n-  % Profit\n-  % Commission\n-  % Imprévu\n-  $ Pages manuel", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                {
                                    bVariables = true;
                                }
                                else
                                {
                                    bVariables = false;
                                }
                                if (MessageBox.Show("Voulez-vous mettre à jour les taux horaires?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                {
                                    bTauxHoraire = true;
                                }
                                else
                                {
                                    bTauxHoraire = false;
                                }
                                if (MessageBox.Show("Voulez-vous mettre à jour le prix des pièces?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                {
                                    bPrixPieces = true;
                                }
                                else
                                {
                                    bPrixPieces = false;
                                }
                                m_bModeAjout = true;
                                m_bModeAffichage = false;
                                m_bTempsDejaOuvert = true;
                                if (bVariables == true)
                                {
                                    InitialiserVariables(sNoProjSoum);
                                }
                                if (bTauxHoraire == true)
                                {
                                    InitialiserNouveauxTaux();
                                }
                                AfficherControles(EnumMode.MODE_AJOUT_MODIF);
                                if (bPrixPieces == true)
                                {
                                    UpdatePieces();
                                }
                                UpdateOrdre();
                                if (bVariables == true | bTauxHoraire == true | bPrixPieces == true)
                                {
                                    CalculerPrix();
                                }
                                BarrerChamps(false);
                                txtNoProjSoum.Text = sNoProjSoum;
                                txtNoSoumission.Text = string.Empty;
                            }
                            Cursor.Current = Cursors.Default;
                        }
                    }
                    else if (m_eType == EnumType.TYPE_PROJET)
                    {
                        MessageBox.Show("Ce projet est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Cette soumission est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdCopier_Click", ex);
            }
        }
        private void cmdCreerProjet_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                string sNoProjet;
                var sUser = default(string);
                short X;
                bool bExiste;
                bool bNoValide;
                var sLiaison = default(string);
                if (cmbProjSoum.Items.Count > 0)
                {
                    if (Droite(txtNoProjSoum.Text, 2) == "99")
                    {
                        MessageBox.Show("Impossible de créer un projet à partir de cette soumission!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjSoum.Fields["Ouvert"].Value == false | rstProjSoum.Fields["Verrouillé"].Value == true)
                    {
                        if (rstProjSoum.Fields["Ouvert"].Value == false)
                        {
                            MessageBox.Show("Cette soumission est fermée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            MessageBox.Show("Cette soumission est verrouillée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                        return;
                    }
                    rstProjSoum.Close();
                    if (VerifierSiOuvert(ref sUser) == false)
                    {
                        sNoProjet = Interaction.InputBox("Quel est le numéro du projet?");
                        if (!string.IsNullOrEmpty(Strings.Trim(sNoProjet)))
                        {
                            Cursor.Current = Cursors.WaitCursor;
                            bNoValide = true;
                            if (ValiderFormatNumeroProjSoum(sNoProjet) == false)
                            {
                                bNoValide = false;
                            }
                            if (bNoValide == true)
                            {
                                if (ValiderFormatMectrique(sNoProjet) == false)
                                {
                                    bNoValide = false;
                                }
                            }
                            if (bNoValide == true)
                            {
                                if (ValiderFormatJobAvecSoum(sNoProjet) == false)
                                {
                                    bNoValide = false;
                                }
                            }
                            if (bNoValide == false)
                            {
                                rstProjSoum = default;
                                Cursor.Current = Cursors.Default;
                                return;
                            }
                            sNoProjet = Strings.UCase(sNoProjet);
                            rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            if (rstProjSoum.EOF)
                            {
                                bExiste = false;
                            }
                            else
                            {
                                bExiste = true;
                                MessageBox.Show("Ce numéro existe dans les soumissions électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            rstProjSoum.Close();
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstProjSoum.EOF)
                                {
                                    bExiste = false;
                                }
                                else
                                {
                                    bExiste = true;
                                    MessageBox.Show("Ce numéro existe dans les projets électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                                rstProjSoum.Close();
                            }
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstProjSoum.EOF)
                                {
                                    bExiste = false;
                                }
                                else
                                {
                                    bExiste = true;
                                    MessageBox.Show("Ce numéro existe dans les soumissions mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                                rstProjSoum.Close();
                            }
                            if (bExiste == false)
                            {
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstProjSoum.EOF)
                                {
                                    bExiste = false;
                                }
                                else
                                {
                                    bExiste = true;
                                    MessageBox.Show("Ce numéro existe dans les projets mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                                rstProjSoum.Close();
                            }
                            if (bExiste == true)
                            {
                                rstProjSoum = default;
                                Cursor.Current = Cursors.Default;
                                return;
                            }
                            rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            if (!rstProjSoum.EOF)
                            {
                                if (rstProjSoum.Fields["Ouvert"].Value == false)
                                {
                                    MessageBox.Show("Ce numéro est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    rstProjSoum.Close();
                                    rstProjSoum = default;
                                    return;
                                }
                            }
                            rstProjSoum.Close();
                            rstProjSoum = default;
                            if (double.Parse(Droite(sNoProjet, 2)) >= 60d & double.Parse(Droite(sNoProjet, 2)) <= 98d)
                            {
                                sLiaison = Interaction.InputBox("Quelle est l'extention du projet " + Gauche(sNoProjet, 6) + " auquel ce projet sera lié?");
                            }
                            Form f = new ChoixTransfertJob(txtNoProjSoum.Text, "E");
                            if (m_bTransfertJobCancel == false)
                            {
                                TransfererSoumDansProjet(sNoProjet, sLiaison);
                                if (m_bComboChoix == true)
                                {
                                    cmbChoix.SelectedIndex = I_IDX_PROJET;
                                    for (X = 0; X <= (short)(cmbProjSoum.Items.Count - 1); X++)
                                    {
                                        if (cmbProjSoum.Items[X].ToString() == (sNoProjet ?? "")) { cmbProjSoum.SelectedIndex = X; break; }
                                    }
                                    if (!string.IsNullOrEmpty(sLiaison))
                                    {
                                        for (X = 1; X <= (short)lvwSoumission.Items.Count; X++)
                                        {
                                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, "", false)))
                                            {
                                                if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text))
                                                {
                                                    if (double.Parse(Droite(sNoProjet, 2)) >= 60d & double.Parse(Droite(sNoProjet, 2)) <= 79d)
                                                    {
                                                        AjouterPiecesExtraChargeableDansJob(lvwSoumission.Items[X], sLiaison);
                                                    }
                                                    else if (double.Parse(Droite(sNoProjet, 2)) >= 80d & double.Parse(Droite(sNoProjet, 2)) <= 98d)
                                                    {
                                                        AjouterPiecesExtraDansJob(lvwSoumission.Items[X], sLiaison);
                                                    }
                                                }
                                            }
                                            CalculerTotalRecordset(sNoProjet);
                                        }
                                    }
                                    AjouterProjetAuCumulatif();
                                }
                                cmdCreerProjet.Visible = false;
                            }
                            Cursor.Current = Cursors.Default;
                        }
                        else
                        {
                            rstProjSoum = default;
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Cette soumission est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdCreerProjet_Click", ex);
            }
        }
        private void cmdDate_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(Strings.Trim(txtDelais.Text)))
                {
                    mvwDate.SelectionStart = Conversions.ToDate(txtDelais.Text);
                }
                else
                {
                    mvwDate.SelectionStart = DateTime.Today;
                }
                mvwDate.Visible = true;
                mvwDate.Focus();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdDate_Click", ex);
            }
        }
        private void cmdDemande_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                var sUser = default(string);
                if (Droite(txtNoProjSoum.Text, 2) == "99")
                {
                    MessageBox.Show("Vous ne pouvez pas commander de pièce à partir de ce projet!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                rstProjSoum = new Recordset();
                rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstProjSoum.Fields["Ouvert"].Value == true & rstProjSoum.Fields["Verrouillé"].Value == false)
                {
                    if (VerifierSiOuvert(ref sUser) == false)
                    {
                        ChoixDemande f = new ChoixDemande(txtNoProjSoum.Text, EnumCatalogue.ELECTRIQUE, EnumModeDemande.MODE_PIECE);
                        f.Text = " EnumCatalogue.ELECTRIQUE   EnumModeDemande.MODE_PIECE";
                        f.Show();
                    }
                    else if (m_eType == EnumType.TYPE_PROJET)
                    {
                        MessageBox.Show("Ce projet est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Cette soumission est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else if (rstProjSoum.Fields["Ouvert"].Value == false)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        MessageBox.Show("Ce projet est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Cette soumission est fermée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else if (m_eType == EnumType.TYPE_PROJET)
                {
                    MessageBox.Show("Ce projet est verrouillé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    MessageBox.Show("Cette soumission est verrouillée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdDemande_Click", ex);
            }
        }
        private void cmdExtra_Click(object eventSender, EventArgs e)
        {
            try
            {
                string sNumero;
                ADODB.Recordset rstProjSoum;
                bool bExiste;
                string sExtension;
                bool bNoValide;
                if (Droite(txtNoProjSoum.Text, 2) == "99")
                {
                    MessageBox.Show("Vous ne pouvez pas faire un extra à partir de ce projet!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                sExtension = Droite(txtNoProjSoum.Text, 2);
                sNumero = Interaction.InputBox("Quel est l'extension à ajouter au numéro " + Gauche(txtNoProjSoum.Text, 6) + "?");
                if (!string.IsNullOrEmpty(sNumero))
                {
                    if (!IsNumeric(sNumero))
                    {
                        MessageBox.Show("Numéro non numérique!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    sNumero = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 3) + "-" + sNumero;
                    Cursor.Current = Cursors.WaitCursor;
                    bNoValide = true;
                    if (ValiderFormatNumeroProjSoum(sNumero) == false)
                    {
                        bNoValide = false;
                    }
                    if (bNoValide == true)
                    {
                        if (ValiderFormatMectrique(sNumero) == false)
                        {
                            bNoValide = false;
                        }
                    }
                    if (bNoValide == true)
                    {
                        if (ValiderFormatJobExtra(sNumero) == false)
                        {
                            bNoValide = false;
                        }
                    }
                    if (bNoValide == false)
                    {
                        Cursor.Current = Cursors.Default;
                        return;
                    }
                    sNumero = Strings.UCase(sNumero);
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjSoum.EOF)
                    {
                        bExiste = false;
                    }
                    else
                    {
                        bExiste = true;
                        MessageBox.Show("Ce numéro existe dans les soumissions électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    rstProjSoum.Close();
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjSoum.EOF)
                        {
                            bExiste = false;
                        }
                        else
                        {
                            bExiste = true;
                            MessageBox.Show("Ce numéro existe dans les projets électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                    }
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjSoum.EOF)
                        {
                            bExiste = false;
                        }
                        else
                        {
                            bExiste = true;
                            MessageBox.Show("Ce numéro existe dans les soumissions mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                    }
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjSoum.EOF)
                        {
                            bExiste = false;
                        }
                        else
                        {
                            bExiste = true;
                            MessageBox.Show("Ce numéro existe dans les projets mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                    }
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstProjSoum.EOF)
                        {
                            if (rstProjSoum.Fields["Ouvert"].Value == false)
                            {
                                MessageBox.Show("Ce numéro est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                rstProjSoum.Close();
                                rstProjSoum = default;
                                Cursor.Current = Cursors.Default;
                                return;
                            }
                        }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                        m_sAncienProjSoum = txtNoProjSoum.Text;
                        InitialiserVariables(txtNoProjSoum.Text);
                        txtNoProjSoum.Text = sNumero;
                        if (double.Parse(Droite(sNumero, 2)) >= 60d & double.Parse(Droite(sNumero, 2)) <= 98d)
                        {
                            m_sLiaison = Interaction.InputBox("Quelle est l'extention au projet " + Gauche(txtNoProjSoum.Text, 6) + " auquel ce projet sera lié?", DefaultResponse: sExtension);
                        }
                        m_bModeAjout = true;
                        lvwSoumission.Items.Clear();
                        CalculerPrix();
                        BarrerChamps(false);
                        m_sTempsDessin = "0";
                        m_sTempsFabrication = "0";
                        m_sTempsAssemblage = "0";
                        m_sTempsProgInterface = "0";
                        m_sTempsProgAutomate = "0";
                        m_sTempsProgRobot = "0";
                        m_sTempsVision = "0";
                        m_sTempsTest = "0";
                        m_sTempsInstallation = "0";
                        m_sTempsMiseService = "0";
                        m_sTempsFormation = "0";
                        m_sTempsGestion = "0";
                        m_sTempsShipping = "0";
                        m_sNbrePersonne = "0";
                        m_sTempsHebergement = "0";
                        m_sTempsRepas = "0";
                        m_sTempsTransport = "0";
                        m_sTempsUniteMobile = "0";
                        m_sPrixEmballage = "0";
                        txtNbreManuel.Text = "0";
                        txtPrixManuel.Text = "0";
                        txtForfait.Text = "";
                        lblForfaitInitiale.Text = "";
                        txtPrixReception.Text = "0";
                        txtPrixSoumission.Text = "0";
                        txtPrixTotal.Text = "0";
                        txtProfit.Text = "0";
                        txtCommission.Text = "0";
                        txtTotalTemps.Text = "0";
                        txtTotalPieces.Text = "0";
                        txtImprevus.Text = "0";
                        txtNoSoumission.Text = string.Empty;
                        m_sSousSection = string.Empty;
                        txtProjet.Text = string.Empty;
                        m_bModeAjout = true;
                        m_bModeAffichage = false;
                        m_bExtra = true;
                        AfficherControles(EnumMode.MODE_AJOUT_MODIF);
                    }
                }
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdExtra_Click", ex);
            }
        }
        private void cmdOKDateRequise_MouseUp(object eventSender, MouseEventArgs e)
        {
            try
            {
                if (m_bMonthViewHasFocus == true)
                {
                    cmdOKDateRequise_Click(cmdOKDateRequise, new EventArgs());
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdOKDateRequise_MouseUp", ex);
            }
        }
        private void cmdOKFRS_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (m_bPieceInutile == true | m_bChangementFRS == true)
                {
                    ChoisirFournisseurMateriel();
                }
                else
                {
                    ChoisirFournisseur();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdOKFRS_Click", ex);
            }
        }
        private void cmdOKPieceTrouve_Click(object eventSender, EventArgs e)
        {
            try
            {
                m_bRecherchePiece = true;
                m_bPieceInutile = false;
                AfficherListeFournisseurs();
                if (lvwFournisseur.Items.Count == 1)
                {
                    if (MessageBox.Show("Il n'y a aucun fournisseur pour cette pièce!\nVoulez-vous en ajouter?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        Cursor.Current = Cursors.WaitCursor;
                        Form f = new CatalogueMec(lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_CATEGORIE].Text, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text);
                        f.MdiParent = Conteneur.Mdi;
                        f.Show();
                        Cursor.Current = Cursors.Default;
                        AfficherListeFournisseurs();
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdOKPieceTrouve_Click", ex);
            }
        }
        private void cmdRafraichir_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(m_sTri))
                {
                    m_sTri = string.Empty;
                    RemplirListViewPieces();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdRafraichir_Click", ex);
            }
        }
        private void cmdRapportFACT_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                var sUser = default(string);
                string sNoFacture;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (!string.IsNullOrEmpty(txtNoProjSoum.Text))
                    {
                        if (VerifierSiOuvert(ref sUser) == false)
                        {
                            sNoFacture = lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_FACTURATION].Text;
                            if (Gauche(sNoFacture, 2) == "F-" | sNoFacture == "NC")
                            {
                                rstProjSoum = new Recordset();
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "' ORDER BY IDProjet", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (MessageBox.Show("Désirez-vous afficher les dates de réception et de commande?", "Date de réception et de commande", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                {
                                    bFlag = true;
                                }
                                else
                                {
                                    bFlag = false;
                                }
                                ImprimerProjSoumFacturation(rstProjSoum, sNoFacture);
                                ImprimerListePiecesFacturation(rstProjSoum, sNoFacture);
                                rstProjSoum.Close();
                                rstProjSoum = default;
                            }
                            else
                            {
                                MessageBox.Show("La ligne sélectionnée ne contient aucune facture!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                        {
                            MessageBox.Show("Ce projet est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Ce projet ne contient aucune pièce à imprimer!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdImprimer_Click", ex);
            }
        }
        private void cmdReset_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                if (MessageBox.Show("Êtes-vous certains de ne pas être en modification sur un autre ordinateur?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    rstProjSoum = new Recordset();
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    else
                    {
                        rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    rstProjSoum.Fields["Modification"].Value = false;
                    rstProjSoum.Fields["Par"].Value = "";
                    rstProjSoum.Update();
                    rstProjSoum.Close();
                    rstProjSoum = default;
                    cmdReset.Visible = false;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdReset_Click", ex);
            }
        }
        private void cmdRetour_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (Droite(txtNoProjSoum.Text, 2) == "99")
                {
                    MessageBox.Show("Vous ne pouvez pas faire de retour dans ce projet!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                Cursor.Current = Cursors.WaitCursor;
                Form f = new RetourMarchandise(txtNoProjSoum.Text, (int)EnumTypeRetour.PROJET, IdLoginEmploye);
                f.Text = "Retour marchandise pour le projet " + txtNoProjSoum.Text;
                f.Show();
                cmbProjSoum_SelectedIndexChanged(cmbProjSoum, new EventArgs());
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdRetour_Click", ex);
            }
        }
        private void cmdSupprimerFRS_Click(object eventSender, EventArgs e)
        {
            try
            {
                string sPiece;
                if (lvwFournisseur.FocusedItem.Text != "CHOISIR ULTÉRIEUREMENT")
                {
                    if (m_bPieceInutile == true)
                    {
                        sPiece = lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text;
                    }
                    else if (m_bRecherchePiece == true)
                    {
                        sPiece = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text;
                    }
                    else
                    {
                        sPiece = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text;
                    }
                    if (MessageBox.Show("Voulez-vous vraiment supprimer le fournisseur " + lvwFournisseur.FocusedItem.Text + " pour la pièce " + sPiece + "?", "Suppression", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        UpdateSQL("DELETE FROM PiecesFRS WHERE NoEnreg = " + lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ENTRER_PAR].Tag);
                        RemplirListViewFournisseur();
                        fraFournisseur.Visible = true;
                        lvwFournisseur.Focus();
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdSupprimerFRS_Click", ex);
            }
        }
        private void cmdTemps_Click1(object eventSender, EventArgs e)
        {
            try
            {
                if (cmbProjSoum.Items.Count > 0)
                {
                    if (m_eMode == EnumMode.MODE_AJOUT_MODIF)
                    {
                        if (m_bModeAjout == true)
                        {
                            if (m_bExtra == true)
                            {
                                Form f = new ProjSoumMecTemps(txtNoProjSoum.Text, m_eType, m_eMode, false);
                                f.Text = " ProjSoumMecTemps";
                                f.Show();
                            }
                            else
                            {
                                Form f = new ProjSoumMecTemps(txtNoProjSoum.Text, m_eType, m_eMode, true);
                                f.Text = " ProjSoumMecTemps";
                                f.Show();
                            }
                        }
                        else
                        {
                            Form f = new ProjSoumMecTemps(txtNoProjSoum.Text, m_eType, m_eMode, false);
                            f.Text = " ProjSoumMecTemps";
                            f.Show();
                        }
                    }
                    else
                    {
                        Form f = new ProjSoumMecTemps(txtNoProjSoum.Text, m_eType, m_eMode, false);
                        f.Text = " ProjSoumMecTemps";
                        f.Show();
                    }
                }
                if (m_eMode == EnumMode.MODE_AJOUT_MODIF)
                {
                    CalculerPrix();
                }
                m_bTempsDejaOuvert = true;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdTemps_Click", ex);
            }
        }
        private void cmdTexte_Click(object eventSender, EventArgs e)
        {
            try
            {
                short iIndex;
                string sSousSection;
                string sTexte;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (lvwSoumission.FocusedItem.Index == 1)
                    {
                        sSousSection = Interaction.InputBox("Quelle est la sous-section?");
                        if (string.IsNullOrEmpty(Strings.Trim(sSousSection)))
                        {
                            sSousSection = S_PAS_SOUS_SECTION;
                        }
                        sTexte = Interaction.InputBox("Quel est le texte?");
                        if (!string.IsNullOrEmpty(Strings.Trim(sTexte)))
                        {
                            if (Strings.Len(sTexte) > 255)
                            {
                                MessageBox.Show("Le texte ne doit pas dépasser 255 caractères!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            else
                            {
                                /// facon simple de convertir du bool en short
                                if (TrouverIndexSection(sSousSection) == true) { iIndex = 0; } else { iIndex = 1; }
                                AjouterTexte(iIndex, sTexte, sSousSection);
                            }
                        }
                    }
                    else
                    {
                        sTexte = Interaction.InputBox("Quel est le texte?");
                        if (!string.IsNullOrEmpty(Strings.Trim(sTexte)))
                        {
                            if (Strings.Len(sTexte) > 255)
                            {
                                MessageBox.Show("Le texte ne doit pas dépasser 255 caractères!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            else
                            {
                                iIndex = (short)lvwSoumission.FocusedItem.Index;
                                AjouterTexte(iIndex, sTexte, "");
                            }
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdTexte_Click", ex);
            }
        }
        private void AjouterTexte(short iIndex, string sTexte, string sNomSousSection)
        {
            try
            {
                string sSousSection;
                string sOrdre;
                string sIDSection;
                if (iIndex > lvwSoumission.Items.Count)
                {
                    if (string.IsNullOrEmpty(sNomSousSection))
                    {
                        sSousSection = Conversions.ToString(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_PIECE].Tag);
                    }
                    else
                    {
                        sSousSection = sNomSousSection;
                    }
                    sOrdre = Conversions.ToString(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_MANUFACT].Tag);
                    sIDSection = Conversions.ToString(lvwSoumission.Items[iIndex - 1].Tag);
                }
                else if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[iIndex].Tag, string.Empty, false)))
                {
                    if (string.IsNullOrEmpty(sNomSousSection))
                    {
                        sSousSection = Conversions.ToString(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_PIECE].Tag);
                    }
                    else
                    {
                        sSousSection = sNomSousSection;
                    }
                    sOrdre = Conversions.ToString(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_MANUFACT].Tag);
                    sIDSection = Conversions.ToString(lvwSoumission.Items[iIndex - 1].Tag);
                }
                else if (string.IsNullOrEmpty(lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Text))
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[iIndex - 1].Tag, string.Empty, false)))
                    {
                        if (string.IsNullOrEmpty(sNomSousSection))
                        {
                            sSousSection = Conversions.ToString(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_PIECE].Tag);
                        }
                        else
                        {
                            sSousSection = sNomSousSection;
                        }
                        sOrdre = Conversions.ToString(lvwSoumission.Items[iIndex - 1].SubItems[I_COL_SOUM_MANUFACT].Tag);
                        sIDSection = Conversions.ToString(lvwSoumission.Items[iIndex].Tag);
                    }
                    else
                    {
                        MessageBox.Show("Vous ne pouvez pas mettre du texte entre une section et une sous-section!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(sNomSousSection))
                    {
                        sSousSection = Conversions.ToString(lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Tag);
                    }
                    else
                    {
                        sSousSection = sNomSousSection;
                    }
                    sOrdre = Conversions.ToString(lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_MANUFACT].Tag);
                    sIDSection = Conversions.ToString(lvwSoumission.Items[iIndex].Tag);
                }
                lvwSoumission.Items.Insert(iIndex, "");
                ValeurParDefaut(lvwSoumission.Items[iIndex]);
                if (m_eLangage == EnumLangage.ANGLAIS)
                {
                    if (lvwSoumission.Items[iIndex].SubItems.Count > I_COL_SOUM_PIECE)
                    {
                        lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Text = "Text";
                    }
                    else
                    {
                        lvwSoumission.Items[iIndex].SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, "Text"));
                    }
                }
                else if (lvwSoumission.Items[iIndex].SubItems.Count > I_COL_SOUM_PIECE)
                {
                    lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Text = "Texte";
                }
                else
                {
                    lvwSoumission.Items[iIndex].SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, "Texte"));
                }
                if (lvwSoumission.Items[iIndex].SubItems.Count > I_COL_SOUM_DESCR)
                {
                    lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_DESCR].Text = sTexte;
                }
                else
                {
                    lvwSoumission.Items[iIndex].SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sTexte));
                }
                lvwSoumission.Items[iIndex].Tag = sIDSection;
                if (lvwSoumission.Items[iIndex].SubItems.Count > I_COL_SOUM_MANUFACT)
                {
                    lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_MANUFACT].Text = " ";
                }
                else
                {
                    lvwSoumission.Items[iIndex].SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, " "));
                }
                lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_MANUFACT].Tag = sOrdre;

                lvwSoumission.Items[iIndex].SubItems[I_COL_SOUM_PIECE].Tag = sSousSection;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterTexte", ex);
            }
        }
        private void cmdTri_Click(object eventSender, EventArgs e)
        {
            try
            {
                m_sTri = Interaction.InputBox("Quel est le texte à trier?");
                m_iCol = (short)cmbTri.SelectedIndex;
                if (!string.IsNullOrEmpty(m_sTri))
                {
                    RemplirListViewPieces();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdTri_Click", ex);
            }
        }
        private void cmdPhotos_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtCheminPhotos.Text))
                {
                    Form f = new PhotoProjSoum(txtCheminPhotos.Text);
                    f.Text = " Photos pour le projet " + txtNoProjSoum.Text;
                    f.Show();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdPhotos_Click", ex);
            }
        }
        private void cmdReception_Click(object eventSender, EventArgs e)
        {
            try
            {
                short X;
                var bOuvert = default(bool);
                if (Droite(txtNoProjSoum.Text, 2) == "99")
                {
                    MessageBox.Show("Vous ne pouvez pas faire de réception pour ce projet!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                if (bOuvert == true)
                {
                    Close();
                }
                Form f = new ReceptionMec(IdLoginEmploye, txtNoProjSoum.Text);
                f.MdiParent = Conteneur.Mdi;
                f.Show();
                RemplirListViewProjSoum(txtNoProjSoum.Text);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdReception_Click", ex);
            }
        }
        private void cmdBrowse_Click(object eventSender, EventArgs e)
        {
            try
            {
                Form f = new ChoixDossier();
                f.ShowDialog();
                if (m_bAnnulerChemin == false)
                {
                    txtCheminPhotos.Text = m_sChemin;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdBrowse_Click", ex);
            }
        }
        private void FrmProjSoumMec_FormClosing(object eventSender, FormClosingEventArgs e)
        {
            bool Cancel = e.Cancel;
            var UnloadMode = e.CloseReason;
            try
            {
                if (m_eMode == EnumMode.MODE_AJOUT_MODIF)
                {
                    MessageBox.Show("Veuillez enregistrer ou annuler avant de fermer!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Cancel = Conversions.ToBoolean(1);
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "Form_QueryUnload", ex);
                e.Cancel = Cancel;
            }
        }
        private void lvwHistorique_Leave(object eventSender, EventArgs e)
        {
            try
            {
                lvwHistorique.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwHistorique_LostFocus", ex);
            }
        }
        private void lvwBavard_Leave(object eventSender, EventArgs e)
        {
            try
            {
                lvwBavard.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwBavard_LostFocus", ex);
            }
        }
        private void lvwfournisseur_KeyDown(object eventSender, KeyEventArgs e)
        {
            short KeyCode = (short)e.KeyCode;
            short Shift = (short)((int)e.KeyData / 0x10000);
            var g_bModificationCatalogueMec = default(object);
            try
            {
                string sPiece;
                if (KeyCode == (int)Keys.Delete)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(g_bModificationCatalogueMec, true, false)))
                    {
                        if (lvwFournisseur.FocusedItem.Text != "CHOISIR ULTÉRIEUREMENT")
                        {
                            if (m_bPieceInutile == true)
                            {
                                sPiece = lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text;
                            }
                            else if (m_bRecherchePiece == true)
                            {
                                sPiece = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text;
                            }
                            else
                            {
                                sPiece = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text;
                            }
                            if (MessageBox.Show("Voulez-vous vraiment supprimer le fournisseur " + lvwFournisseur.FocusedItem.Text + " pour la pièce " + sPiece + "?", "Suppression", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                UpdateSQL("DELETE FROM PiecesFRS WHERE NoEnreg = " + lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_ENTRER_PAR].Tag);
                                RemplirListViewFournisseur();
                                fraFournisseur.Visible = true;
                                lvwFournisseur.Focus();
                            }
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwFournisseur_KeyDown", ex);
            }
        }
        private void lvwPieces_ColumnClick(object eventSender, ColumnClickEventArgs e)
        {
            var ColumnHeader = lvwPieces.Columns[e.Column];
            try
            {
                string sTexte;
                sTexte = Interaction.InputBox("Quel est le texte à rechercher?");
                if (!string.IsNullOrEmpty(Strings.Trim(sTexte)))
                {
                    if (Strings.Len(Strings.Trim(sTexte)) >= 2)
                    {
                        RemplirListViewRecherche((short)(ColumnHeader.Index - 1), sTexte);
                        if (lvwPieceTrouve.Items.Count > 0)
                        {
                            fraPieceTrouve.Visible = true;
                        }
                        else
                        {
                            MessageBox.Show("Aucun enregistrements trouvés!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        MessageBox.Show("Il faut un minimum de 2 caractères pour rechercher!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwPieces_ColumnClick", ex);
            }
        }
        private void RemplirListViewRecherche(short iIndexColumn, string sTexte)
        {
            try
            {
                ADODB.Recordset rstPiece;
                ListViewItem itmPiece;
                short X;
                var sChamps = default(string);
                var sRecherche = default(string);
                string sLettre;
                lvwPieceTrouve.Items.Clear();
                if (iIndexColumn == I_COL_PIECES_NO_ITEM)
                {
                    var loopTo = (short)Strings.Len(sTexte);
                    for (X = 1; X <= loopTo; X++)
                    {
                        sLettre = Strings.Mid(sTexte, X, 1);
                        if (Strings.Asc(sLettre) >= 48 & Strings.Asc(sLettre) <= 57 | Strings.Asc(sLettre) >= 65 & Strings.Asc(sLettre) <= 90 | Strings.Asc(sLettre) >= 97 & Strings.Asc(sLettre) <= 122)
                        {
                            sRecherche = sRecherche + sLettre;
                        }
                    }
                }
                switch (iIndexColumn)
                {
                    case I_COL_PIECES_PIECE_GRB: { sChamps = "PIECE_GRB"; break; }
                    case I_COL_PIECES_NO_ITEM: { sChamps = "PIECE_MODIF"; break; }
                    case I_COL_PIECES_DESCR_EN: { sChamps = "DESC_EN"; break; }
                    case I_COL_PIECES_DESCR_FR: { sChamps = "DESC_FR"; break; }
                    case I_COL_PIECES_MANUFACT: { sChamps = "FABRICANT"; break; }
                }
                rstPiece = new Recordset();
                if (iIndexColumn == I_COL_PIECES_NO_ITEM)
                {
                    rstPiece.Open("SELECT * FROM CatalogueMec WHERE " + sChamps + " like '%" + sRecherche + "%' ", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstPiece.Open("SELECT * FROM CatalogueMec WHERE" + sChamps + " like '%" + sTexte.Replace("'", "''") + "%'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                while (!rstPiece.EOF)
                {
                    itmPiece = lvwPieceTrouve.Items.Add(string.Empty);
                    if (!(rstPiece.Fields["TEMPS"].Value is DBNull))
                    {
                        itmPiece.Tag = rstPiece.Fields["TEMPS"].Value;
                    }
                    else
                    {
                        itmPiece.Tag = string.Empty;
                    }
                    if (!(rstPiece.Fields["PIECE_GRB"].Value is DBNull))
                    {
                        itmPiece.Text = rstPiece.Fields["PIECE_GRB"].Value;
                    }
                    else
                    {
                        itmPiece.Text = "";
                    }
                    if (itmPiece.SubItems.Count > I_COL_RECH_NO_ITEM)
                    {
                        itmPiece.SubItems[I_COL_RECH_NO_ITEM].Text = rstPiece.Fields["PIECE"].Value;
                    }
                    else
                    {
                        itmPiece.SubItems.Insert(I_COL_RECH_NO_ITEM, new ListViewItem.ListViewSubItem(null, rstPiece.Fields["PIECE"].Value));
                    }
                    if (itmPiece.SubItems.Count > I_COL_RECH_CATEGORIE)
                    {
                        itmPiece.SubItems[I_COL_RECH_CATEGORIE].Text = rstPiece.Fields["CATEGORIE"].Value;
                    }
                    else
                    {
                        itmPiece.SubItems.Insert(I_COL_RECH_CATEGORIE, new ListViewItem.ListViewSubItem(null, rstPiece.Fields["CATEGORIE"].Value));
                    }
                    if (!(rstPiece.Fields["FABRICANT"].Value is DBNull))
                    {
                        if (itmPiece.SubItems.Count > I_COL_RECH_MANUFACT)
                        {
                            itmPiece.SubItems[I_COL_RECH_MANUFACT].Text = rstPiece.Fields["FABRICANT"].Value;
                        }
                        else
                        {
                            itmPiece.SubItems.Insert(I_COL_RECH_MANUFACT, new ListViewItem.ListViewSubItem(null, rstPiece.Fields["FABRICANT"].Value));
                        }
                    }
                    else if (itmPiece.SubItems.Count > I_COL_RECH_MANUFACT)
                    {
                        itmPiece.SubItems[I_COL_RECH_MANUFACT].Text = "";
                    }
                    else
                    {
                        itmPiece.SubItems.Insert(I_COL_RECH_MANUFACT, new ListViewItem.ListViewSubItem(null, ""));
                    }
                    if (!(rstPiece.Fields["DESC_EN"].Value is DBNull))
                    {
                        if (itmPiece.SubItems.Count > I_COL_RECH_DESCR_EN)
                        {
                            itmPiece.SubItems[I_COL_RECH_DESCR_EN].Text = rstPiece.Fields["DESC_EN"].Value;
                        }
                        else
                        {
                            itmPiece.SubItems.Insert(I_COL_RECH_DESCR_EN, new ListViewItem.ListViewSubItem(null, rstPiece.Fields["DESC_EN"].Value));
                        }
                    }
                    else if (itmPiece.SubItems.Count > I_COL_RECH_DESCR_EN)
                    {
                        itmPiece.SubItems[I_COL_RECH_DESCR_EN].Text = "";
                    }
                    else
                    {
                        itmPiece.SubItems.Insert(I_COL_RECH_DESCR_EN, new ListViewItem.ListViewSubItem(null, ""));
                    }
                    if (!(rstPiece.Fields["DESC_FR"].Value is DBNull))
                    {
                        if (itmPiece.SubItems.Count > I_COL_RECH_DESCR_FR)
                        {
                            itmPiece.SubItems[I_COL_RECH_DESCR_FR].Text = rstPiece.Fields["DESC_FR"].Value;
                        }
                        else
                        {
                            itmPiece.SubItems.Insert(I_COL_RECH_DESCR_FR, new ListViewItem.ListViewSubItem(null, rstPiece.Fields["DESC_FR"].Value));
                        }
                    }
                    else if (itmPiece.SubItems.Count > I_COL_RECH_DESCR_FR)
                    {
                        itmPiece.SubItems[I_COL_RECH_DESCR_FR].Text = "";
                    }
                    else
                    {
                        itmPiece.SubItems.Insert(I_COL_RECH_DESCR_FR, new ListViewItem.ListViewSubItem(null, ""));
                    }
                    rstPiece.MoveNext();
                }
                rstPiece.Close();
                rstPiece = null;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListViewRecherche", ex);
            }
        }
        private void lvwPieceTrouve_DoubleClick(object eventSender, EventArgs e)
        {
            try
            {
                short X;
                m_bRecherchePiece = true;
                m_bPieceInutile = false;
                m_bChangementFRS = false;

                AfficherListeFournisseurs();
                if (lvwFournisseur.Items.Count == 1)
                {
                    if (MessageBox.Show("Il n'y a aucun fournisseur pour cette pièce!\nVoulez-vous en ajouter?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        Cursor.Current = Cursors.WaitCursor;

                        Form f = new CatalogueMec(lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_CATEGORIE].Text, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text);
                        f.MdiParent = Conteneur.Mdi;
                        f.Show();
                        Cursor.Current = Cursors.Default;
                        AfficherListeFournisseurs();
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwPieceTrouve_DblClick", ex);
            }
        }
        private void lvwSoumission_DoubleClick1(object eventSender, EventArgs e)
        {
            var COLOR_ORANGE = default(object);
            var COLOR_BRUN = default(object);
            try
            {

                if (lvwSoumission.Items.Count > 0)
                {
                    if (m_eMode == EnumMode.MODE_AJOUT_MODIF)
                    {
                        if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text))
                        {
                            ModifierSousSection();
                        }
                        else if (Conversions.ToBoolean(Operators.AndObject(!string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text), Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.Tag, string.Empty, false))))
                        {
                            if (lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Texte" & lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text != "Text")
                            {

                                if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DISTRIB].Text))
                                {
                                    if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].Text))
                                    {
                                        if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_PROFIT)
                                        {
                                            lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].Text = " ";
                                        }
                                        else
                                        {
                                            lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, " "));
                                        }
                                    }
                                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROFIT].Tag, "EXTRA", false)))
                                    {
                                        AjouterPrix();
                                    }
                                    else
                                    {
                                        MessageBox.Show("Cette commande doit être faite dans le projet " + lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PROVENANCE].Text, Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    }
                                }
                                else if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_ORANGE, false)))
                                {
                                    if (MessageBox.Show("Voulez-vous annuler cette commande?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                    {
                                        AnnulerCommande();
                                    }
                                }
                                else if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_BRUN, false)))
                                {
                                    ChangerFournisseurRetour();
                                }
                            }
                            else
                            {
                                ModifierTexte();
                            }
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwSoumission_DblClick", ex);
            }
        }
        private void ModifierTexte()
        {
            try
            {
                string sTexte;
                sTexte = Interaction.InputBox("Quel est le nouveau texte?", DefaultResponse: lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text);
                if (!string.IsNullOrEmpty(sTexte))
                {
                    if (Strings.Len(sTexte) > 255)
                    {
                        MessageBox.Show("Le texte ne pas dépasser 255 caractères!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DESCR)
                    {
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text = sTexte;
                    }
                    else
                    {
                        lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sTexte));
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ModifierTexte", ex);
            }
        }
        private void ModifierSousSection()
        {
            try
            {
                string sSousSection;
                string sAncienneSS;
                string sTag;
                short X;
                sSousSection = Interaction.InputBox("Quel est le nouveau nom ?", DefaultResponse: lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text);
                if (sSousSection.Length > 0)
                {
                    sAncienneSS = lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text;
                    if (string.IsNullOrEmpty(sAncienneSS))
                    {
                        sAncienneSS = S_PAS_SOUS_SECTION;
                    }
                    if (string.IsNullOrEmpty(Strings.Trim(sSousSection)))
                    {
                        sTag = S_PAS_SOUS_SECTION;
                        sSousSection = string.Empty;
                    }
                    else
                    {
                        sTag = sSousSection;
                    }
                    if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_DESCR)
                    {
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DESCR].Text = sSousSection;
                    }
                    else
                    {
                        lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, sSousSection));
                    }
                    var loopTo = (short)lvwSoumission.Items.Count;
                    for (X = (short)(lvwSoumission.FocusedItem.Index + 1); X <= loopTo; X++)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Tag, sAncienneSS, false)))
                        {
                            lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Tag = sTag;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ModifierSousSection", ex);
            }
        }
        private void RemplirOptionsMenuRightClick(short iNbreSelected)
        {
            var g_bModificationFacturation = default(object);
            try
            {
                var bFacturer = default(bool);
                var bNC = default(bool);
                var bDateRequise = default(bool);
                var bCommentaire = default(bool);
                var bID = default(bool);
                var bMauvaisPrix = default(bool);
                var bMaterielInutile = default(bool);
                var bTexte = default(bool);
                var bSousSection = default(bool);
                var bFournisseur = default(bool);
                var bAnnulerCommande = default(bool);
                var bSupprimer = default(bool);
                var bAjouterPrix = default(bool);
                var bSortieMagasin = default(bool);
                var bChangerQuantite = default(bool);
                if (iNbreSelected > 1)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(g_bModificationFacturation, true, false)))
                        {
                            bFacturer = true;
                            bNC = true;
                            bSupprimer = true;
                        }
                    }
                    else
                    {
                        bSupprimer = true;
                    }
                }
                else if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text))
                {
                    bSousSection = true;
                }
                else if (lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text == "Texte" | lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Text == "Text")
                {
                    bTexte = true;
                    if (m_eType == EnumType.TYPE_SOUMISSION | m_eType == EnumType.TYPE_PROJET & double.Parse(Droite(txtNoProjSoum.Text, 2)) > 19d)
                    {
                        bSupprimer = true;
                    }
                }
                else
                {
                    if (ColorTranslator.ToOle(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor) == -2147483640)
                    {
                        lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor = ColorTranslator.FromOle(0);
                    }
                    switch (ColorTranslator.ToOle(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].ForeColor))
                    {
                        case var @case when Operators.ConditionalCompareObjectEqual(@case, COLOR_ORANGE, false):
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(g_bModificationFacturation, true, false)))
                                {
                                    bFacturer = true;
                                    bNC = true;
                                }
                                bID = true;
                                bDateRequise = true;
                                bCommentaire = true;
                                bAnnulerCommande = true;
                                bMauvaisPrix = true;
                                break;
                            }
                        case var case1 when Operators.ConditionalCompareObjectEqual(case1, COLOR_BRUN, false):
                            {
                                bCommentaire = true;
                                bFournisseur = true;
                                if (m_eType == EnumType.TYPE_SOUMISSION | m_eType == EnumType.TYPE_PROJET & double.Parse(Droite(txtNoProjSoum.Text, 2)) > 19d)
                                {
                                    bSupprimer = true;
                                }
                                break;
                            }
                        case var case2 when Operators.ConditionalCompareObjectEqual(case2, COLOR_GRIS, false):
                            {
                                // chk: g_bModificationFacturation.
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(g_bModificationFacturation, true, false)))
                                {
                                    bFacturer = true;
                                    bNC = true;
                                }
                                bCommentaire = true;
                                bID = true;
                                bMauvaisPrix = true;
                                bMaterielInutile = true;
                                break;
                            }
                        case var case3 when Operators.ConditionalCompareObjectEqual(case3, COLOR_VERT_FORET, false):
                            {
                                bCommentaire = true;
                                if (m_eType == EnumType.TYPE_SOUMISSION | m_eType == EnumType.TYPE_PROJET & double.Parse(Droite(txtNoProjSoum.Text, 2)) > 19d)
                                {
                                    bSupprimer = true;
                                }
                                break;
                            }
                        case var case4 when Operators.ConditionalCompareObjectEqual(case4, COLOR_ROUGE, false):
                            {
                                bCommentaire = true;
                                break;
                            }
                        case var case5 when Operators.ConditionalCompareObjectEqual(case5, COLOR_MAGENTA, false):
                            {
                                bCommentaire = true;
                                bAjouterPrix = true;
                                if (m_eType == EnumType.TYPE_PROJET)
                                {
                                    bID = true;
                                }
                                if (m_eType == EnumType.TYPE_SOUMISSION)
                                {
                                    bChangerQuantite = true;
                                }
                                break;
                            }
                        case var case6 when Operators.ConditionalCompareObjectEqual(case6, COLOR_NOIR, false):
                            {
                                if (m_eType == EnumType.TYPE_PROJET)
                                {
                                    // chk: g_bModificationFacturation.
                                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(g_bModificationFacturation, true, false)))
                                    {
                                        bFacturer = true;
                                        bNC = true;
                                    }
                                    bID = true;
                                    bMaterielInutile = true;
                                    bSortieMagasin = true;
                                }
                                else
                                {
                                    bChangerQuantite = true;
                                }
                                bCommentaire = true;
                                bMauvaisPrix = true;
                                bFournisseur = true;
                                bSupprimer = true;
                                break;
                            }
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirOptionsMenuRightClick", ex);
            }
        }
        public void mnuAjouterPrix_Click(object eventSender, EventArgs e)
        {
            try
            {
                AjouterPrix();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuAjouterPrix_Click", ex);
            }
        }
        public void mnuAnnulerCommande_Click(object eventSender, EventArgs e)
        {
            try
            {
                AnnulerCommande();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuAnnulerCommande_Click", ex);
            }
        }
        public void mnuChangerSS_Click(object eventSender, EventArgs e)
        {
            try
            {
                ModifierSousSection();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuChangerSS_Click", ex);
            }
        }
        public void mnuDateRequise_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DATE_REQUISE].Text.Trim()) == true)
                {
                    mvwDateRequise.SelectionStart = DateTime.Today;
                }
                else
                {
                    mvwDateRequise.SelectionStart = ConvertDateTexte(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_DATE_REQUISE].Text);
                }
                fraDateRequise.Top = lvwSoumission.Top;
                fraDateRequise.Visible = true;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuDateRequise_Click", ex);
            }
        }
        public void mnuCommentaire_Click(object eventSender, EventArgs e)
        {
            try
            {
                txtCommentaire.Text = lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_COMMENTAIRE].Text;
                fraCommentaire.Top = lvwSoumission.Top;
                fraCommentaire.Visible = true;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuCommentaire_Click", ex);
            }
        }
        public void mnuFacturer_Click(object eventSender, EventArgs e)
        {
            try
            {
                FacturerDate();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuFacturer_Click", ex);
            }
        }
        public void mnuFournisseur_Click(object eventSender, EventArgs e)
        {
            try
            {
                ChangerFournisseurRetour();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuFournisseur_Click", ex);
            }
        }
        public void mnuID_Click(object eventSender, EventArgs e)
        {
            try
            {
                if (lvwSoumission.FocusedItem.SubItems.Count > I_COL_SOUM_ID)
                {
                    lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ID].Text = Interaction.InputBox("Quel est l'ID", DefaultResponse: lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ID].Text);
                }
                else
                {
                    lvwSoumission.FocusedItem.SubItems.Insert(I_COL_SOUM_ID, new ListViewItem.ListViewSubItem(null, Interaction.InputBox("Quel est l'ID", DefaultResponse: lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_ID].Text)));
                }
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuID_Click", ex);
            }
        }
        public void mnuInutile_Click(object eventSender, EventArgs e)
        {
            try
            {
                MaterielInutile();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuInutile_Click", ex);
            }
        }
        public void mnuMauvaisPrix_Click(object eventSender, EventArgs e)
        {
            try
            {
                MauvaisPrix();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuMauvaisPrix", ex);
            }
        }
        public void mnuNC_Click(object eventSender, EventArgs e)
        {
            try
            {
                FacturerNC();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuNC_Click", ex);
            }
        }
        public void mnuQuantite_Click(object eventSender, EventArgs e)
        {
            try
            {
                ChangerQuantite();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuQuantite_Click", ex);
            }
        }
        public void mnuSortieMagasin_Click(object eventSender, EventArgs e)
        {
            try
            {
                SortieMagasin();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuSortieMagasin_Click", ex);
            }
        }
        public void mnuSupprimer_Click(object eventSender, EventArgs e)
        {
            try
            {
                EffacerItemListViewSoumission();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuSupprimer_Click", ex);
            }
        }
        public void mnuTexte_Click(object eventSender, EventArgs e)
        {
            try
            {
                ModifierTexte();
                EnleverSelection();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mnuTexte_Click", ex);
            }
        }
        private void mvwDate_Leave(object eventSender, EventArgs e)
        {
            try
            {
                mvwDate.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mvwDate_LostFocus", ex);
            }
        }
        private void mvwDateFacturation_Leave(object eventSender, EventArgs e)
        {
            try
            {
                mvwDateFacturation.Visible = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mvwDateFacturation_LostFocus", ex);
            }
        }
        private void cmdEnregistrer_Click(object eventSender, EventArgs e)
        {
            try
            {
                string sMessage;
                fraFournisseur.Visible = false;
                fraPieceTrouve.Visible = false;
                fraCommentaire.Visible = false;
                fraDateRequise.Visible = false;
                foreach (Control objControl in Controls)
                {
                    if (objControl is TextBox)
                    {
                        if (objControl.Visible == true)
                        {
                            if (objControl.Name != "txtNoSoumission" & objControl.Name != "txtCheminPhotos" & objControl.Name != "txtPrixReception" & objControl.Name != "txtDateFacturation" & objControl.Name != "txtPrixSoumission" & objControl.Name != "txtDelais" & objControl.Name != "txtForfait")
                            {
                                if (string.IsNullOrEmpty(Strings.Trim(objControl.Text)))
                                {
                                    MessageBox.Show("Vous devez remplir tous les champs!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    return;
                                }
                            }
                        }
                    }
                    else if (objControl is ComboBox)
                    {
                        if (objControl.Visible == true)
                        {
                            if (objControl.Name != "cmbTri" & objControl.Name != "cmbSections" & objControl.Name != "cmbPieces")
                            {
                                MessageBox.Show("Vous devez remplir tous les champs!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }
                    }
                }
                if (cmbTransport.SelectedIndex == -1)
                {
                    MessageBox.Show("Vous devez choisir le transport!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                if (m_eType == EnumType.TYPE_SOUMISSION)
                {
                    if (double.Parse(m_sTempsTest) == 0d | double.Parse(m_sTempsDessin) == 0d)
                    {
                        if (MessageBox.Show("Les temps de dessin ou de test sont vides\nVoulez - vous l'enregistrer?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                        {
                            return;
                        }
                    }
                }
                Cursor.Current = Cursors.WaitCursor;
                if (BackupPieces1(txtNoProjSoum.Text) == false)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        sMessage = "Une erreur est survenue lors de la copie de sauvegarde du projet en cours!";
                    }
                    else
                    {
                        sMessage = "Une erreur est survenue lors de la copie de sauvegarde de la soumission en cours!";
                    }
                    sMessage = sMessage + "\n\nVoulez-vous continuer ?";
                    Cursor.Current = Cursors.Default;
                    if (MessageBox.Show(sMessage, Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        return;
                    }
                    else
                    {
                        Cursor.Current = Cursors.WaitCursor;
                    }
                }
                EnregistrerProjSoum(txtNoProjSoum.Text);
                OuvrirProjSoum(false);
                AfficherControles(EnumMode.MODE_INACTIF);
                m_bEnregistrement = true;
                m_bEnregistrement = false;
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdEnregistrer_Click", ex);
            }
        }
        private void EnregistrerFACT(string sNoProjet)
        {
            var IdLoginEmploye = default(object);
            try
            {
                ADODB.Recordset rstModif;
                ADODB.Recordset rstEmploye;
                var sPrixTotal = default(string);
                var sProfit = default(string);
                var sCommission = default(string);
                string sNoFacture;
                var sTempsFab = default(string);
                var sTotalPiece = default(string);
                var sImprevue = default(string);
                var sTotalTemps = default(string);
                var sManuel = default(string);
                short X;
                short iIndexFacture;
                List<String> collFacture;
                bool bExiste;
                collFacture = new List<String>();
                UpdateSQL("DELETE FROM Projet_Modif WHERE IDProjet = '" + sNoProjet + "' AND Type = 'E' AND TypeModif = 'FACTURATION'");
                if (lvwSoumission.Items.Count > 0)
                {
                    rstModif = new Recordset();
                    rstEmploye = new Recordset();
                    var loopTo = (short)lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo; X++)
                    {
                        bExiste = false;
                        sNoFacture = lvwSoumission.Items[X].SubItems[I_COL_SOUM_FACTURATION].Text;
                        if (!string.IsNullOrEmpty(Strings.Trim(sNoFacture)))
                        {
                            var loopTo1 = (short)collFacture.Count;
                            for (iIndexFacture = 1; iIndexFacture <= loopTo1; iIndexFacture++)
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(collFacture[iIndexFacture], sNoFacture, false)))
                                {
                                    bExiste = true;
                                    break;
                                }
                            }
                            if (bExiste == false)
                            {
                                collFacture.Add(sNoFacture);
                                CalculerPrixFacturation(sNoFacture, ref sCommission, ref sPrixTotal, ref sProfit, ref sTempsFab, ref sTotalPiece, ref sImprevue, ref sTotalTemps, ref sManuel);
                                rstModif.Open("SELECT * FROM Projet_Modif WHERE [Date] = '" + Strings.Replace(sNoFacture, "F-", "") + "' AND TypeModif = 'FACTURATION'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                if (rstModif.EOF)
                                {
                                    rstModif.AddNew();
                                }
                                rstModif.Fields["IDProjet"].Value = txtNoProjSoum.Text;
                                rstEmploye.Open(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM Employés WHERE loginname = '", IdLoginEmploye), "'"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                                rstModif.Fields["NoEmployé"].Value = rstEmploye.Fields["NoEmploye"].Value;
                                rstEmploye.Close();
                                rstModif.Fields["Date"].Value = Strings.Replace(sNoFacture, "F-", "");
                                rstModif.Fields["Heure"].Value = " ";
                                rstModif.Fields["Type"].Value = "E";
                                rstModif.Fields["TypeModif"].Value = "FACTURATION";
                                rstModif.Fields["Valeur"].Value = sPrixTotal;
                                rstModif.Update();
                                rstModif.Close();
                            }
                        }
                    }
                    rstModif = default;
                    rstEmploye = default;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "EnregistrerFACT", ex);
            }
        }
        private bool BackupPieces1(string sNoProjSoum)
        {
            bool BackupPiecesRet = default;
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstProjSoumBackup;
                string sDateCopie;
                rstProjSoum = new Recordset();
                rstProjSoumBackup = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstProjSoum.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjSoumBackup.Open("SELECT * FROM Projet_Pieces_Tampon", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstProjSoum.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjSoumBackup.Open("SELECT * FROM Soumission_Pieces_Tampon", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                sDateCopie = ConvertDate(DateTime.Today) + " " + Conversions.ToString(DateAndTime.TimeOfDay);
                while (!rstProjSoum.EOF)
                {
                    rstProjSoumBackup.AddNew();
                    rstProjSoumBackup.Fields["DateCopie"].Value = sDateCopie;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        rstProjSoumBackup.Fields["IDProjet"].Value = rstProjSoum.Fields["IDProjet"].Value;
                    }
                    else
                    {
                        rstProjSoumBackup.Fields["IDSoumission"].Value = rstProjSoum.Fields["IDSoumission"].Value;
                    }
                    rstProjSoumBackup.Fields["Initiales"].Value = Conteneur.idInitiales.Text;
                    rstProjSoumBackup.Fields["IDSection"].Value = rstProjSoum.Fields["IDSection"].Value;
                    rstProjSoumBackup.Fields["NumItem"].Value = rstProjSoum.Fields["NumItem"].Value;
                    rstProjSoumBackup.Fields["Qté"].Value = rstProjSoum.Fields["Qté"].Value;
                    rstProjSoumBackup.Fields["Desc_FR"].Value = rstProjSoum.Fields["Desc_FR"].Value;
                    rstProjSoumBackup.Fields["Desc_EN"].Value = rstProjSoum.Fields["Desc_EN"].Value;
                    rstProjSoumBackup.Fields["Manufact"].Value = rstProjSoum.Fields["Manufact"].Value;
                    rstProjSoumBackup.Fields["Prix_list"].Value = rstProjSoum.Fields["Prix_list"].Value;
                    rstProjSoumBackup.Fields["Escompte"].Value = rstProjSoum.Fields["Escompte"].Value;
                    rstProjSoumBackup.Fields["Prix_net"].Value = rstProjSoum.Fields["Prix_net"].Value;
                    rstProjSoumBackup.Fields["IDFRS"].Value = rstProjSoum.Fields["IDFRS"].Value;
                    rstProjSoumBackup.Fields["Temps"].Value = rstProjSoum.Fields["Temps"].Value;
                    rstProjSoumBackup.Fields["Temps_total"].Value = rstProjSoum.Fields["Temps_total"].Value;
                    rstProjSoumBackup.Fields["Prix_total"].Value = rstProjSoum.Fields["Prix_total"].Value;
                    rstProjSoumBackup.Fields["Profit_Argent"].Value = rstProjSoum.Fields["Profit_Argent"].Value;
                    rstProjSoumBackup.Fields["sousSection"].Value = rstProjSoum.Fields["sousSection"].Value;
                    rstProjSoumBackup.Fields["OrdreSection"].Value = rstProjSoum.Fields["OrdreSection"].Value;
                    rstProjSoumBackup.Fields["NuméroLigne"].Value = rstProjSoum.Fields["NuméroLigne"].Value;
                    rstProjSoumBackup.Fields["PrixOrigine"].Value = rstProjSoum.Fields["PrixOrigine"].Value;
                    rstProjSoumBackup.Fields["Type"].Value = rstProjSoum.Fields["Type"].Value;
                    rstProjSoumBackup.Fields[".Visible"].Value = rstProjSoum.Fields[".Visible"].Value;
                    rstProjSoumBackup.Fields["Commandé"].Value = rstProjSoum.Fields["Commandé"].Value;
                    rstProjSoumBackup.Fields["Quoté"].Value = rstProjSoum.Fields["Quoté"].Value;
                    rstProjSoumBackup.Fields["Recu"].Value = rstProjSoum.Fields["Recu"].Value;
                    rstProjSoumBackup.Fields["Retour"].Value = rstProjSoum.Fields["Retour"].Value;
                    rstProjSoumBackup.Fields["CommandeAnnulée"].Value = rstProjSoum.Fields["CommandeAnnulée"].Value;
                    rstProjSoumBackup.Fields["ID"].Value = rstProjSoum.Fields["ID"].Value;
                    rstProjSoumBackup.Fields["PieceExtra"].Value = rstProjSoum.Fields["PieceExtra"].Value;
                    rstProjSoumBackup.Fields["PieceExtraChargeable"].Value = rstProjSoum.Fields["PieceExtraChargeable"].Value;
                    rstProjSoumBackup.Fields["PieceExtraNonChargeable"].Value = rstProjSoum.Fields["PieceExtraNonChargeable"].Value;
                    rstProjSoumBackup.Fields["MatérielInutile"].Value = rstProjSoum.Fields["MatérielInutile"].Value;
                    rstProjSoumBackup.Fields["Commentaire"].Value = rstProjSoum.Fields["Commentaire"].Value;
                    rstProjSoumBackup.Fields["Devise"].Value = rstProjSoum.Fields["Devise"].Value;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        rstProjSoumBackup.Fields["NoRetour"].Value = rstProjSoum.Fields["NoRetour"].Value;
                        rstProjSoumBackup.Fields["DateRéception"].Value = rstProjSoum.Fields["DateRéception"].Value;
                        rstProjSoumBackup.Fields["QuantitéRecue"].Value = rstProjSoum.Fields["QuantitéRecue"].Value;
                        rstProjSoumBackup.Fields["Facturation"].Value = rstProjSoum.Fields["Facturation"].Value;
                        rstProjSoumBackup.Fields["DateCommande"].Value = rstProjSoum.Fields["DateCommande"].Value;
                        rstProjSoumBackup.Fields["DateRequise"].Value = rstProjSoum.Fields["DateRequise"].Value;
                        rstProjSoumBackup.Fields["NomCommande"].Value = rstProjSoum.Fields["NomCommande"].Value;
                        rstProjSoumBackup.Fields["NoSéquentiel"].Value = rstProjSoum.Fields["NoSéquentiel"].Value;
                        rstProjSoumBackup.Fields["DateRetour"].Value = rstProjSoum.Fields["DateRetour"].Value;
                    }
                    rstProjSoumBackup.Fields["Provenance"].Value = rstProjSoum.Fields["Provenance"].Value;
                    rstProjSoumBackup.Update();
                    rstProjSoum.MoveNext();
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                rstProjSoumBackup.Close();
                rstProjSoumBackup = default;
                BackupPiecesRet = true;
                return BackupPiecesRet;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "BackupPieces", ex);
                return false;
            }
        }
        private void EnregistrerProjSoum(string sNoProjSoum)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstModif;
                ADODB.Recordset rstOuvert;
                ADODB.Recordset rstSection;
                ADODB.Recordset rstPunch;
                short X;
                ListViewItem itmPiece;
                string sTable;
                string sTableModif;
                string sTablePiece;
                string sChamps;
                string sSection;
                var sExtra = default(string);
                var bCalculExtra = default(bool);
                List<String> collExtra;
                short XExtra;
                bool bExiste;
                var bAjoutCommande = default(bool);
                double dblNbrePers;
                double dblJoursHebergement;
                double dblJoursRepas;
                double dblHebergement1;
                double dblHebergement2;
                double dblRepas;
                double dblTotalHebergement;
                rstProjSoum = new Recordset();
                rstPiece = new Recordset();
                rstEmploye = new Recordset();
                rstModif = new Recordset();
                rstOuvert = new Recordset();
                rstSection = new Recordset();
                collExtra = new List<String>();
                // chk: IdLoginEmploye.
                rstEmploye.Open(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT noEmploye FROM Employés WHERE loginname = '", IdLoginEmploye), "'"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                // Si c'est un projet
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sTable = "ProjetMec";
                    sTableModif = "Projet_Modif";
                    sTablePiece = "Projet_Pieces";
                    sChamps = "IDProjet";
                }
                else
                {
                    sTable = "SoumissionMec";
                    sTableModif = "Soumission_Modif";
                    sTablePiece = "Soumission_Pieces";
                    sChamps = "IDSoumission";
                }
                if (m_bModeAjout == true)
                {

                    rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (rstProjSoum.EOF)
                        {
                            bAjoutCommande = true;
                        }
                        else
                        {
                            bAjoutCommande = false;
                        }
                    }
                    else
                    {
                        bAjoutCommande = false;
                    }
                    rstProjSoum.AddNew();
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        rstProjSoum.Fields["LiaisonChargeable"].Value = m_sLiaison;
                    }
                    rstProjSoum.Fields["Creer"].Value = ConvertDate(DateTime.Today);
                    rstProjSoum.Fields["Creer_Par"].Value = rstEmploye.Fields["noEmploye"].Value;
                    rstProjSoum.Fields[sChamps].Value = sNoProjSoum;
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        rstProjSoum.Fields["IDSoumission"].Value = txtNoSoumission.Text;
                    }
                    rstOuvert.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstOuvert.EOF)
                    {
                        rstOuvert.AddNew();
                        rstOuvert.Fields["IDProjSoum"].Value = sNoProjSoum;
                        rstOuvert.Fields["NoClient"].Value = cmbClient.SelectedIndex;
                        rstOuvert.Fields["Description"].Value = txtProjet.Text;
                        rstOuvert.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                        rstOuvert.Fields["Ouvert"].Value = true;
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            rstOuvert.Fields["Type"].Value = "P";
                        }
                        else
                        {
                            rstOuvert.Fields["Type"].Value = "S";
                        }
                        rstOuvert.Update();
                    }
                    rstOuvert.Close();

                    rstOuvert = default;
                    m_bModeAjout = false;
                }
                else
                {
                    EnregistrerSuppression();
                    rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstModif.Open("SELECT * FROM " + sTableModif, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstModif.AddNew();
                    rstModif.Fields["Type"].Value = "E";
                    rstModif.Fields[sChamps].Value = sNoProjSoum;
                    rstModif.Fields["noEmployé"].Value = rstEmploye.Fields["noEmploye"].Value;
                    rstModif.Fields["Date"].Value = ConvertDate(DateTime.Today);
                    rstModif.Fields["Heure"].Value = DateAndTime.TimeOfDay;
                    rstModif.Fields["TypeModif"].Value = "MODIFICATION";
                    rstModif.Update();
                    rstModif.Close();

                    rstModif = default;
                    rstOuvert.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstOuvert.Fields["NoClient"].Value != cmbClient.SelectedIndex) ;
                    {
                        rstOuvert.Fields["NoClient"].Value = cmbClient.SelectedIndex;
                        rstPunch = new Recordset();
                        rstPunch.Open("SELECT * FROM Punch WHERE NoProjet = '" + sNoProjSoum + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstPunch.EOF)
                        {
                            if (MessageBox.Show("Le client a été modifié, voulez-vous changer les punch de ce projet ?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                while (!rstPunch.EOF)
                                {
                                    rstPunch.Fields["NoClient"].Value = cmbClient.SelectedIndex;
                                    rstPunch.Update();
                                    rstPunch.MoveNext();
                                }
                            }
                        }
                        rstPunch.Close();

                        rstPunch = default;
                    }
                    rstOuvert.Fields["Description"].Value = txtProjet.Text;
                    rstOuvert.Update();
                    rstOuvert.Close();

                    rstOuvert = default;
                    UpdateSQL("DELETE FROM " + sTablePiece + " WHERE " + sChamps + " = '" + sNoProjSoum + "' AND Type = 'E'");
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (double.Parse(Droite(sNoProjSoum, 2)) >= 60d & double.Parse(Droite(sNoProjSoum, 2)) <= 98d)
                        {
                            UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + Gauche(sNoProjSoum, 6) + "-" + rstProjSoum.Fields["LiaisonChargeable"].Value + "' AND Type = 'E' AND (PieceExtraChargeable = 1 OR PieceExtraNonChargeable = 1) AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                        }
                    }
                }
                rstProjSoum.Fields["IDClient"].Value = cmbClient.SelectedIndex;
                rstProjSoum.Fields["IDContact"].Value = cmbContact.SelectedIndex;
                rstProjSoum.Fields["description"].Value = txtProjet.Text;
                rstProjSoum.Fields["NbreManuel"].Value = txtNbreManuel.Text;
                rstProjSoum.Fields["transport"].Value = cmbTransport.Text;
                rstProjSoum.Fields["CSA"].Value = chkCSA.CheckState;
                rstProjSoum.Fields["CUL"].Value = chkCUL.CheckState;
                rstProjSoum.Fields["UL"].Value = chkUL.CheckState;
                rstProjSoum.Fields["CUR"].Value = chkCUR.CheckState;
                rstProjSoum.Fields["UR"].Value = chkUR.CheckState;
                rstProjSoum.Fields["CE"].Value = chkCE.CheckState;
                if (!string.IsNullOrEmpty(txtDelais.Text))
                {
                    rstProjSoum.Fields["Delais"].Value = txtDelais.Text;
                }
                else
                {
                    rstProjSoum.Fields["Delais"].Value = " ";
                }
                if (m_eType == EnumType.TYPE_SOUMISSION)
                {
                    rstProjSoum.Fields["TempsDessin"].Value = m_sTempsDessin;
                    rstProjSoum.Fields["TempsFabrication"].Value = m_sTempsFabrication;
                    rstProjSoum.Fields["TempsAssemblage"].Value = m_sTempsAssemblage;
                    rstProjSoum.Fields["TempsProgInterface"].Value = m_sTempsProgInterface;
                    rstProjSoum.Fields["TempsProgAutomate"].Value = m_sTempsProgAutomate;
                    rstProjSoum.Fields["TempsProgRobot"].Value = m_sTempsProgRobot;
                    rstProjSoum.Fields["TempsVision"].Value = m_sTempsVision;
                    rstProjSoum.Fields["TempsTest"].Value = m_sTempsTest;
                    rstProjSoum.Fields["TempsInstallation"].Value = m_sTempsInstallation;
                    rstProjSoum.Fields["TempsMiseService"].Value = m_sTempsMiseService;
                    rstProjSoum.Fields["TempsFormation"].Value = m_sTempsFormation;
                    rstProjSoum.Fields["TempsGestion"].Value = m_sTempsGestion;
                    rstProjSoum.Fields["TempsShipping"].Value = m_sTempsShipping;
                }
                rstProjSoum.Fields["NbrePersonne"].Value = m_sNbrePersonne;
                rstProjSoum.Fields["TempsHebergement"].Value = m_sTempsHebergement;
                rstProjSoum.Fields["TempsRepas"].Value = m_sTempsRepas;
                rstProjSoum.Fields["TempsTransport"].Value = m_sTempsTransport;
                rstProjSoum.Fields["TempsUniteMobile"].Value = m_sTempsUniteMobile;
                rstProjSoum.Fields["PrixEmballage"].Value = m_sPrixEmballage;
                rstProjSoum.Fields["TauxHebergement1"].Value = m_sTauxHebergement1;
                rstProjSoum.Fields["TauxHebergement2"].Value = m_sTauxHebergement2;
                rstProjSoum.Fields["TauxRepas"].Value = m_sTauxRepas;
                rstProjSoum.Fields["TauxTransport"].Value = m_sTauxTransport;
                rstProjSoum.Fields["TauxUniteMobile"].Value = m_sTauxUniteMobile;
                rstProjSoum.Fields["TauxDessin"].Value = m_sTauxDessin;
                rstProjSoum.Fields["TauxFabrication"].Value = m_sTauxFabrication;
                rstProjSoum.Fields["TauxAssemblage"].Value = m_sTauxAssemblage;
                rstProjSoum.Fields["TauxProgInterface"].Value = m_sTauxProgInterface;
                rstProjSoum.Fields["TauxProgAutomate"].Value = m_sTauxProgAutomate;
                rstProjSoum.Fields["TauxProgRobot"].Value = m_sTauxProgRobot;
                rstProjSoum.Fields["TauxVision"].Value = m_sTauxVision;
                rstProjSoum.Fields["TauxTest"].Value = m_sTauxTest;
                rstProjSoum.Fields["TauxInstallation"].Value = m_sTauxInstallation;
                rstProjSoum.Fields["TauxMiseService"].Value = m_sTauxMiseService;
                rstProjSoum.Fields["TauxFormation"].Value = m_sTauxFormation;
                rstProjSoum.Fields["TauxGestion"].Value = m_sTauxGestion;
                rstProjSoum.Fields["TauxShipping"].Value = m_sTauxShipping;
                rstProjSoum.Fields["imprevue"].Value = m_sImprevue;
                rstProjSoum.Fields["commission"].Value = m_sCommission;
                rstProjSoum.Fields["Profit"].Value = m_sProfit;
                rstProjSoum.Fields["SansTemps"].Value = m_bSansTemps;
                rstProjSoum.Fields["CheminPhotos"].Value = txtCheminPhotos.Text;
                rstProjSoum.Fields["MontantForfait"].Value = txtForfait.Text;
                rstProjSoum.Fields["InitialeForfait"].Value = Strings.Trim(Strings.Replace(lblForfaitInitiale.Text, "Par :", ""));
                if (!(rstProjSoum.Fields["NbrePersonne"].Value is DBNull))
                {
                    dblNbrePers = (double)rstProjSoum.Fields["NbrePersonne"].Value;
                }
                else
                {
                    dblNbrePers = 0d;
                }
                if (!(rstProjSoum.Fields["TempsHebergement"].Value is DBNull))
                {
                    dblJoursHebergement = (double)rstProjSoum.Fields["TempsHebergement"].Value;
                }
                else
                {
                    dblJoursHebergement = 0d;
                }
                if (!(rstProjSoum.Fields["TempsRepas"].Value is DBNull))
                {
                    dblJoursRepas = (double)rstProjSoum.Fields["TempsRepas"].Value;
                }
                else
                {
                    dblJoursRepas = 0d;
                }
                if (!(rstProjSoum.Fields["TauxHebergement1"].Value is DBNull))
                {
                    dblHebergement1 = (double)rstProjSoum.Fields["TauxHebergement1"].Value;
                }
                else
                {
                    dblHebergement1 = 0d;
                }
                if (!(rstProjSoum.Fields["TauxHebergement2"].Value is DBNull))
                {
                    dblHebergement2 = (double)rstProjSoum.Fields["TauxHebergement2"].Value;
                }
                else
                {
                    dblHebergement2 = 0d;
                }
                if (!(rstProjSoum.Fields["TauxRepas"].Value is DBNull))
                {
                    dblRepas = (double)rstProjSoum.Fields["TauxRepas"].Value;
                }
                else
                {
                    dblRepas = 0d;
                }
                rstProjSoum.Fields["TotalRepas"].Value = dblNbrePers * dblJoursRepas * dblRepas;
                dblTotalHebergement = 0d;
                while (dblNbrePers > 0d)
                {
                    if (dblNbrePers >= 2d)
                    {
                        dblTotalHebergement += dblJoursHebergement * dblHebergement2;
                        dblNbrePers = dblNbrePers - 2d;
                    }
                    else
                    {
                        dblTotalHebergement += dblJoursHebergement * dblHebergement1;
                        dblNbrePers = dblNbrePers - 1d;
                    }
                }
                rstProjSoum.Fields["TotalHebergement"].Value = dblTotalHebergement;
                if (bAjoutCommande == true)
                {
                    rstProjSoum.Fields["ProchaineCommande"].Value = 1;
                }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstProjSoum.Fields["PrixRéception"].Value = txtPrixReception.Text;
                }
                if (IsNumeric(txtPrixManuel.Text))
                {
                    rstProjSoum.Fields["Total_Manuel"].Value = txtPrixManuel.Text;
                }
                else { rstProjSoum.Fields["Total_Manuel"].Value.Text = "0"; }
                rstProjSoum.Fields["total_Commission"].Value = txtCommission.Text;
                rstProjSoum.Fields["Total_Profit"].Value = txtProfit.Text;
                rstProjSoum.Fields["PrixTotal"].Value = txtPrixTotal.Text;
                rstProjSoum.Fields["Total_piece"].Value = txtTotalPieces.Text;
                rstProjSoum.Fields["total_imprevue"].Value = txtImprevus.Text;
                rstProjSoum.Fields["PrixTotal"].Value = txtPrixTotal.Text;
                rstPiece.CursorLocation = CursorLocationEnum.adUseServer;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstPiece.Open("SELECT * FROM Projet_Pieces", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstPiece.Open("SELECT * FROM Soumission_Pieces", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(g_bModificationFacturation, true, false)))
                    {
                        EnregistrerFACT(sNoProjSoum);
                    }
                }
                var loopTo = (short)lvwSoumission.Items.Count;
                for (X = 1; X <= loopTo; X++)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[X].Tag, string.Empty, false)))
                    {
                        if (!string.IsNullOrEmpty(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text))
                        {
                            itmPiece = lvwSoumission.Items[X];
                            rstPiece.AddNew();
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                rstPiece.Fields["IDProjet"].Value = sNoProjSoum;
                            }
                            else
                            {
                                rstPiece.Fields["IDSoumission"].Value = sNoProjSoum;
                            }
                            rstPiece.Fields["Type"].Value = "E";
                            if (itmPiece.Checked == true)
                            {
                                rstPiece.Fields[".Visible"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields[".Visible"].Value = false;
                            }
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                rstPiece.Fields["Facturation"].Value = itmPiece.SubItems[I_COL_SOUM_FACTURATION].Text;
                                if (string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_FACTURATION].Text))
                                {
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_FACTURATION)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_FACTURATION].Text = " ";
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, " "));
                                    }
                                }
                                if (string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_DATE_COMMANDE].Text))
                                {
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_DATE_COMMANDE)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = " ";
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, " "));
                                    }
                                }
                                rstPiece.Fields["NoRetour"].Value = itmPiece.SubItems[I_COL_SOUM_DATE_COMMANDE].Tag;
                                rstPiece.Fields["DateRéception"].Value = itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Tag;
                            }
                            rstPiece.Fields["IDSection"].Value = itmPiece.Tag;
                            rstPiece.Fields["NumItem"].Value = Strings.Trim(itmPiece.SubItems[I_COL_SOUM_PIECE].Text);
                            rstPiece.Fields["Qté"].Value = Strings.Replace(itmPiece.Text, "*", string.Empty);
                            if (itmPiece.SubItems[I_COL_SOUM_PIECE].Text == "Texte" | itmPiece.SubItems[I_COL_SOUM_PIECE].Text == "Text")
                            {
                                rstPiece.Fields["DESC_EN"].Value = "";
                                rstPiece.Fields["DESC_FR"].Value = Strings.Trim(itmPiece.SubItems[I_COL_SOUM_DESCR].Text);
                            }
                            else if (m_eLangage == EnumLangage.ANGLAIS)
                            {
                                rstPiece.Fields["DESC_EN"].Value = Strings.Trim(itmPiece.SubItems[I_COL_SOUM_DESCR].Text);
                                rstPiece.Fields["DESC_FR"].Value = Strings.Trim(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_DESCR].Tag));
                            }
                            else
                            {
                                rstPiece.Fields["DESC_FR"].Value = Strings.Trim(itmPiece.SubItems[I_COL_SOUM_DESCR].Text);
                                rstPiece.Fields["DESC_EN"].Value = Strings.Trim(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_DESCR].Tag));
                            }
                            rstPiece.Fields["Manufact"].Value = Strings.Trim(itmPiece.SubItems[I_COL_SOUM_MANUFACT].Text);
                            rstPiece.Fields["Prix_list"].Value = Conversion_Renamed(itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text, EnumConvert.MODE_PAS_FORMAT, 4);
                            if (!string.IsNullOrEmpty(Strings.Trim(itmPiece.SubItems[I_COL_SOUM_ESCOMPTE].Text)))
                            {
                                rstPiece.Fields["Escompte"].Value = Conversion_Renamed((double.Parse(Strings.Replace(itmPiece.SubItems[I_COL_SOUM_ESCOMPTE].Text, "%", "")) / 100d).ToString(), EnumConvert.MODE_PAS_FORMAT);
                            }
                            else
                            {
                                rstPiece.Fields["Escompte"].Value = "";
                            }
                            rstPiece.Fields["Prix_net"].Value = Conversion_Renamed(itmPiece.SubItems[I_COL_SOUM_PRIX_NET].Text, EnumConvert.MODE_PAS_FORMAT, 4);
                            rstPiece.Fields["OrdreSection"].Value = itmPiece.SubItems[I_COL_SOUM_MANUFACT].Tag;
                            rstPiece.Fields["NuméroLigne"].Value = X;
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_ORANGE, false)))
                            {
                                rstPiece.Fields["Commandé"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields["Commandé"].Value = false;
                            }
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_GRIS, false)))
                            {
                                rstPiece.Fields["Recu"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields["Recu"].Value = false;
                            }
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_ROUGE, false)))
                            {
                                rstPiece.Fields["Retour"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields["Retour"].Value = false;
                            }
                            if (Conversions.ToBoolean(Operators.AndObject(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_VERT_FORET, false), itmPiece.SubItems[I_COL_SOUM_PIECE].Font.Bold == true)))
                            {
                                rstPiece.Fields["CommandeAnnulée"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields["CommandeAnnulée"].Value = false;
                            }
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_BRUN, false)))
                            {
                                rstPiece.Fields["MatérielInutile"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields["MatérielInutile"].Value = false;
                            }
                            if (!string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_DISTRIB].Text))
                            {
                                rstPiece.Fields["IDFRS"].Value = itmPiece.SubItems[I_COL_SOUM_DISTRIB].Tag;
                            }
                            rstPiece.Fields["Temps"].Value = Strings.Trim(itmPiece.SubItems[I_COL_SOUM_TEMPS].Text);
                            rstPiece.Fields["Temps_Total"].Value = itmPiece.SubItems[I_COL_SOUM_MONTAGE].Text;
                            rstPiece.Fields["Prix_Total"].Value = Conversion_Renamed(itmPiece.SubItems[I_COL_SOUM_TOTAL].Text, EnumConvert.MODE_PAS_FORMAT);
                            rstPiece.Fields["Profit_argent"].Value = Conversion_Renamed(itmPiece.SubItems[I_COL_SOUM_PROFIT].Text, EnumConvert.MODE_PAS_FORMAT);
                            if (Strings.Len(itmPiece.SubItems[I_COL_SOUM_PIECE].Tag) <= 50)
                            {
                                rstPiece.Fields["SousSection"].Value = itmPiece.SubItems[I_COL_SOUM_PIECE].Tag;
                            }
                            else
                            {
                                rstPiece.Fields["SousSection"].Value = Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PIECE].Tag), 50);
                            }
                            if (!string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Text))
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Tag, string.Empty, false)))
                                {
                                    rstPiece.Fields["PrixOrigine"].Value = Strings.Replace(Math.Round(double.Parse(Strings.Replace(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PRIX_LIST].Tag), ".", ",")), 4).ToString(), ".", ",");
                                }
                                else
                                {
                                    rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                                }
                            }
                            else
                            {
                                rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                            }
                            if (!string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_TOTAL].Text))
                            {
                                rstPiece.Fields["Devise"].Value = itmPiece.SubItems[I_COL_SOUM_TOTAL].Tag;
                            }
                            else
                            {
                                rstPiece.Fields["Devise"].Value = "";
                            }
                            if (Strings.InStr(1, itmPiece.Text, "*") > 0)
                            {
                                rstPiece.Fields["Quoté"].Value = true;
                            }
                            else
                            {
                                rstPiece.Fields["Quoté"].Value = false;
                            }
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                if (Conversions.ToBoolean(Strings.Trim(Conversions.ToString(!string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_ID].Text)))))
                                {
                                    rstPiece.Fields["ID"].Value = itmPiece.SubItems[I_COL_SOUM_ID].Text;
                                }
                                rstPiece.Fields["DateCommande"].Value = itmPiece.SubItems[I_COL_SOUM_DATE_COMMANDE].Text;
                                rstPiece.Fields["DateRequise"].Value = itmPiece.SubItems[I_COL_SOUM_DATE_REQUISE].Text;
                                if (string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_DATE_REQUISE].Text))
                                {
                                    if (itmPiece.SubItems.Count > I_COL_SOUM_DATE_REQUISE)
                                    {
                                        itmPiece.SubItems[I_COL_SOUM_DATE_REQUISE].Text = " ";
                                    }
                                    else
                                    {
                                        itmPiece.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, " "));
                                    }
                                }
                                rstPiece.Fields["DateRetour"].Value = itmPiece.SubItems[I_COL_SOUM_DATE_REQUISE].Tag;
                                rstPiece.Fields["NomCommande"].Value = itmPiece.SubItems[I_COL_SOUM_NOM_COMMANDE].Text;
                                rstPiece.Fields["NoSéquentiel"].Value = itmPiece.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text;
                            }
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_ROSE, false)))
                                {
                                    rstPiece.Fields["PieceExtraNonChargeable"].Value = true;
                                    rstPiece.Fields["PieceExtraChargeable"].Value = false;
                                }
                                else if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmPiece.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_BLEU, false)))
                                {
                                    rstPiece.Fields["PieceExtraChargeable"].Value = true;
                                    rstPiece.Fields["PieceExtraNonChargeable"].Value = false;
                                }
                                else if (Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 6) == "RETOUR" | Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 10) == "ANNULATION")
                                {
                                    sExtra = Droite(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 2);
                                    if (Operators.CompareString(sExtra, "80", false) >= 0 & Operators.CompareString(sExtra, "98", false) <= 0)
                                    {
                                        rstPiece.Fields["PieceExtraNonChargeable"].Value = true;
                                        rstPiece.Fields["PieceExtraChargeable"].Value = false;
                                    }
                                    else
                                    {
                                        rstPiece.Fields["PieceExtraChargeable"].Value = true;
                                        rstPiece.Fields["PieceExtraNonChargeable"].Value = false;
                                    }
                                }
                                if (!string.IsNullOrEmpty(itmPiece.SubItems[I_COL_SOUM_PROVENANCE].Text))
                                {
                                    rstPiece.Fields["Provenance"].Value = Droite(itmPiece.SubItems[I_COL_SOUM_PROVENANCE].Text, 2);
                                }
                                else if (Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 6) == "RETOUR" | Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 10) == "ANNULATION")
                                {
                                    rstPiece.Fields["Provenance"].Value = sExtra;
                                }
                            }
                            rstPiece.Fields["Commentaire"].Value = itmPiece.SubItems[I_COL_SOUM_COMMENTAIRE].Text;
                            rstPiece.Update();
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                if (double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 98d & double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 80d)
                                {
                                    AjouterPiecesExtraDansJob(itmPiece, rstProjSoum.Fields["LiaisonChargeable"].Value);
                                }
                                else if (double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 79d & double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 60d)
                                {
                                    AjouterPiecesExtraChargeableDansJob(itmPiece, rstProjSoum.Fields["LiaisonChargeable"].Value);
                                }
                                else if (Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 6) == "RETOUR")
                                {
                                    AjouterInutileDansExtra(itmPiece, sExtra);
                                    bCalculExtra = true;
                                    bExiste = false;
                                    var loopTo1 = (short)collExtra.Count;
                                    for (XExtra = 1; XExtra <= loopTo1; XExtra++)
                                    {
                                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(collExtra[XExtra], Droite(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 2), false))) { bExiste = true; break; }
                                    }
                                    if (bExiste == false)
                                    {
                                        collExtra.Add(Droite(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 2));
                                    }
                                }
                                else if (Gauche(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 10) == "ANNULATION")
                                {
                                    AjouterAnnulationDansExtra(itmPiece, sExtra);
                                    bCalculExtra = true;
                                    bExiste = false;
                                    var loopTo2 = (short)collExtra.Count;
                                    for (XExtra = 1; XExtra <= loopTo2; XExtra++)
                                    {
                                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(collExtra[XExtra], Droite(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 2), false))) { bExiste = true; break; }
                                    }
                                    if (bExiste == false)
                                    {
                                        collExtra.Add(Droite(Conversions.ToString(itmPiece.SubItems[I_COL_SOUM_PROFIT].Tag), 2));
                                    }
                                }
                            }
                        }
                    }
                }
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    if (double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 98d & double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 60d)
                    {
                        CalculerTotalRecordset(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + rstProjSoum.Fields["LiaisonChargeable"].Value);
                    }
                }
                if (bCalculExtra == true)
                {
                    var loopTo3 = (short)collExtra.Count;
                    for (XExtra = 1; XExtra <= loopTo3; XExtra++)
                        CalculerTotalRecordset(Conversions.ToString(Operators.ConcatenateObject(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2), collExtra[XExtra])));
                }
                rstProjSoum.Fields["total_temps"].Value = txtTotalTemps.Text;
                rstProjSoum.Update();
                rstProjSoum.Close();
                rstProjSoum = default;
                rstPiece.Close();
                rstPiece = default;
                if (m_eType == EnumType.TYPE_SOUMISSION)
                {
                    AjouterSoumissionAuCumulatif();
                }
                else
                {
                    AjouterProjetAuCumulatif();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "EnregistrerProjSoum", ex, sNoProjSoum);
            }
        }
        private void AjouterPiecesExtraChargeableDansJob(ListViewItem itmSource, string sLiaison)
        {
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstSection;
                short X;
                string sSection;
                var bSkip = default(bool);
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF)
                {

                    rstPiece = new Recordset();

                    rstPiece.Open(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison + "' AND IDSection = ", itmSource.Tag), " AND SousSection = '"), Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PIECE].Tag), "'", "''")), "' ORDER BY NuméroLigne"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!rstPiece.EOF)
                    {
                        rstPiece.MoveLast();
                        X = rstPiece.Fields["NuméroLigne"].Value + 1;
                    }
                    else
                    {
                        X = 1;
                    }
                    rstPiece.AddNew();
                    rstPiece.Fields["IDProjet"].Value = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison;
                    rstPiece.Fields["Type"].Value = "E";
                    if (itmSource.Checked == true)
                    {
                        rstPiece.Fields[".Visible"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields[".Visible"].Value = false;
                    }

                    rstPiece.Fields["Facturation"].Value = itmSource.SubItems[I_COL_SOUM_FACTURATION].Text;

                    rstPiece.Fields["IDSection"].Value = itmSource.Tag;

                    rstPiece.Fields["NumItem"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_PIECE].Text);
                    rstPiece.Fields["Qté"].Value = Strings.Replace(itmSource.Text, "*", string.Empty);

                    rstPiece.Fields["Desc_FR"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_DESCR].Text);

                    rstPiece.Fields["Desc_EN"].Value = Strings.Trim(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_DESCR].Tag));

                    rstPiece.Fields["Manufact"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_MANUFACT].Text);

                    rstPiece.Fields["Prix_list"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text, EnumConvert.MODE_PAS_FORMAT, 4);

                    rstPiece.Fields["Escompte"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_ESCOMPTE].Text, EnumConvert.MODE_PAS_FORMAT);

                    rstPiece.Fields["Prix_net"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_NET].Text, EnumConvert.MODE_PAS_FORMAT, 4);


                    rstPiece.Fields["OrdreSection"].Value = itmSource.SubItems[I_COL_SOUM_MANUFACT].Tag;
                    rstPiece.Fields["NuméroLigne"].Value = X;

                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_DISTRIB].Text))
                    {


                        rstPiece.Fields["IDFRS"].Value = itmSource.SubItems[I_COL_SOUM_DISTRIB].Tag;
                    }

                    rstPiece.Fields["Temps"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_TEMPS].Text);

                    rstPiece.Fields["Temps_Total"].Value = itmSource.SubItems[I_COL_SOUM_MONTAGE].Text;

                    rstPiece.Fields["Prix_Total"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_TOTAL].Text, EnumConvert.MODE_PAS_FORMAT);

                    rstPiece.Fields["Profit_argent"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PROFIT].Text, EnumConvert.MODE_PAS_FORMAT);


                    rstPiece.Fields["SousSection"].Value = itmSource.SubItems[I_COL_SOUM_PIECE].Tag;

                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text))
                    {

                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag, string.Empty, false)))
                        {

                            rstPiece.Fields["PrixOrigine"].Value = Strings.Replace(Math.Round(double.Parse(Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag), ".", ",")), 4).ToString(), ".", ",");
                        }
                        else
                        {
                            rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                        }
                    }
                    else
                    {
                        rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                    }
                    if (Strings.InStr(1, itmSource.Text, "*") > 0)
                    {
                        rstPiece.Fields["Quoté"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields["Quoté"].Value = false;
                    }

                    if (Conversions.ToBoolean(Strings.Trim(Conversions.ToString(!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_ID].Text)))))
                    {

                        rstPiece.Fields["ID"].Value = itmSource.SubItems[I_COL_SOUM_ID].Text;
                    }
                    rstPiece.Fields["PieceExtraChargeable"].Value = true;
                    rstPiece.Fields["Provenance"].Value = Droite(txtNoProjSoum.Text, 2);
                    rstPiece.Update();
                    rstPiece.Close();
                    rstPiece.CursorLocation = CursorLocationEnum.adUseServer;
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison + "' AND NuméroLigne >= " + X + " ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);

                    while (!rstPiece.EOF)
                    {

                        if (rstPiece.Fields["PieceExtraChargeable"].Value == true & rstPiece.Fields["Qté"].Value == itmSource.Text & rstPiece.Fields["NumItem"].Value == itmSource.SubItems[I_COL_SOUM_PIECE].Text & bSkip == false)
                        {
                            bSkip = true;
                        }
                        else
                        {
                            rstPiece.Fields["NuméroLigne"].Value = rstPiece.Fields["NuméroLigne"].Value + 1;
                            rstPiece.Update();
                        }
                        rstPiece.MoveNext();
                    }
                    rstPiece.Close();
                    rstPiece = default;
                    CalculerTempsFabricationRecordset(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison);
                }
                rstProjet.Close();
                rstProjet = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterPiecesExtraDansJob", ex);
            }
        }
        private void AjouterPiecesExtraDansJob(ListViewItem itmSource, string sLiaison)
        {
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstSection;
                short X;
                string sSection;
                var bSkip = default(bool);
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                // Si le projet existe
                if (!rstProjet.EOF)
                {

                    rstPiece = new Recordset();

                    rstPiece.Open(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison + "' AND IDSection = ", itmSource.Tag), " AND SousSection = '"), Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PIECE].Tag), "'", "''")), "' ORDER BY NuméroLigne"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!rstPiece.EOF)
                    {
                        rstPiece.MoveLast();
                        X = rstPiece.Fields["NuméroLigne"].Value + 1;
                    }
                    else
                    {
                        X = 1;
                    }
                    rstPiece.AddNew();
                    rstPiece.Fields["IDProjet"].Value = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison;
                    rstPiece.Fields["Type"].Value = "E";
                    if (itmSource.Checked == true)
                    {
                        rstPiece.Fields[".Visible"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields[".Visible"].Value = false;
                    }

                    rstPiece.Fields["Facturation"].Value = itmSource.SubItems[I_COL_SOUM_FACTURATION].Text;

                    rstPiece.Fields["IDSection"].Value = itmSource.Tag;

                    rstPiece.Fields["NumItem"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_PIECE].Text);
                    rstPiece.Fields["Qté"].Value = Strings.Replace(itmSource.Text, "*", string.Empty);

                    rstPiece.Fields["Desc_FR"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_DESCR].Text);

                    rstPiece.Fields["Desc_EN"].Value = Strings.Trim(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_DESCR].Tag));

                    rstPiece.Fields["Manufact"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_MANUFACT].Text);

                    rstPiece.Fields["Prix_list"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text, EnumConvert.MODE_PAS_FORMAT, 4);

                    rstPiece.Fields["Escompte"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_ESCOMPTE].Text, EnumConvert.MODE_PAS_FORMAT);

                    rstPiece.Fields["Prix_net"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_NET].Text, EnumConvert.MODE_PAS_FORMAT, 4);


                    rstPiece.Fields["OrdreSection"].Value = itmSource.SubItems[I_COL_SOUM_MANUFACT].Tag;
                    rstPiece.Fields["NuméroLigne"].Value = X;

                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_DISTRIB].Text))
                    {


                        rstPiece.Fields["IDFRS"].Value = itmSource.SubItems[I_COL_SOUM_DISTRIB].Tag;
                    }

                    rstPiece.Fields["Temps"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_TEMPS].Text);

                    rstPiece.Fields["Temps_Total"].Value = itmSource.SubItems[I_COL_SOUM_MONTAGE].Text;

                    rstPiece.Fields["Prix_Total"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_TOTAL].Text, EnumConvert.MODE_PAS_FORMAT);

                    rstPiece.Fields["Profit_argent"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PROFIT].Text, EnumConvert.MODE_PAS_FORMAT);


                    rstPiece.Fields["SousSection"].Value = itmSource.SubItems[I_COL_SOUM_PIECE].Tag;

                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text))
                    {

                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag, string.Empty, false)))
                        {

                            rstPiece.Fields["PrixOrigine"].Value = Strings.Replace(Math.Round(double.Parse(Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag), ".", ",")), 2).ToString(), ".", ",");
                        }
                        else
                        {
                            rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                        }
                    }
                    else
                    {
                        rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                    }
                    if (Strings.InStr(1, itmSource.Text, "*") > 0)
                    {
                        rstPiece.Fields["Quoté"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields["Quoté"].Value = false;
                    }
                    if (Conversions.ToBoolean(Strings.Trim(Conversions.ToString(!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_ID].Text)))))
                    {
                        rstPiece.Fields["ID"].Value = itmSource.SubItems[I_COL_SOUM_ID].Text;
                    }
                    rstPiece.Fields["PieceExtraNonChargeable"].Value = true;
                    rstPiece.Fields["Provenance"].Value = Droite(txtNoProjSoum.Text, 2);
                    rstPiece.Update();
                    rstPiece.Close();
                    rstPiece.CursorLocation = CursorLocationEnum.adUseServer;
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison + "' AND NuméroLigne >= " + X + " ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    while (!rstPiece.EOF)
                    {

                        if (rstPiece.Fields["PieceExtraNonChargeable"].Value == true & rstPiece.Fields["Qté"].Value == itmSource.Text & rstPiece.Fields["NumItem"].Value == itmSource.SubItems[I_COL_SOUM_PIECE].Text & bSkip == false)
                        {
                            bSkip = true;
                        }
                        else
                        {
                            rstPiece.Fields["NuméroLigne"].Value = rstPiece.Fields["NuméroLigne"].Value + 1;
                            rstPiece.Update();
                        }
                        rstPiece.MoveNext();
                    }
                    rstPiece.Close();
                    rstPiece = default;
                    CalculerTempsFabricationRecordset(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sLiaison);
                }
                rstProjet.Close();
                rstProjet = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterPiecesExtraDansJob", ex);
            }
        }
        private void AjouterInutileDansExtra(ListViewItem itmSource, string sExtra)
        {
            var COLOR_BRUN = default(object);
            var COLOR_NOIR = default(object);
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstSection;
                short X;
                string sSection;
                var bSkip = default(bool);
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF)
                {
                    rstPiece = new Recordset();
                    rstPiece.Open(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "' AND IDSection = ", itmSource.Tag), " AND SousSection = '"), Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PIECE].Tag), "'", "''")), "' ORDER BY NuméroLigne"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!rstPiece.EOF)
                    {
                        rstPiece.MoveLast();
                        X = rstPiece.Fields["NuméroLigne"].Value + 1;
                    }
                    else
                    {
                        X = 1;
                    }
                    rstPiece.AddNew();
                    rstPiece.Fields["IDProjet"].Value = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra;
                    rstPiece.Fields["Type"].Value = "E";
                    if (itmSource.Checked == true)
                    {
                        rstPiece.Fields[".Visible"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields[".Visible"].Value = false;
                    }
                    rstPiece.Fields["IDSection"].Value = itmSource.Tag;
                    rstPiece.Fields["NumItem"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_PIECE].Text);
                    rstPiece.Fields["Qté"].Value = Strings.Replace(itmSource.Text, "*", string.Empty);
                    if (m_eLangage == EnumLangage.ANGLAIS)
                    {
                        rstPiece.Fields["DESC_EN"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_DESCR].Text);
                        rstPiece.Fields["DESC_FR"].Value = Strings.Trim(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_DESCR].Tag));
                    }
                    else
                    {
                        rstPiece.Fields["DESC_FR"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_DESCR].Text);
                        rstPiece.Fields["DESC_EN"].Value = Strings.Trim(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_DESCR].Tag));
                    }
                    rstPiece.Fields["Manufact"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_MANUFACT].Text);
                    rstPiece.Fields["Prix_list"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text, EnumConvert.MODE_PAS_FORMAT, 4);
                    rstPiece.Fields["Escompte"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_ESCOMPTE].Text, EnumConvert.MODE_PAS_FORMAT);
                    rstPiece.Fields["Prix_net"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_NET].Text, EnumConvert.MODE_PAS_FORMAT, 4);
                    rstPiece.Fields["OrdreSection"].Value = itmSource.SubItems[I_COL_SOUM_MANUFACT].Tag;
                    rstPiece.Fields["NuméroLigne"].Value = X;
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmSource.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_NOIR, false)))
                    {
                        rstPiece.Fields["MatérielInutile"].Value = false;
                    }
                    else
                    {
                        rstPiece.Fields["MatérielInutile"].Value = true;
                    }
                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_DISTRIB].Text))
                    {
                        rstPiece.Fields["IDFRS"].Value = itmSource.SubItems[I_COL_SOUM_DISTRIB].Tag;
                    }
                    rstPiece.Fields["Temps"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_TEMPS].Text);
                    rstPiece.Fields["Temps_Total"].Value = itmSource.SubItems[I_COL_SOUM_MONTAGE].Text;
                    rstPiece.Fields["Prix_Total"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_TOTAL].Text, EnumConvert.MODE_PAS_FORMAT);
                    rstPiece.Fields["Profit_argent"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PROFIT].Text, EnumConvert.MODE_PAS_FORMAT);
                    rstPiece.Fields["SousSection"].Value = itmSource.SubItems[I_COL_SOUM_PIECE].Tag;
                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text))
                    {

                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag, string.Empty, false)))
                        {

                            rstPiece.Fields["PrixOrigine"].Value = Strings.Replace(Math.Round(double.Parse(Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag), ".", ",")), 4).ToString(), ".", ",");
                        }
                        else
                        {
                            rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                        }
                    }
                    else
                    {
                        rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                    }
                    if (Strings.InStr(1, itmSource.Text, "*") > 0)
                    {
                        rstPiece.Fields["Quoté"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields["Quoté"].Value = false;
                    }
                    rstPiece.Fields["DateRetour"].Value = itmSource.SubItems[I_COL_SOUM_DATE_REQUISE].Tag;
                    rstPiece.Fields["Commentaire"].Value = itmSource.SubItems[I_COL_SOUM_COMMENTAIRE].Text;
                    rstPiece.Update();
                    rstPiece.Close();
                    rstPiece.CursorLocation = CursorLocationEnum.adUseServer;
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "' AND NuméroLigne >= " + X + " ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);

                    while (!rstPiece.EOF)
                    {
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(itmSource.SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_BRUN, false)))
                        {
                            if (rstPiece.Fields["MatérielInutile"].Value == true & rstPiece.Fields["Qté"].Value == itmSource.Text & rstPiece.Fields["NumItem"].Value == itmSource.SubItems[I_COL_SOUM_PIECE].Text & bSkip == false)
                            {
                                bSkip = true;
                            }
                            else
                            {
                                rstPiece.Fields["NuméroLigne"].Value = rstPiece.Fields["NuméroLigne"].Value + 1;
                                rstPiece.Update();
                            }
                        }
                        else if (rstPiece.Fields["MatérielInutile"].Value == false & rstPiece.Fields["Qté"].Value == itmSource.Text & rstPiece.Fields["NumItem"].Value == itmSource.SubItems[I_COL_SOUM_PIECE].Text & bSkip == false)
                        {
                            bSkip = true;
                        }
                        else
                        {
                            rstPiece.Fields["NuméroLigne"].Value = rstPiece.Fields["NuméroLigne"].Value + 1;
                            rstPiece.Update();
                        }
                        rstPiece.MoveNext();
                    }
                    rstPiece.Close();
                    rstPiece = default;
                    CalculerTempsFabricationRecordset(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra);
                }
                rstProjet.Close();
                rstProjet = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterInutileDansExtra", ex);
            }
        }
        private void AjouterAnnulationDansExtra(ListViewItem itmSource, string sExtra)
        {
            try
            {
                ADODB.Recordset rstPiece;
                ADODB.Recordset rstProjet;
                ADODB.Recordset rstSection;
                short X;
                string sSection;
                var bSkip = default(bool);
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF)
                {
                    rstPiece = new Recordset();
                    rstPiece.Open(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "' AND IDSection = ", itmSource.Tag), " AND SousSection = '"), Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PIECE].Tag), "'", "''")), "' ORDER BY NuméroLigne"), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (!rstPiece.EOF)
                    {
                        rstPiece.MoveLast();
                        X = rstPiece.Fields["NuméroLigne"].Value + 1;
                    }
                    else
                    {
                        X = 1;
                    }
                    rstPiece.AddNew();
                    rstPiece.Fields["IDProjet"].Value = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra;
                    rstPiece.Fields["Type"].Value = "E";
                    if (itmSource.Checked == true)
                    {
                        rstPiece.Fields[".Visible"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields[".Visible"].Value = false;
                    }

                    rstPiece.Fields["IDSection"].Value = itmSource.Tag;

                    rstPiece.Fields["NumItem"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_PIECE].Text);
                    rstPiece.Fields["Qté"].Value = Strings.Replace(itmSource.Text, "*", string.Empty);
                    if (m_eLangage == EnumLangage.ANGLAIS)
                    {

                        rstPiece.Fields["DESC_EN"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_DESCR].Text);

                        rstPiece.Fields["DESC_FR"].Value = Strings.Trim(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_DESCR].Tag));
                    }
                    else
                    {

                        rstPiece.Fields["DESC_FR"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_DESCR].Text);

                        rstPiece.Fields["DESC_EN"].Value = Strings.Trim(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_DESCR].Tag));
                    }

                    rstPiece.Fields["Manufact"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_MANUFACT].Text);

                    rstPiece.Fields["Prix_list"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text, EnumConvert.MODE_PAS_FORMAT, 4);

                    rstPiece.Fields["Escompte"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_ESCOMPTE].Text, EnumConvert.MODE_PAS_FORMAT);

                    rstPiece.Fields["Prix_net"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PRIX_NET].Text, EnumConvert.MODE_PAS_FORMAT, 4);


                    rstPiece.Fields["OrdreSection"].Value = itmSource.SubItems[I_COL_SOUM_MANUFACT].Tag;
                    rstPiece.Fields["NuméroLigne"].Value = X;
                    rstPiece.Fields["CommandeAnnulée"].Value = true;

                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_DISTRIB].Text))
                    {


                        rstPiece.Fields["IDFRS"].Value = itmSource.SubItems[I_COL_SOUM_DISTRIB].Tag;
                    }

                    rstPiece.Fields["Temps"].Value = Strings.Trim(itmSource.SubItems[I_COL_SOUM_TEMPS].Text);

                    rstPiece.Fields["Temps_Total"].Value = itmSource.SubItems[I_COL_SOUM_MONTAGE].Text;

                    rstPiece.Fields["Prix_Total"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_TOTAL].Text, EnumConvert.MODE_PAS_FORMAT);

                    rstPiece.Fields["Profit_argent"].Value = Conversion_Renamed(itmSource.SubItems[I_COL_SOUM_PROFIT].Text, EnumConvert.MODE_PAS_FORMAT);


                    rstPiece.Fields["SousSection"].Value = itmSource.SubItems[I_COL_SOUM_PIECE].Tag;

                    if (!string.IsNullOrEmpty(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Text))
                    {

                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag, string.Empty, false)))
                        {

                            rstPiece.Fields["PrixOrigine"].Value = Strings.Replace(Math.Round(double.Parse(Strings.Replace(Conversions.ToString(itmSource.SubItems[I_COL_SOUM_PRIX_LIST].Tag), ".", ",")), 2).ToString(), ".", ",");
                        }
                        else
                        {
                            rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                        }
                    }
                    else
                    {
                        rstPiece.Fields["PrixOrigine"].Value.Text = "0";
                    }
                    if (Strings.InStr(1, itmSource.Text, "*") > 0)
                    {
                        rstPiece.Fields["Quoté"].Value = true;
                    }
                    else
                    {
                        rstPiece.Fields["Quoté"].Value = false;
                    }

                    rstPiece.Fields["Commentaire"].Value = itmSource.SubItems[I_COL_SOUM_COMMENTAIRE].Text;
                    rstPiece.Update();
                    rstPiece.Close();
                    rstPiece.CursorLocation = CursorLocationEnum.adUseServer;
                    rstPiece.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra + "' AND NuméroLigne >= " + X + " ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);

                    while (!rstPiece.EOF)
                    {

                        if (rstPiece.Fields["CommandeAnnulée"].Value == true & rstPiece.Fields["Qté"].Value == itmSource.Text & rstPiece.Fields["NumItem"].Value == itmSource.SubItems[I_COL_SOUM_PIECE].Text & bSkip == false)
                        {
                            bSkip = true;
                        }
                        else
                        {
                            rstPiece.Fields["NuméroLigne"].Value = rstPiece.Fields["NuméroLigne"].Value + 1;
                            rstPiece.Update();
                        }
                        rstPiece.MoveNext();
                    }
                    rstPiece.Close();
                    rstPiece = default;
                    CalculerTempsFabricationRecordset(Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + sExtra);
                }
                rstProjet.Close();
                rstProjet = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterAnnulationDansExtra", ex);
            }
        }
        private void Cmdfermer_Click(object eventSender, EventArgs e)
        {
            try
            {
                // Fermeture de la fenêtre
                m_bResize = false;
                Close();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdFermer_Click", ex);
            }
        }
        private void RemplirListViewModifications1()
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstCreation;
                string sChamps;
                string sTable;
                string sTableCreer;
                ListViewItem itmModif;
                rstProjSoum = new Recordset();
                rstEmploye = new Recordset();
                rstCreation = new Recordset();
                lvwHistorique.Items.Clear();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sChamps = "IDProjet";
                    sTable = "Projet_Modif";
                    sTableCreer = "ProjetMec";
                }
                else
                {
                    sChamps = "IDSoumission";
                    sTable = "Soumission_Modif";
                    sTableCreer = "SoumissionMec";
                }
                rstCreation.Open("SELECT creer, creer_par FROM " + sTableCreer + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                itmModif = lvwHistorique.Items.Add(string.Empty);
                itmModif.Text = "Création";
                itmModif = lvwHistorique.Items.Add(string.Empty);
                rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstCreation.Fields["creer_par"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                itmModif.Text = rstEmploye.Fields["Employe"].Value;
                rstEmploye.Close();
                if (itmModif.SubItems.Count > I_COL_MODIF_DATE)
                {
                    itmModif.SubItems[I_COL_MODIF_DATE].Text = rstCreation.Fields["creer"].Value;
                }
                else
                {
                    itmModif.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstCreation.Fields["creer"].Value));
                }
                if (itmModif.SubItems.Count > I_COL_MODIF_HEURE)
                {
                    itmModif.SubItems[I_COL_MODIF_HEURE].Text = string.Empty;
                }
                else
                {
                    itmModif.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, string.Empty));
                }
                rstCreation.Close();
                rstCreation = default;
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModif = 'MODIFICATION' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModif = lvwHistorique.Items.Add(string.Empty);
                    itmModif.Text = "Modifications";
                    while (!rstProjSoum.EOF)
                    {
                        itmModif = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModif.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModif.SubItems.Count > I_COL_MODIF_DATE)
                        {
                            itmModif.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value));
                        }
                        if (itmModif.SubItems.Count > I_COL_MODIF_HEURE)
                        {
                            itmModif.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value));
                        }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModif = 'RECEPTION' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModif = lvwHistorique.Items.Add(string.Empty);
                    itmModif.Text = "Réception";
                    while (!rstProjSoum.EOF)
                    {
                        itmModif = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModif.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModif.SubItems.Count > I_COL_MODIF_DATE)
                        {
                            itmModif.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value));
                        }
                        // Heure
                        if (itmModif.SubItems.Count > I_COL_MODIF_HEURE)
                        {
                            itmModif.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value));
                        }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModif = 'RETOUR' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModif = lvwHistorique.Items.Add(string.Empty);
                    itmModif.Text = "Retour de marchandise";
                    while (!rstProjSoum.EOF)
                    {
                        itmModif = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModif.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModif.SubItems.Count > I_COL_MODIF_DATE)
                        {
                            itmModif.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value));
                        }
                        if (itmModif.SubItems.Count > I_COL_MODIF_HEURE)
                        {
                            itmModif.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value));
                        }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum.Open("SELECT * FROM " + sTable + " WHERE " + sChamps + " = '" + txtNoProjSoum.Text + "' AND Type = 'E' AND TypeModif = 'FACTURATION' ORDER BY [Date], Heure", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjSoum.EOF)
                {
                    itmModif = lvwHistorique.Items.Add(string.Empty);
                    itmModif.Text = "Facturation";
                    while (!rstProjSoum.EOF)
                    {
                        itmModif = lvwHistorique.Items.Add(string.Empty);
                        rstEmploye.Open("SELECT Employe FROM Employés WHERE noEmploye = " + rstProjSoum.Fields["NoEmployé"].Value, odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        itmModif.Text = rstEmploye.Fields["Employe"].Value;
                        rstEmploye.Close();
                        if (itmModif.SubItems.Count > I_COL_MODIF_DATE)
                        {
                            itmModif.SubItems[I_COL_MODIF_DATE].Text = rstProjSoum.Fields["Date"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_DATE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Date"].Value));
                        }
                        if (itmModif.SubItems.Count > I_COL_MODIF_HEURE)
                        {
                            itmModif.SubItems[I_COL_MODIF_HEURE].Text = rstProjSoum.Fields["Heure"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_HEURE, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Heure"].Value));
                        }
                        if (itmModif.SubItems.Count > I_COL_MODIF_MONTANT)
                        {
                            itmModif.SubItems[I_COL_MODIF_MONTANT].Text = rstProjSoum.Fields["Valeur"].Value;
                        }
                        else
                        {
                            itmModif.SubItems.Insert(I_COL_MODIF_MONTANT, new ListViewItem.ListViewSubItem(null, rstProjSoum.Fields["Valeur"].Value));
                        }
                        rstProjSoum.MoveNext();
                    }
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                rstEmploye = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "RemplirListViewModifications", ex);
            }
        }
        private void Cmdajouter_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                string sNumero;
                var sNoProjet = default(string);
                bool bExiste;
                var bProjet = default(bool);
                var bContinuer = default(bool);
                bool bNoValide;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    sNumero = Interaction.InputBox("Veuillez entrer le numéro du projet");
                }
                else if (MessageBox.Show("Voulez-vous créer une nouvelle soumission?\nOui - Nouvelle soumission\nNon - Copie d'un projet dans une soumission", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    sNumero = Interaction.InputBox("Veuillez entrer le numéro de la soumission");
                }
                else
                {
                    sNumero = Interaction.InputBox("Veuillez entrer le numéro de la soumission");
                    sNoProjet = Interaction.InputBox("À partir de quel projet voulez-vous créer cette soumission?");
                    bProjet = true;
                }
                if (bProjet == true)
                {
                    if (!string.IsNullOrEmpty(sNumero) & !string.IsNullOrEmpty(sNoProjet))
                    {
                        bContinuer = true;
                    }
                }
                else if (!string.IsNullOrEmpty(sNumero))
                {
                    bContinuer = true;
                }
                if (bContinuer == true)
                {
                    Cursor.Current = Cursors.WaitCursor;
                    bNoValide = true;
                    if (ValiderFormatNumeroProjSoum(sNumero) == false)
                    {
                        bNoValide = false;
                    }
                    if (bNoValide == true)
                    {
                        if (ValiderFormatMectrique(sNumero) == false)
                        {
                            bNoValide = false;
                        }
                    }
                    if (bNoValide == true)
                    {
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            if (ValiderFormatJobSansSoum(sNumero) == false)
                            {
                                bNoValide = false;
                            }
                        }
                        else if (ValiderFormatSoumission(sNumero) == false)
                        {
                            bNoValide = false;
                        }
                    }
                    if (bNoValide == false)
                    {
                        Cursor.Current = Cursors.Default;
                        return;
                    }
                    sNumero = Strings.UCase(sNumero);
                    rstProjSoum = new Recordset();

                    rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockPessimistic);
                    if (rstProjSoum.EOF)
                    {
                        bExiste = false;
                    }
                    else
                    {
                        bExiste = true;
                        MessageBox.Show("Le numéro " + sNumero + " existe dans les soumissions électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    rstProjSoum.Close();
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjSoum.EOF)
                        {
                            bExiste = false;
                        }
                        else
                        {
                            bExiste = true;
                            MessageBox.Show("Le numéro " + sNumero + " existe dans les projets électriques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                    }
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjSoum.EOF)
                        {
                            bExiste = false;
                        }
                        else
                        {
                            bExiste = true;
                            MessageBox.Show("Le numéro " + sNumero + " existe dans les soumissions mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                    }
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (rstProjSoum.EOF)
                        {
                            bExiste = false;
                        }
                        else
                        {
                            bExiste = true;
                            MessageBox.Show("Le numéro " + sNumero + " existe dans les projets mécaniques!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                    }
                    if (bExiste == false)
                    {
                        rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum = '" + sNumero + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        if (!rstProjSoum.EOF)
                        {
                            if (rstProjSoum.Fields["Ouvert"].Value == false)
                            {
                                MessageBox.Show("Ce numéro est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                rstProjSoum.Close();
                                rstProjSoum = default;
                                Cursor.Current = Cursors.Default;
                                return;
                            }
                        }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                        if (bProjet == false)
                        {
                            InitialiserTempsTaux(true);
                            InitialiserNouveauxTaux();
                            m_sAncienProjSoum = txtNoProjSoum.Text;
                            txtNoProjSoum.Text = sNumero;
                            InitialiserVariables(txtNoProjSoum.Text);
                            BarrerChamps(false);

                            ViderChamps();
                        }
                        else if (VerifierProjet(sNoProjet) == true)
                        {
                            BarrerChamps(false);
                            ViderChamps();
                            txtNoProjSoum.Text = sNumero;
                            RemplirSoumissionProjet(sNumero, sNoProjet);
                        }
                        else
                        {
                            MessageBox.Show("Le projet " + sNoProjet + " n'existe pas!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            Cursor.Current = Cursors.Default;
                            return;
                        }
                        m_sSousSection = string.Empty;
                        m_bModeAjout = true;
                        m_bModeAffichage = false;
                        AfficherControles(EnumMode.MODE_AJOUT_MODIF);
                    }
                }
                Cursor.Current = Cursors.Default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAjouter_Click", ex);
            }
        }
        private void cmdImprimer_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                var sUser = default(string);
                if (!string.IsNullOrEmpty(txtNoProjSoum.Text))
                {
                    if (VerifierSiOuvert(ref sUser) == false)
                    {
                        rstProjSoum = new Recordset();
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            if (MessageBox.Show("Voulez-vous faire imprimer le projet et tous les extras associés à ce projet?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE Left(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' ORDER BY IDProjet", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            }
                            else
                            {
                                rstProjSoum.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "' ORDER BY IDProjet", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                            }
                        }
                        else
                        {
                            rstProjSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "' ORDER BY IDSoumission", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                        }
                        bTrigger = false;
                        // Modification PWE 2024-07-10
                        DialogResult dummie = MessageBox.Show("Désirez-vous afficher les dates de réception et de commande?", "Date de réception et de commande", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (dummie == DialogResult.Yes)
                        {
                            bFlag = true;
                        }
                        else
                        {
                            bFlag = false;
                        }
                        while (!rstProjSoum.EOF)
                        {
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                CalculerTotalRecordset(rstProjSoum.Fields["IDProjet"].Value);
                            }
                            ImprimerProjSoum(rstProjSoum);
                            if (dummie == DialogResult.No)
                            {
                                ImprimerListePieces(rstProjSoum);
                            }
                            rstProjSoum.MoveNext();
                        }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                    }
                    else if (m_eType == EnumType.TYPE_PROJET)
                    {
                        MessageBox.Show("Ce projet est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Cette soumission est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdImprimer_Click", ex);
            }
        }
        private bool VerifierProjet(string sNoProjet)
        {
            try
            {
                ADODB.Recordset rstProjet;
                rstProjet = new Recordset();
                rstProjet.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoProjet + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (!rstProjet.EOF)
                {
                    return true;
                }
                else
                {
                    return false;
                }
                rstProjet.Close();
                rstProjet = default;
                return false;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerifierProjet", ex);
                return false;
            }
        }
        private void cmdModifier_Click(object eventSender, EventArgs e)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                var sUser = default(string);
                m_collQteSupp = new List<String>();
                m_collDateSupp = new List<String>();
                m_collHeureSupp = new List<String>();
                m_collNoItemSupp = new List<String>();
                if (cmbProjSoum.SelectedIndex > -1)
                {
                    if (Droite(txtNoProjSoum.Text, 2) == "99")
                    {
                        if (m_eType == EnumType.TYPE_PROJET)
                        {
                            MessageBox.Show("Ce projet ne peut pas être modifié!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            MessageBox.Show("Cette soumission ne peut pas être modifiée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        return;
                    }
                    if (m_eType == EnumType.TYPE_SOUMISSION)
                    {
                        if (VerifierSiDejaProjet() == true)
                        {
                            MessageBox.Show("Vous ne pouvez pas modifier cette soumission, le projet a déjà été créé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum WHERE IDProjSoum ='" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProjSoum.Fields["Ouvert"].Value == false | rstProjSoum.Fields["Verrouillé"].Value == true)
                    {
                        if (rstProjSoum.Fields["Ouvert"].Value == false)
                        {
                            if (m_eType == EnumType.TYPE_PROJET)
                            {
                                MessageBox.Show("Ce projet est fermé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            else
                            {
                                MessageBox.Show("Cette soumission est fermée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else if (m_eType == EnumType.TYPE_PROJET)
                        {
                            MessageBox.Show("Ce projet est verrouillé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            MessageBox.Show("Cette soumission est verrouillée!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        rstProjSoum.Close();
                        rstProjSoum = default;
                        return;
                    }
                    rstProjSoum.Close();
                    rstProjSoum = default;
                    if (VerifierSiOuvert(ref sUser) == false)
                    {
                        Cursor.Current = Cursors.WaitCursor;
                        BarrerChamps(false);


                        m_sAncienProjSoum = txtNoProjSoum.Text;
                        m_bModeAjout = false;
                        m_bModeAffichage = false;
                        RemplirProjSoum();
                        AfficherControles(EnumMode.MODE_AJOUT_MODIF);
                        UpdateOrdre();
                        CalculerPrix();
                        lvwSoumission.Refresh();
                        OuvrirProjSoum(true);
                        Cursor.Current = Cursors.Default;
                    }
                    else if (m_eType == EnumType.TYPE_PROJET)
                    {
                        MessageBox.Show("Ce projet est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Cette soumission est en modification par " + sUser + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdModifier_Click", ex);
            }
        }
        private void FrmProjSoumMec_Load1(object eventSender, EventArgs e)
        {
            try
            {
                m_eLangage = EnumLangage.FRANCAIS;
                cmdAnglaisFrancais.Text = "Anglais";
                cmbTri.SelectedIndex = I_CMB_PIECE;
                ActiverBoutonsGroupe();
                m_eMode = EnumMode.MODE_INACTIF;
                RemplirComboClients(string.Empty);
                RemplirComboSections();
                RemplirComboCategoriesPieces();
                cmbOuvertFerme.SelectedIndex = I_CMB_OUVERT;
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    cmbChoix.SelectedIndex = I_IDX_PROJET;
                }
                else
                {
                    cmbChoix.SelectedIndex = I_IDX_SOUMISSION;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "Form_Load", ex);
            }
        }
        private bool VerifierSiOuvert(ref string sUser)
        {
            try
            {
                ADODB.Recordset rstProjSoum;
                rstProjSoum = new Recordset();
                if (m_eType == EnumType.TYPE_PROJET)
                {
                    rstProjSoum.Open("SELECT Modification, Par FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                else
                {
                    rstProjSoum.Open("SELECT Modification, Par FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                }
                if (rstProjSoum.Fields["Modification"].Value == true)
                {
                    sUser = rstProjSoum.Fields["Par"].Value;
                    return true;
                }
                else
                {
                    sUser = "";
                    return false;
                }
                rstProjSoum.Close();
                rstProjSoum = default;
                return false;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerifierSiOuvert", ex);
                return false;
            }
        }
        private void AjouterNegatifDansListView(double dblQuantite, string sSousSection)
        {
            var COLOR_NOIR = default(object);
            var COLOR_VERT = default(object);
            try
            {
                short iIndex;
                ListViewItem itmSoum;
                short X;
                short iIDSection;
                short iTagSection;
                bool bSelected;
                var iIndexSel = default(short);
                double dblTempsMec;
                var lColor = default(int);
                ADODB.Recordset rstProjet;
                var bQteOK = default(bool);
                var sNoProjet = default(string);
                string sPrixList;
                string sEscompte;
                string sPrixNet;
                string sTemps;
                var dblTotalQte = default(double);
                rstProjet = new Recordset();
                if (double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 60d & double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 98d)
                {
                    sNoProjet = Gauche(txtNoProjSoum.Text, Strings.Len(txtNoProjSoum.Text) - 2) + m_sLiaison;
                    if (m_bRecherchePiece == true)
                    {
                        rstProjet.Open(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND NumItem = '" + Strings.Replace(lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text, "'", "''") + "' AND IDFRS = ", lvwFournisseur.FocusedItem.Tag), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                    else
                    {
                        rstProjet.Open(Operators.ConcatenateObject("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoProjet + "' AND NumItem = '" + Strings.Replace(lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text, "'", "''") + "' AND IDFRS = ", lvwFournisseur.FocusedItem.Tag), odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    }
                }
                if (!rstProjet.EOF)
                {
                    while (!rstProjet.EOF)
                    {
                        dblTotalQte = dblTotalQte + rstProjet.Fields["Qté"].Value;
                        rstProjet.MoveNext();
                    }
                    if (dblTotalQte >= Math.Abs(dblQuantite))
                    {
                        bQteOK = true;
                    }
                }
                else
                {
                    MessageBox.Show("La pièce n'existe pas dans le projet " + sNoProjet, Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    rstProjet.Close();
                    rstProjet = default;
                    return;
                }
                if (bQteOK == true)
                {
                    rstProjet.MovePrevious();
                    sPrixList = rstProjet.Fields["Prix_List"].Value;
                    sEscompte = rstProjet.Fields["Escompte"].Value;
                    sPrixNet = rstProjet.Fields["Prix_Net"].Value;
                    sTemps = rstProjet.Fields["Temps"].Value;
                }
                else
                {
                    if (m_bRecherchePiece == true)
                    {
                        MessageBox.Show("Il n'y a pas assez de " + lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text + " dans le projet " + sNoProjet + " pour en enlever " + Math.Abs(dblQuantite) + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Il n'y a pas assez de " + lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text + " dans le projet " + sNoProjet + " pour en enlever " + Math.Abs(dblQuantite) + "!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    rstProjet.Close();
                    rstProjet = default;
                    return;
                }
                rstProjet.Close();
                rstProjet = default;
                bSelected = false;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (lvwSoumission.FocusedItem.Index > 1)
                    {
                        bSelected = true;
                        iIndexSel = (short)lvwSoumission.FocusedItem.Index;
                    }
                }
                if (bSelected == false)
                {
                    iIndex = (short)Bool2Int(TrouverIndexSection(sSousSection));
                }
                else
                {
                    iIndex = iIndexSel;
                }
                itmSoum = lvwSoumission.Items.Insert(iIndex, "");
                itmSoum.Checked = true;
                itmSoum.Text = dblQuantite.ToString();
                if (lvwFournisseur.FocusedItem.SubItems[I_COL_FRS_QUOTER].Text == "Oui")
                {
                    itmSoum.Text = itmSoum.Text + "*";
                    itmSoum.ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_VERT));
                }
                else
                {
                    itmSoum.ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                }
                itmSoum.Tag = cmbSections.Text;
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_NO_ITEM].Text));
                    }
                }
                else if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE)
                {
                    itmSoum.SubItems[I_COL_SOUM_PIECE].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text;
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text));
                }
                itmSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = ColorTranslator.FromOle(lColor);
                itmSoum.SubItems[I_COL_SOUM_PIECE].Tag = sSousSection;
                if (m_eLangage == EnumLangage.ANGLAIS)
                {
                    if (m_bRecherchePiece == true)
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR)
                        {
                            itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text;
                    }
                    else
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR)
                        {
                            itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text;
                    }
                }
                else if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR)
                    {
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_FR].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_DESCR_EN].Text;
                }
                else
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR)
                    {
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_FR].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_DESCR_EN].Text;
                }
                itmSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = ColorTranslator.FromOle(lColor);
                if (m_bRecherchePiece == true)
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT)
                    {
                        itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwPieceTrouve.FocusedItem.SubItems[I_COL_RECH_MANUFACT].Text));
                    }
                }
                else if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT)
                {
                    itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text;
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text));
                }
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = (cmbSections.SelectedIndex + 1).ToString();
                itmSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = ColorTranslator.FromOle(lColor);
                if (string.IsNullOrEmpty(Strings.Trim(sPrixList)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed("0", EnumConvert.MODE_ARGENT, 4);
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_ARGENT, 4)));
                    }
                }
                else
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(sPrixList, EnumConvert.MODE_ARGENT, 4);
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(sPrixList, EnumConvert.MODE_ARGENT, 4)));
                    }
                    itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = sPrixList;
                }
                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = ColorTranslator.FromOle(lColor);
                if (!string.IsNullOrEmpty(Strings.Trim(sEscompte)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = sEscompte;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, sEscompte));
                    }
                }
                else if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                {
                    itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed("0", EnumConvert.MODE_POURCENT);
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_POURCENT)));
                }
                itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = ColorTranslator.FromOle(lColor);
                if (!string.IsNullOrEmpty(Strings.Trim(sPrixNet)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(sPrixNet, EnumConvert.MODE_ARGENT, 4);
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(sPrixNet, EnumConvert.MODE_ARGENT, 4)));
                    }
                }
                else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                {
                    itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed("0", EnumConvert.MODE_ARGENT, 4);
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_ARGENT, 4)));
                }
                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = ColorTranslator.FromOle(lColor);
                if (itmSoum.SubItems.Count > I_COL_SOUM_DISTRIB)
                {
                    itmSoum.SubItems[I_COL_SOUM_DISTRIB].Text = lvwFournisseur.FocusedItem.Text;
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, lvwFournisseur.FocusedItem.Text));
                }
                itmSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = lvwFournisseur.FocusedItem.Tag;
                itmSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = ColorTranslator.FromOle(lColor);
                if (itmSoum.SubItems.Count > I_COL_SOUM_TEMPS)
                {
                    itmSoum.SubItems[I_COL_SOUM_TEMPS].Text = sTemps;
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, sTemps));
                }
                itmSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = ColorTranslator.FromOle(lColor);
                if (!string.IsNullOrEmpty(Strings.Trim(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text)))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString();
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString()));
                    }
                }
                else if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE)
                {
                    itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty;
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty));
                }
                itmSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = ColorTranslator.FromOle(lColor);
                if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL)
                {
                    itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = Conversion_Renamed(Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(), EnumConvert.MODE_ARGENT, 2);
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(), EnumConvert.MODE_ARGENT, 2)));
                }
                itmSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = ColorTranslator.FromOle(lColor);
                if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT)
                {
                    itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = Conversion_Renamed(Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString(), EnumConvert.MODE_ARGENT);
                }
                else
                {
                    itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString(), EnumConvert.MODE_ARGENT)));
                }
                itmSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = ColorTranslator.FromOle(lColor);
                if (string.IsNullOrEmpty(itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text))
                {
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = " ";
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, " "));
                    }
                }
                CalculerTempsFabrication();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "AjouterNegatifDansListView", ex);
            }
        }
        private bool VerifierEmplacement(short iIndexSelection)
        {
            try
            {
                ListViewItem itmSoum;
                itmSoum = lvwSoumission.Items[iIndexSelection];
                if (itmSoum.Tag != "")
                {
                    itmSoum = lvwSoumission.Items[iIndexSelection - 1];
                }
                if (itmSoum.Tag == cmbSections.Text)
                {
                    return true;
                }
                else
                {
                    return false;
                }
                return false;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "VerifierEmplacement", ex);
                return false;
            }
        }
        private void ChoisirFournisseur()
        {
            try
            {
                string sQuantite;
                var sSousSection = default(string);
                var bDemanderSS = default(bool);
                string sParams;
                if (lvwSoumission.Items.Count > 0)
                {
                    if (lvwSoumission.FocusedItem.Index > 1)
                    {
                        if (VerifierEmplacement((short)lvwSoumission.FocusedItem.Index) == true)
                        {
                            if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Tag, string.Empty, false)))
                            {
                                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(lvwSoumission.Items[lvwSoumission.FocusedItem.Index - 1].Tag, string.Empty, false)))
                                {
                                    MessageBox.Show("Vous ne pouvez pas mettre une pièce entre une section et une sous-section", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    fraFournisseur.Visible = false;
                                    Deselect();
                                    lvwSoumission.Items[1].Selected = true;
                                    return;
                                }
                                else
                                {
                                    sSousSection = Conversions.ToString(lvwSoumission.Items[lvwSoumission.FocusedItem.Index - 1].SubItems[I_COL_SOUM_PIECE].Tag);
                                }
                            }
                            else
                            {
                                sSousSection = Conversions.ToString(lvwSoumission.FocusedItem.SubItems[I_COL_SOUM_PIECE].Tag);
                            }
                        }
                        else if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(lvwSoumission.Items[lvwSoumission.FocusedItem.Index - 1].SubItems[I_COL_SOUM_MANUFACT].Tag, "", false)))
                        {
                            ChoisirFournisseur();
                            fraFournisseur.Visible = false;
                            Deselect();
                            lvwSoumission.Items[1].Selected = true;
                            return;
                        }
                        else
                        {
                            MessageBox.Show("Impossible d'ajouter entre une section et une sous-section!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                    else
                    {
                        bDemanderSS = true;
                    }
                }
                else
                {
                    bDemanderSS = true;
                }
                sQuantite = Interaction.InputBox("Quelle est la quantité?");
                sQuantite = Strings.Replace(sQuantite, ".", ",");
                if (!string.IsNullOrEmpty(sQuantite))
                {
                    if (!IsNumeric(sQuantite))
                    {
                        MessageBox.Show("Quantité non numérique!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    else if (double.Parse(sQuantite) < 0d)
                    {
                        if (lvwFournisseur.FocusedItem.Text == "CHOISIR ULTÉRIEUREMENT")
                        {
                            MessageBox.Show("Impossible de faire une demande de prix sur une pièce négative!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
                else
                {
                    return;
                }
                if (bDemanderSS == true)
                {
                    if ((m_sSousSection ?? "") != S_PAS_SOUS_SECTION)
                    {
                        sSousSection = Interaction.InputBox("Quelle est la sous-section?", DefaultResponse: m_sSousSection);
                    }
                    else
                    {
                        sSousSection = Interaction.InputBox("Quelle est la sous-section?");
                    }
                }
                if (string.IsNullOrEmpty(sSousSection))
                {
                    sSousSection = S_PAS_SOUS_SECTION;
                    m_sSousSection = string.Empty;
                }
                else
                {
                    m_sSousSection = sSousSection;
                }
                if (double.Parse(sQuantite) < 0d)
                {
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (double.Parse(Droite(txtNoProjSoum.Text, 2)) >= 60d & double.Parse(Droite(txtNoProjSoum.Text, 2)) <= 98d)
                        {
                            AjouterNegatifDansListView(double.Parse(sQuantite), sSousSection);
                        }
                        else
                        {
                            AjouterDansListViewSoumission(double.Parse(sQuantite), sSousSection);
                        }
                    }
                    else
                    {
                        AjouterDansListViewSoumission(double.Parse(sQuantite), sSousSection);
                    }
                }
                else
                {
                    AjouterDansListViewSoumission(double.Parse(sQuantite), sSousSection);
                }
                CalculerPrix();
                fraFournisseur.Visible = false;
                if (lvwSoumission.Items.Count > 0)
                {
                    Deselect();
                    lvwSoumission.Items[1].Selected = true;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ChoisirFournisseur", ex);
            }
        }
        private void lvwFournisseur_DoubleClick(object eventSender, EventArgs e)
        {
            try
            {
                if (m_bPieceInutile == true | m_bChangementFRS == true)
                {
                    ChoisirFournisseurMateriel();
                }
                else
                {
                    ChoisirFournisseur();
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwFournisseur_DblClick", ex);
            }
        }
        private void lvwPieces_DoubleClick(object eventSender, EventArgs e)
        {
            try
            {
                m_bPieceInutile = false;
                m_bRecherchePiece = false;
                m_bChangementFRS = false;
                AfficherListeFournisseurs();
                if (lvwFournisseur.Items.Count == 1)
                {
                    if (MessageBox.Show("Il n'y a aucun fournisseur pour cette pièce!\nVoulez-vous en ajouter?", Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        Cursor.Current = Cursors.WaitCursor;
                        Form f = new CatalogueMec(cmbPieces.Text, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_MANUFACT].Text, lvwPieces.FocusedItem.SubItems[I_COL_PIECES_NO_ITEM].Text);
                        f.MdiParent = Conteneur.Mdi;
                        f.Show();
                        Cursor.Current = Cursors.Default;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "lvwPieces_DblClick", ex);
            }
        }
        private void mvwDateRequise_Enter(object eventSender, EventArgs e)
        {
            try
            {
                m_bMonthViewHasFocus = true;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mvwDateRequise_GotFocus", ex);
            }
        }
        private void tmrTemps_Tick(object eventSender, EventArgs e)
        {
            try
            {
                if (lblPasTemps.Visible == true)
                {
                    lblPasTemps.Visible = false;
                }
                else
                {
                    lblPasTemps.Visible = true;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "tmrTemps_Timer", ex);
            }
        }
        private void txtCheminPhotos_KeyDown(object eventSender, KeyEventArgs e)
        {
            short KeyCode = (short)e.KeyCode;
            try
            {
                if (m_eMode == EnumMode.MODE_AJOUT_MODIF)
                {
                    if (KeyCode != (int)Keys.Back & KeyCode != (int)Keys.Delete)
                    {
                        KeyCode = 0;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtCheminPhotos_KeyDown", ex);
            }
        }
        private void txtPrixManuel_TextChanged(object eventSender, EventArgs e)
        {
            try
            {
                CalculerPrix();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtManuel_Change", ex);
            }
        }
        private void cmdAnnulerPrix_Click(object eventSender, EventArgs e)
        {
            try
            {
                fraPrixPiece.Visible = false;
                m_bMauvaisPrix = false;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdAnnulerPrix_Click", ex);
            }
        }
        private void cmdOKPrix_Click(object eventSender, EventArgs e)
        {
            var COLOR_MAGENTA = default(object);
            var COLOR_NOIR = default(object);
            try
            {
                ADODB.Recordset rstConfig;
                ListViewItem itmSoum;
                ListViewItem itmAvant;
                bool bPrixSpecial;
                short X;
                int lColor;
                string sQuantite;
                string sPiece;
                string sTauxUSA;
                string sTauxSPA;
                rstConfig = new Recordset();
                rstConfig.Open("SELECT TauxAmericain, TauxEspagnol FROM Config", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                sTauxUSA = rstConfig.Fields["TauxAmericain"].Value;
                sTauxSPA = rstConfig.Fields["TauxEspagnol"].Value;
                rstConfig.Close();
                rstConfig = default;
                if (m_bMauvaisPrix == false)
                {
                    if (cmbfrs.SelectedIndex == -1)
                    {
                        MessageBox.Show("Vous devez choisir un fournisseur!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
                if (string.IsNullOrEmpty(Strings.Trim(txtPrixList.Text)))
                {
                    if (string.IsNullOrEmpty(Strings.Trim(txtPrixSpecial.Text)))
                    {
                        MessageBox.Show("Vous devez remplir le prix listé!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
                if (string.IsNullOrEmpty(Strings.Trim(txtPrixNet.Text)) & string.IsNullOrEmpty(Strings.Trim(txtPrixSpecial.Text)))
                {
                    MessageBox.Show("Vous devez choisir un prix!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else if (!string.IsNullOrEmpty(Strings.Trim(txtPrixNet.Text)))
                {
                    bPrixSpecial = false;
                }
                else
                {
                    bPrixSpecial = true;
                }
                if (m_bMauvaisPrix == true)
                {
                    sQuantite = Interaction.InputBox("Quelle est la quantité!");
                    if (!string.IsNullOrEmpty(sQuantite))
                    {
                        if (!IsNumeric(sQuantite))
                        {
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                    itmAvant = lvwSoumission.Items[Conversions.ToShort(fraPrixPiece.Tag)];
                    itmSoum = lvwSoumission.Items.Insert(Conversions.ToShort(fraPrixPiece.Tag) + 1, "");
                    lColor = ColorTranslator.ToOle(itmAvant.SubItems[I_COL_SOUM_PIECE].ForeColor);
                    itmSoum.Checked = itmAvant.Checked;
                    itmSoum.Text = "-" + itmAvant.Text;
                    itmSoum.Tag = itmAvant.Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PIECE].Text = itmAvant.SubItems[I_COL_SOUM_PIECE].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PIECE].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_PIECE].Tag = itmAvant.SubItems[I_COL_SOUM_PIECE].Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR)
                    {
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Text = itmAvant.SubItems[I_COL_SOUM_DESCR].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DESCR].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = itmAvant.SubItems[I_COL_SOUM_DESCR].Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT)
                    {
                        itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = itmAvant.SubItems[I_COL_SOUM_MANUFACT].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_MANUFACT].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = itmAvant.SubItems[I_COL_SOUM_MANUFACT].Tag;

                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].Text));
                    }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Tag = itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Tag;

                    if (itmSoum.SubItems.Count > I_COL_SOUM_DISTRIB)
                    {
                        itmSoum.SubItems[I_COL_SOUM_DISTRIB].Text = itmAvant.SubItems[I_COL_SOUM_DISTRIB].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DISTRIB].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = itmAvant.SubItems[I_COL_SOUM_DISTRIB].Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_TEMPS)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TEMPS].Text = itmAvant.SubItems[I_COL_SOUM_TEMPS].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_TEMPS].Text));
                    }
                    if (!string.IsNullOrEmpty(Strings.Trim(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString();
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString()));
                        }
                    }
                    else if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty));
                    }

                    if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = "-" + itmAvant.SubItems[I_COL_SOUM_TOTAL].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, "-" + itmAvant.SubItems[I_COL_SOUM_TOTAL].Text));
                    }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = "-" + itmAvant.SubItems[I_COL_SOUM_PROFIT].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, "-" + itmAvant.SubItems[I_COL_SOUM_PROFIT].Text));
                    }

                    itmSoum = lvwSoumission.Items.Insert(Conversions.ToShort(fraPrixPiece.Tag) + 2, "");
                    itmSoum.Checked = itmAvant.Checked;
                    itmSoum.Text = sQuantite;
                    itmSoum.Tag = itmAvant.Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PIECE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PIECE].Text = itmAvant.SubItems[I_COL_SOUM_PIECE].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PIECE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_PIECE].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = ColorTranslator.FromOle(lColor);
                    itmSoum.SubItems[I_COL_SOUM_PIECE].Tag = itmAvant.SubItems[I_COL_SOUM_PIECE].Tag;
                    if (itmSoum.SubItems.Count > I_COL_SOUM_DESCR)
                    {
                        itmSoum.SubItems[I_COL_SOUM_DESCR].Text = itmAvant.SubItems[I_COL_SOUM_DESCR].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_DESCR, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DESCR].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].Tag = itmAvant.SubItems[I_COL_SOUM_DESCR].Tag;
                    itmSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = ColorTranslator.FromOle(lColor);
                    if (itmSoum.SubItems.Count > I_COL_SOUM_MANUFACT)
                    {
                        itmSoum.SubItems[I_COL_SOUM_MANUFACT].Text = itmAvant.SubItems[I_COL_SOUM_MANUFACT].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_MANUFACT, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_MANUFACT].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_MANUFACT].Tag = itmAvant.SubItems[I_COL_SOUM_MANUFACT].Tag;
                    itmSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = ColorTranslator.FromOle(lColor);
                    if (bPrixSpecial == false)
                    {
                        if (optUSA.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (optSpain.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                        {
                            itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(txtPrixList.Text, EnumConvert.MODE_ARGENT, 4);
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixList.Text, EnumConvert.MODE_ARGENT, 4)));
                        }
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = txtPrixList.Text;
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = ColorTranslator.FromOle(lColor);

                        if (!string.IsNullOrEmpty(mskEscompte.Text))
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                            {
                                itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed(mskEscompte.Text, EnumConvert.MODE_POURCENT);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(mskEscompte.Text, EnumConvert.MODE_POURCENT)));
                            }
                        }
                        else if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed("0", EnumConvert.MODE_POURCENT);
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_POURCENT)));
                        }
                        itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = ColorTranslator.FromOle(lColor);

                        if (optUSA.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (optSpain.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                        {
                            itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(txtPrixNet.Text, EnumConvert.MODE_ARGENT, 4);
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixNet.Text, EnumConvert.MODE_ARGENT, 4)));
                        }
                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Tag = itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Tag;
                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = ColorTranslator.FromOle(lColor);
                    }
                    else
                    {
                        if (optUSA.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (optSpain.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                        {
                            itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4);
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4)));
                        }
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = txtPrixSpecial.Text;
                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = ColorTranslator.FromOle(lColor);
                        if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed("0", EnumConvert.MODE_POURCENT);
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_POURCENT)));
                        }
                        itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = ColorTranslator.FromOle(lColor);
                        if (optUSA.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (optSpain.Checked == true)
                        {
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                            }
                        }
                        else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                        {
                            itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4);
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4)));
                        }
                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Tag = itmAvant.SubItems[I_COL_SOUM_PRIX_NET].Tag;
                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = ColorTranslator.FromOle(lColor);
                    }

                    if (itmSoum.SubItems.Count > I_COL_SOUM_DISTRIB)
                    {
                        itmSoum.SubItems[I_COL_SOUM_DISTRIB].Text = itmAvant.SubItems[I_COL_SOUM_DISTRIB].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DISTRIB].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = itmAvant.SubItems[I_COL_SOUM_DISTRIB].Tag;
                    itmSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = ColorTranslator.FromOle(lColor);
                    if (itmSoum.SubItems.Count > I_COL_SOUM_TEMPS)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TEMPS].Text = itmAvant.SubItems[I_COL_SOUM_TEMPS].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_TEMPS, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_TEMPS].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = ColorTranslator.FromOle(lColor);
                    if (!string.IsNullOrEmpty(Strings.Trim(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text)))
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString();
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, (double.Parse(Strings.Replace(itmSoum.SubItems[I_COL_SOUM_TEMPS].Text, ".", ",")) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty))).ToString()));
                        }
                    }
                    else if (itmSoum.SubItems.Count > I_COL_SOUM_MONTAGE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_MONTAGE].Text = string.Empty;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_MONTAGE, new ListViewItem.ListViewSubItem(null, string.Empty));
                    }
                    itmSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = ColorTranslator.FromOle(lColor);

                    if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = Conversion_Renamed(Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(), EnumConvert.MODE_ARGENT);
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(), EnumConvert.MODE_ARGENT)));
                    }
                    itmSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = ColorTranslator.FromOle(lColor);
                    if (optUSA.Checked == true)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = "USA";
                    }
                    else if (optSpain.Checked == true)
                    {
                        itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = "SPA";
                    }
                    else
                    {
                        itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = "CAN";
                    }
                    if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT)
                    {
                        itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = Conversion_Renamed(Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString(), EnumConvert.MODE_ARGENT);
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", string.Empty)), 2).ToString(), EnumConvert.MODE_ARGENT)));
                    }
                    itmSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = ColorTranslator.FromOle(lColor);
                    if (itmSoum.SubItems.Count > I_COL_SOUM_COMMENTAIRE)
                    {
                        itmSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text = itmAvant.SubItems[I_COL_SOUM_COMMENTAIRE].Text;
                    }
                    else
                    {
                        itmSoum.SubItems.Insert(I_COL_SOUM_COMMENTAIRE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_COMMENTAIRE].Text));
                    }
                    itmSoum.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = ColorTranslator.FromOle(lColor);
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DATE_COMMANDE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].Text = itmAvant.SubItems[I_COL_SOUM_DATE_COMMANDE].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_DATE_COMMANDE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DATE_COMMANDE].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = ColorTranslator.FromOle(lColor);
                        if (itmSoum.SubItems.Count > I_COL_SOUM_DATE_REQUISE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_DATE_REQUISE].Text = itmAvant.SubItems[I_COL_SOUM_DATE_REQUISE].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_DATE_REQUISE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_DATE_REQUISE].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = ColorTranslator.FromOle(lColor);
                        if (itmSoum.SubItems.Count > I_COL_SOUM_NOM_COMMANDE)
                        {
                            itmSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].Text = itmAvant.SubItems[I_COL_SOUM_NOM_COMMANDE].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_NOM_COMMANDE, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_NOM_COMMANDE].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = ColorTranslator.FromOle(lColor);
                        if (itmSoum.SubItems.Count > I_COL_SOUM_NO_SEQUENTIEL)
                        {
                            itmSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text = itmAvant.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_NO_SEQUENTIEL, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = ColorTranslator.FromOle(lColor);
                        if (itmSoum.SubItems.Count > I_COL_SOUM_ID)
                        {
                            itmSoum.SubItems[I_COL_SOUM_ID].Text = itmAvant.SubItems[I_COL_SOUM_ID].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_ID, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_ID].Text));
                        }
                        itmSoum.SubItems[I_COL_SOUM_ID].ForeColor = ColorTranslator.FromOle(lColor);
                        if (itmSoum.SubItems.Count > I_COL_SOUM_FACTURATION)
                        {
                            itmSoum.SubItems[I_COL_SOUM_FACTURATION].Text = itmAvant.SubItems[I_COL_SOUM_FACTURATION].Text;
                        }
                        else
                        {
                            itmSoum.SubItems.Insert(I_COL_SOUM_FACTURATION, new ListViewItem.ListViewSubItem(null, itmAvant.SubItems[I_COL_SOUM_FACTURATION].Text));
                        }
                        if (!string.IsNullOrEmpty(itmSoum.SubItems[I_COL_SOUM_FACTURATION].Text))
                        {
                            itmSoum.SubItems[I_COL_SOUM_FACTURATION].Tag = itmAvant.SubItems[I_COL_SOUM_FACTURATION].Text;
                        }
                        itmSoum.SubItems[I_COL_SOUM_FACTURATION].ForeColor = ColorTranslator.FromOle(lColor);
                    }
                    if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_COMMENTAIRE].Text))
                    {
                        itmSoum.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = itmAvant.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor;
                        itmAvant.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = Color.Black;
                    }
                    if (m_eType == EnumType.TYPE_PROJET)
                    {
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_DATE_COMMANDE].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_DATE_COMMANDE].ForeColor = Color.Black;
                        }
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_DATE_REQUISE].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_DATE_REQUISE].ForeColor = Color.Black;
                        }
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_NOM_COMMANDE].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_NOM_COMMANDE].ForeColor = Color.Black;
                        }
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_NO_SEQUENTIEL].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_NO_SEQUENTIEL].ForeColor = Color.Black;
                        }
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_FACTURATION].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_FACTURATION].ForeColor = Color.Black;
                        }
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_ID].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_ID].ForeColor = Color.Black;
                        }
                        if (!string.IsNullOrEmpty(itmAvant.SubItems[I_COL_SOUM_PROVENANCE].Text))
                        {
                            itmAvant.SubItems[I_COL_SOUM_PROVENANCE].ForeColor = Color.Black;
                        }
                    }
                    itmSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = itmAvant.SubItems[I_COL_SOUM_DESCR].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = itmAvant.SubItems[I_COL_SOUM_DISTRIB].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = itmAvant.SubItems[I_COL_SOUM_MANUFACT].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = itmAvant.SubItems[I_COL_SOUM_MONTAGE].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = itmAvant.SubItems[I_COL_SOUM_PIECE].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = itmAvant.SubItems[I_COL_SOUM_PRIX_NET].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = itmAvant.SubItems[I_COL_SOUM_PROFIT].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = itmAvant.SubItems[I_COL_SOUM_TEMPS].ForeColor;
                    itmSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = itmAvant.SubItems[I_COL_SOUM_TOTAL].ForeColor;
                    itmAvant.SubItems[I_COL_SOUM_DESCR].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_DISTRIB].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_MANUFACT].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_MONTAGE].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_PIECE].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_PROFIT].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_TEMPS].ForeColor = Color.Black;
                    itmAvant.SubItems[I_COL_SOUM_TOTAL].ForeColor = Color.Black;
                    CalculerTempsFabrication();
                    if (lvwSoumission.Items.Count > 0)
                    {
                        Deselect();
                        lvwSoumission.Items[1].Selected = true;
                    }
                    m_bMauvaisPrix = false;
                    cmbfrs.Enabled = false;
                    lvwSoumission.Refresh();
                }
                else
                {
                    sPiece = lvwSoumission.Items[Conversions.ToShort(fraPrixPiece.Tag)].SubItems[I_COL_SOUM_PIECE].Text;
                    var loopTo = (short)lvwSoumission.Items.Count;
                    for (X = 1; X <= loopTo; X++)
                    {
                        if (Conversions.ToBoolean(Operators.AndObject((lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].Text ?? "") == (sPiece ?? ""), Operators.ConditionalCompareObjectEqual(ColorTranslator.ToOle(lvwSoumission.Items[X].SubItems[I_COL_SOUM_PIECE].ForeColor), COLOR_MAGENTA, false))))
                        {
                            itmSoum = lvwSoumission.Items[X];
                            itmSoum.SubItems[I_COL_SOUM_PIECE].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_DESCR].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_DISTRIB].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_MANUFACT].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_MONTAGE].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_PRIX_NET].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_PROFIT].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_TEMPS].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            itmSoum.SubItems[I_COL_SOUM_TOTAL].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            if (!string.IsNullOrEmpty(itmSoum.SubItems[I_COL_SOUM_COMMENTAIRE].Text))
                            {
                                itmSoum.SubItems[I_COL_SOUM_COMMENTAIRE].ForeColor = ColorTranslator.FromOle(Conversions.ToInteger(COLOR_NOIR));
                            }
                            lvwSoumission.Refresh();
                            if (bPrixSpecial == false)
                            {

                                if (optUSA.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (optSpain.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixList.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                {
                                    itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(txtPrixList.Text, EnumConvert.MODE_ARGENT, 4);
                                }
                                else
                                {
                                    itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixList.Text, EnumConvert.MODE_ARGENT, 4)));
                                }
                                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = txtPrixList.Text;

                                if (!string.IsNullOrEmpty(mskEscompte.Text))
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed(mskEscompte.Text, EnumConvert.MODE_POURCENT);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(mskEscompte.Text, EnumConvert.MODE_POURCENT)));
                                    }
                                }
                                else if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                                {
                                    itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed("0", EnumConvert.MODE_POURCENT);
                                }
                                else
                                {
                                    itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_POURCENT)));
                                }

                                if (optUSA.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (optSpain.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixNet.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                {
                                    itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(txtPrixNet.Text, EnumConvert.MODE_ARGENT, 4);
                                }
                                else
                                {
                                    itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixNet.Text, EnumConvert.MODE_ARGENT, 4)));
                                }
                            }
                            else
                            {
                                if (optUSA.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (optSpain.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_LIST)
                                {
                                    itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Text = Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4);
                                }
                                else
                                {
                                    itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_LIST, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4)));
                                }
                                itmSoum.SubItems[I_COL_SOUM_PRIX_LIST].Tag = txtPrixSpecial.Text;
                                if (itmSoum.SubItems.Count > I_COL_SOUM_ESCOMPTE)
                                {
                                    itmSoum.SubItems[I_COL_SOUM_ESCOMPTE].Text = Conversion_Renamed("0", EnumConvert.MODE_POURCENT);
                                }
                                else
                                {
                                    itmSoum.SubItems.Insert(I_COL_SOUM_ESCOMPTE, new ListViewItem.ListViewSubItem(null, Conversion_Renamed("0", EnumConvert.MODE_POURCENT)));
                                }
                                if (optUSA.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxUSA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (optSpain.Checked == true)
                                {
                                    if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                    {
                                        itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4);
                                    }
                                    else
                                    {
                                        itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(txtPrixSpecial.Text) / double.Parse(sTauxSPA), 4).ToString(), EnumConvert.MODE_ARGENT, 4)));
                                    }
                                }
                                else if (itmSoum.SubItems.Count > I_COL_SOUM_PRIX_NET)
                                {
                                    itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text = Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4);
                                }
                                else
                                {
                                    itmSoum.SubItems.Insert(I_COL_SOUM_PRIX_NET, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(txtPrixSpecial.Text, EnumConvert.MODE_ARGENT, 4)));
                                }
                            }

                            if (itmSoum.SubItems.Count > I_COL_SOUM_DISTRIB)
                            {
                                itmSoum.SubItems[I_COL_SOUM_DISTRIB].Text = cmbfrs.Text;
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_DISTRIB, new ListViewItem.ListViewSubItem(null, cmbfrs.Text));
                            }
                            itmSoum.SubItems[I_COL_SOUM_DISTRIB].Tag = cmbfrs.SelectedIndex;

                            if (itmSoum.SubItems.Count > I_COL_SOUM_TOTAL)
                            {
                                itmSoum.SubItems[I_COL_SOUM_TOTAL].Text = Conversion_Renamed(Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", "")) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(), EnumConvert.MODE_ARGENT);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_TOTAL, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(Strings.Replace(itmSoum.Text, "*", "")) * double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * Conversions.ToSingle(m_sProfit), 2).ToString(), EnumConvert.MODE_ARGENT)));
                            }
                            if (optUSA.Checked == true)
                            {
                                itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = "USA";
                            }
                            else if (optSpain.Checked == true)
                            {
                                itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = "SPA";
                            }
                            else
                            {
                                itmSoum.SubItems[I_COL_SOUM_TOTAL].Tag = "CAN";
                            }
                            if (itmSoum.SubItems.Count > I_COL_SOUM_PROFIT)
                            {
                                itmSoum.SubItems[I_COL_SOUM_PROFIT].Text = Conversion_Renamed(Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", "")), 2).ToString(), EnumConvert.MODE_ARGENT);
                            }
                            else
                            {
                                itmSoum.SubItems.Insert(I_COL_SOUM_PROFIT, new ListViewItem.ListViewSubItem(null, Conversion_Renamed(Math.Round(double.Parse(itmSoum.SubItems[I_COL_SOUM_TOTAL].Text) - double.Parse(itmSoum.SubItems[I_COL_SOUM_PRIX_NET].Text) * double.Parse(Strings.Replace(itmSoum.Text, "*", "")), 2).ToString(), EnumConvert.MODE_ARGENT)));
                            }
                        }
                    }
                }
                ModifierPrixCatalogue();
                fraPrixPiece.Visible = false;
                CalculerPrix();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "cmdOKPrix_Click", ex);
            }
        }
        private void txtPrixList_Leave(object eventSender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtPrixList.Text))
                {
                    txtPrixList.Text = Strings.Replace(txtPrixList.Text, ".", ",");
                    if (IsNumeric(txtPrixList.Text))
                    {
                        CalculerPrixNet();
                    }
                    else
                    {
                        MessageBox.Show("Valeur non numérique!", Text, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        txtPrixList.Text = string.Empty;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtPrixList_LostFocus", ex);
            }
        }
        private void txtPrixNet_TextChanged(object eventSender, EventArgs e)
        {
            try
            {
                if (Strings.Len(txtPrixNet.Text) > 0)
                {
                    txtPrixSpecial.Text = string.Empty;
                    txtPrixSpecial.Enabled = false;
                }
                else
                {
                    txtPrixSpecial.Enabled = true;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtPrixNet_Change", ex);
            }
        }
        private void txtPrixNet_Enter(object eventSender, EventArgs e)
        {
            try
            {
                CalculerPrixNet();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtPrixNet_GotFocus", ex);
            }
        }
        private void txtPrixNet_Leave(object eventSender, EventArgs e)
        {
            try
            {
                txtPrixNet.Text = Strings.Replace(txtPrixNet.Text, ".", ",");
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtPrixNet_LostFocus", ex);
            }
        }
        private void ModifierPrixCatalogue()
        {

            try
            {
                ADODB.Recordset rstPrix;
                double dblPrixList;
                double dblEscompte;
                double dblPrixNet;
                if (!string.IsNullOrEmpty(Strings.Trim(txtPrixList.Text)))
                {
                    dblPrixList = double.Parse(txtPrixList.Text);
                }
                else { dblPrixList = 0d; }
                if (!string.IsNullOrEmpty(mskEscompte.Text))
                {
                    dblEscompte = double.Parse(mskEscompte.Text);
                }
                else { dblEscompte = 0d; }
                if (!string.IsNullOrEmpty(Strings.Trim(txtPrixNet.Text)))
                {
                    dblPrixNet = double.Parse(txtPrixNet.Text);
                }
                else
                {
                    dblPrixNet = double.Parse(txtPrixSpecial.Text);
                }
                rstPrix = new Recordset();
                if (txtPrixNet.Enabled == true)
                {

                    rstPrix.Open("SELECT * FROM PiecesFRS WHERE PIECE = '" + Strings.Replace(lvwSoumission.Items[Conversions.ToShort(fraPrixPiece.Tag)].SubItems[I_COL_SOUM_PIECE].Text, "'", "''") + "' AND IDFRS = " + GetFournisseurFromName(cmbfrs.Text) + " AND PRIX_NET <> ''", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic); ;
                    if (rstPrix.EOF)
                    {
                        rstPrix.AddNew();
                        rstPrix.Fields["PIECE"].Value = lvwSoumission.Items[Conversions.ToShort(fraPrixPiece.Tag)].SubItems[I_COL_SOUM_PIECE].Text;
                        rstPrix.Fields["IDFRS"].Value = GetFournisseurFromName(cmbfrs.Text);
                    }
                    rstPrix.Fields["PRIX_LIST"].Value = dblPrixList;
                    rstPrix.Fields["ESCOMPTE"].Value = dblEscompte;
                    rstPrix.Fields["PRIX_NET"].Value = dblPrixNet;
                    rstPrix.Fields["PRIX_SP"].Value = "";
                }
                else
                {
                    rstPrix.Open("SELECT * FROM PiecesFRS WHERE PIECE = '" + Strings.Replace(lvwSoumission.Items[Conversions.ToShort(fraPrixPiece.Tag)].SubItems[I_COL_SOUM_PIECE].Text, "'", "''") + "' AND IDFRS = " + GetFournisseurFromName(cmbfrs.Text) + " AND PRIX_SP <> ''", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstPrix.EOF)
                    {
                        rstPrix.AddNew();
                        rstPrix.Fields["PIECE"].Value = lvwSoumission.Items[Conversions.ToShort(fraPrixPiece.Tag)].SubItems[I_COL_SOUM_PIECE].Text;
                        rstPrix.Fields["IDFRS"].Value = GetFournisseurFromName(cmbfrs.Text);
                    }
                    rstPrix.Fields["PRIX_SP"].Value = dblPrixNet;
                    rstPrix.Fields["PRIX_LIST"].Value = "";
                    rstPrix.Fields["ESCOMPTE"].Value = "";
                    rstPrix.Fields["PRIX_NET"].Value = "";
                }
                if (optCAN.Checked == true)
                {
                    rstPrix.Fields["DeviseMonétaire"].Value = "CAN";
                }
                else if (optUSA.Checked == true)
                {
                    rstPrix.Fields["DeviseMonétaire"].Value = "USA";
                }
                else
                {
                    rstPrix.Fields["DeviseMonétaire"].Value = "SPA";
                }
                rstPrix.Fields["Type"].Value = "E";
                rstPrix.Fields["ENTRER_PAR"].Value = Conteneur.idInitiales.Text;
                rstPrix.Fields["Date"].Value = ConvertDate(DateTime.Today);
                rstPrix.Update();
                rstPrix.Close();
                rstPrix = default;
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "ModifierPrixCatalogue", ex);
            }
        }
        private void optCAN_CheckedChanged(object eventSender, EventArgs e)
        {
            if (Conversions.ToBoolean(((dynamic)eventSender).Checked))
            {
                AfficherDrapeau();
            }
        }
        private void optSpain_CheckedChanged(object eventSender, EventArgs e)
        {
            if (Conversions.ToBoolean(((dynamic)eventSender).Checked))
            {
                AfficherDrapeau();
                return;
            }
        }
        private void optUSA_CheckedChanged(object eventSender, EventArgs e)
        {
            if (Conversions.ToBoolean(((dynamic)eventSender).Checked))
            {
                AfficherDrapeau();
                return;
            }
        }
        private void mskEscompte_GotFocus()
        {
            try
            {
                if (mskEscompte.Enabled == true)
                {
                    mskEscompte.Mask = "0,####";
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mskEscompte_GotFocus", ex);
            }
        }
        private void mskEscompte_LostFocus()
        {
            try
            {
                mskEscompte.Mask = string.Empty;
                if (mskEscompte.Text == "0,____")
                {

                    mskEscompte.Text = string.Empty;
                }
                CalculerPrixNet();
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "mskEscompte_LostFocus", ex);
            }
        }
        private void txtPrixSpecial_TextChanged(object eventSender, EventArgs e)
        {
            try
            {
                if (Strings.Len(txtPrixSpecial.Text) > 0)
                {

                    mskEscompte.Text = string.Empty;
                    txtPrixNet.Text = string.Empty;
                    mskEscompte.Enabled = false;
                    txtPrixNet.Enabled = false;
                }
                else
                {
                    mskEscompte.Enabled = true;
                    txtPrixNet.Enabled = true;
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtPrixSpecial_Change", ex);
            }
        }
        private void txtPrixSpecial_Leave(object eventSender, EventArgs e)
        {
            try
            {
                txtPrixSpecial.Text = Strings.Replace(txtPrixSpecial.Text, ".", ",");
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("ProjSoumMec", "txtPrixSpecial_LostFocus", ex);
            }
        }
        private void AjouterProjetAuCumulatif()
        {
            var IdLoginEmploye = default(object);
            try
            {
                string sNoCumulatif;
                ADODB.Recordset rstProj;
                ADODB.Recordset rstPieces;
                ADODB.Recordset rstProjCumulatif;
                ADODB.Recordset rstPiecesCumulatif;
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstEmploye;
                ADODB.Recordset rstSoum;
                bool bCumulatifExiste;
                var dblNbreManuel = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                sNoCumulatif = Gauche(txtNoProjSoum.Text, 7) + "99";
                rstProj = new Recordset();
                rstPieces = new Recordset();
                rstProjCumulatif = new Recordset();
                rstPiecesCumulatif = new Recordset();
                rstProjCumulatif.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoCumulatif + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstProjCumulatif.EOF)
                {
                    bCumulatifExiste = false;
                    rstProjCumulatif.AddNew();
                    rstProjCumulatif.Fields["IDProjet"].Value = sNoCumulatif;
                    rstProj.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + Gauche(txtNoProjSoum.Text, 6) + "-01'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    if (!rstProj.EOF)
                    {
                        if (!(rstProj.Fields["IDSoumission"].Value is DBNull))
                        {
                            if ($"{rstProj.Fields["IDSoumission"].Value}".Length >= 6)
                            {
                                rstSoum = new Recordset();
                                rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + Gauche(rstProj.Fields["IDSoumission"].Value, 6) + "-99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                                if (!rstSoum.EOF)
                                {
                                    rstProjCumulatif.Fields["IDSoumission"].Value = rstSoum.Fields["IDSoumission"].Value;
                                }
                                rstSoum.Close();
                                rstSoum = default;
                            }
                        }
                    }
                    rstProj.Close();
                    rstProj.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjCumulatif.Fields["IDClient"].Value = rstProj.Fields["IDClient"].Value;
                    rstProjCumulatif.Fields["IDContact"].Value = rstProj.Fields["IDContact"].Value;
                    rstProjCumulatif.Fields["TauxDessin"].Value = rstProj.Fields["TauxDessin"].Value;
                    rstProjCumulatif.Fields["TauxFabrication"].Value = rstProj.Fields["TauxFabrication"].Value;
                    rstProjCumulatif.Fields["TauxAssemblage"].Value = rstProj.Fields["TauxAssemblage"].Value;
                    rstProjCumulatif.Fields["TauxProgInterface"].Value = rstProj.Fields["TauxProgInterface"].Value;
                    rstProjCumulatif.Fields["TauxProgAutomate"].Value = rstProj.Fields["TauxProgAutomate"].Value;
                    rstProjCumulatif.Fields["TauxProgRobot"].Value = rstProj.Fields["TauxProgRobot"].Value;
                    rstProjCumulatif.Fields["TauxVision"].Value = rstProj.Fields["TauxVision"].Value;
                    rstProjCumulatif.Fields["TauxTest"].Value = rstProj.Fields["TauxTest"].Value;
                    rstProjCumulatif.Fields["TauxInstallation"].Value = rstProj.Fields["TauxInstallation"].Value;
                    rstProjCumulatif.Fields["TauxMiseService"].Value = rstProj.Fields["TauxMiseService"].Value;
                    rstProjCumulatif.Fields["TauxFormation"].Value = rstProj.Fields["TauxFormation"].Value;
                    rstProjCumulatif.Fields["TauxGestion"].Value = rstProj.Fields["TauxGestion"].Value;
                    rstProjCumulatif.Fields["TauxShipping"].Value = rstProj.Fields["TauxShipping"].Value;
                    rstProjCumulatif.Fields["Transport"].Value = rstProj.Fields["Transport"].Value;
                    rstProjCumulatif.Fields["Profit"].Value = rstProj.Fields["Profit"].Value;
                    rstProjCumulatif.Fields["imprevue"].Value = rstProj.Fields["imprevue"].Value;
                    rstProjCumulatif.Fields["commission"].Value = rstProj.Fields["commission"].Value;
                    rstProj.Close();
                    rstProjCumulatif.Fields["Description"].Value = "Cumulatif de " + Gauche(txtNoProjSoum.Text, 6);
                    rstEmploye = new Recordset();
                    rstEmploye.Open(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM employés WHERE loginname = '", IdLoginEmploye), "'"), odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstProjCumulatif.Fields["creer"].Value = ConvertDate(DateTime.Today);
                    rstProjCumulatif.Fields["creer_par"].Value = rstEmploye.Fields["NoEmploye"].Value;
                    rstEmploye.Close();
                    rstEmploye = default;
                    rstProjCumulatif.Update();
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstProjSoum.AddNew();
                    rstProjSoum.Fields["IDProjSoum"].Value = sNoCumulatif;
                    rstProjSoum.Fields["NoClient"].Value = rstProjCumulatif.Fields["IDClient"].Value;
                    rstProjSoum.Fields["Description"].Value = rstProjCumulatif.Fields["Description"].Value;
                    rstProjSoum.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                    rstProjSoum.Fields["Ouvert"].Value = true;
                    rstProjSoum.Fields["Verrouillé"].Value = true;
                    rstProjSoum.Fields["Type"].Value = "P";
                    rstProjSoum.Update();
                    rstProjSoum.Close();
                    rstProjSoum = default;
                }
                else
                {
                    bCumulatifExiste = true;
                }
                rstProj.CursorLocation = CursorLocationEnum.adUseClient;
                rstProj.Open("SELECT * FROM ProjetMec WHERE LEFT(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDProjet, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                if (rstProj.RecordCount == 1)
                {
                    rstProjCumulatif.Fields["NbreManuel"].Value = rstProj.Fields["NbreManuel"].Value;
                    rstProjCumulatif.Fields["PrixEmballage"].Value = rstProj.Fields["PrixEmballage"].Value;
                    rstProjCumulatif.Fields["total_manuel"].Value = rstProj.Fields["total_manuel"].Value;
                    rstProjCumulatif.Fields["MontantForfait"].Value = rstProj.Fields["MontantForfait"].Value;
                }
                else
                {
                    while (!rstProj.EOF)
                    {
                        if (!(rstProj.Fields["NbreManuel"].Value is DBNull))
                        {
                            dblNbreManuel += (double)rstProj.Fields["NbreManuel"].Value;
                        }
                        if (!(rstProj.Fields["PrixEmballage"].Value is DBNull))
                        {
                            dblPrixEmballage += (double)rstProj.Fields["PrixEmballage"].Value;
                        }
                        if (!(rstProj.Fields["total_manuel"].Value is DBNull))
                        {
                            dblTotalManuel += (double)rstProj.Fields["total_manuel"].Value;
                        }
                        if (!(rstProj.Fields["MontantForfait"].Value is DBNull))
                        {
                            if (IsNumeric(rstProj.Fields["MontantForfait"].Value))
                            {
                                dblForfait += (double)rstProj.Fields["MontantForfait"].Value;
                            }
                        }
                        rstProj.MoveNext();
                    }
                    rstProjCumulatif.Fields["NbreManuel"].Value = dblNbreManuel;
                    rstProjCumulatif.Fields["PrixEmballage"].Value = dblPrixEmballage;
                    rstProjCumulatif.Fields["total_manuel"].Value = dblTotalManuel;
                    rstProjCumulatif.Fields["MontantForfait"].Value = dblForfait;
                }
                rstProj.Close();
                rstProjCumulatif.Update();
                rstProjCumulatif.Close();
                rstPiecesCumulatif.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatif + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (bCumulatifExiste == true)
                {
                    UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatif + "' AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                    rstPieces.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + txtNoProjSoum.Text + "' AND Provenance Is Null OR Provenance = '' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                }
                else
                {
                    rstPieces.Open("SELECT * FROM Projet_Pieces WHERE LEFT(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDProjet, 2) <> '99' AND Provenance Is Null OR Provenance = '' ORDER BY CInt(OrdreSection), NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                }
                while (!rstPieces.EOF)
                {
                    rstPiecesCumulatif.AddNew();
                    rstPiecesCumulatif.Fields["IDProjet"].Value = sNoCumulatif;
                    rstPiecesCumulatif.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                    rstPiecesCumulatif.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                    rstPiecesCumulatif.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                    rstPiecesCumulatif.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                    rstPiecesCumulatif.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                    rstPiecesCumulatif.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                    rstPiecesCumulatif.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                    rstPiecesCumulatif.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                    rstPiecesCumulatif.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                    rstPiecesCumulatif.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                    rstPiecesCumulatif.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                    rstPiecesCumulatif.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                    rstPiecesCumulatif.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                    rstPiecesCumulatif.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                    rstPiecesCumulatif.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                    rstPiecesCumulatif.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                    rstPiecesCumulatif.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                    rstPiecesCumulatif.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                    rstPiecesCumulatif.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                    rstPiecesCumulatif.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                    rstPiecesCumulatif.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                    rstPiecesCumulatif.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                    rstPiecesCumulatif.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDProjet"].Value, 2);
                    rstPiecesCumulatif.Update();
                    rstPieces.MoveNext();
                }
                rstPiecesCumulatif.Close();
                rstPieces.Close();
                rstProj = default;
                rstPieces = default;
                rstProjCumulatif = default;
                rstPiecesCumulatif = default;
                CalculerTotalRecordset(sNoCumulatif);
                if (bCumulatifExiste == false)
                {
                    if (cmbOuvertFerme.SelectedIndex == I_CMB_OUVERT)
                    {
                        RemplirComboProjSoum(txtNoProjSoum.Text);
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("FrmProjSoumMec", "AjouterProjetAuCumulatif", ex);
            }
        }
        private void AjouterSoumissionAuCumulatif()
        {
            var IdLoginEmploye = default(object);
            try
            {
                string sNoCumulatif;
                ADODB.Recordset rstSoum;
                ADODB.Recordset rstPieces;
                ADODB.Recordset rstSoumCumulatif;
                ADODB.Recordset rstPiecesCumulatif;
                ADODB.Recordset rstProjSoum;
                ADODB.Recordset rstEmploye;
                bool bCumulatifExiste;
                var dblNbreManuel = default(double);
                var dblTempsDessin = default(double);
                var dblTempsFabrication = default(double);
                var dblTempsAssemblage = default(double);
                var dblTempsProgInterface = default(double);
                var dblTempsProgAutomate = default(double);
                var dblTempsProgRobot = default(double);
                var dblTempsVision = default(double);
                var dblTempsTest = default(double);
                var dblTempsInstallation = default(double);
                var dblTempsMiseService = default(double);
                var dblTempsFormation = default(double);
                var dblTempsGestion = default(double);
                var dblTempsShipping = default(double);
                var dblTempsTransport = default(double);
                var dblTempsUniteMobile = default(double);
                var dblTotalHebergement = default(double);
                var dblTotalRepas = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                sNoCumulatif = Gauche(txtNoProjSoum.Text, 7) + "99";
                rstSoum = new Recordset();
                rstPieces = new Recordset();
                rstSoumCumulatif = new Recordset();
                rstPiecesCumulatif = new Recordset();
                rstSoumCumulatif.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + sNoCumulatif + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (rstSoumCumulatif.EOF)
                {
                    bCumulatifExiste = false;
                    rstSoumCumulatif.AddNew();
                    rstSoumCumulatif.Fields["IDSoumission"].Value = sNoCumulatif;
                    rstSoum.Open("SELECT * FROM SoumissionMec WHERE IDSoumission = '" + txtNoProjSoum.Text + "'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstSoumCumulatif.Fields["IDClient"].Value = rstSoum.Fields["IDClient"].Value;
                    rstSoumCumulatif.Fields["IDContact"].Value = rstSoum.Fields["IDContact"].Value;
                    rstSoumCumulatif.Fields["TauxDessin"].Value = rstSoum.Fields["TauxDessin"].Value;
                    rstSoumCumulatif.Fields["TauxFabrication"].Value = rstSoum.Fields["TauxFabrication"].Value;
                    rstSoumCumulatif.Fields["TauxAssemblage"].Value = rstSoum.Fields["TauxAssemblage"].Value;
                    rstSoumCumulatif.Fields["TauxProgInterface"].Value = rstSoum.Fields["TauxProgInterface"].Value;
                    rstSoumCumulatif.Fields["TauxProgAutomate"].Value = rstSoum.Fields["TauxProgAutomate"].Value;
                    rstSoumCumulatif.Fields["TauxProgRobot"].Value = rstSoum.Fields["TauxProgRobot"].Value;
                    rstSoumCumulatif.Fields["TauxVision"].Value = rstSoum.Fields["TauxVision"].Value;
                    rstSoumCumulatif.Fields["TauxTest"].Value = rstSoum.Fields["TauxTest"].Value;
                    rstSoumCumulatif.Fields["TauxInstallation"].Value = rstSoum.Fields["TauxInstallation"].Value;
                    rstSoumCumulatif.Fields["TauxMiseService"].Value = rstSoum.Fields["TauxMiseService"].Value;
                    rstSoumCumulatif.Fields["TauxFormation"].Value = rstSoum.Fields["TauxFormation"].Value;
                    rstSoumCumulatif.Fields["TauxGestion"].Value = rstSoum.Fields["TauxGestion"].Value;
                    rstSoumCumulatif.Fields["TauxShipping"].Value = rstSoum.Fields["TauxShipping"].Value;
                    rstSoumCumulatif.Fields["TauxHebergement1"].Value = rstSoum.Fields["TauxHebergement1"].Value;
                    rstSoumCumulatif.Fields["TauxHebergement2"].Value = rstSoum.Fields["TauxHebergement2"].Value;
                    rstSoumCumulatif.Fields["TauxRepas"].Value = rstSoum.Fields["TauxRepas"].Value;
                    rstSoumCumulatif.Fields["TauxTransport"].Value = rstSoum.Fields["TauxTransport"].Value;
                    rstSoumCumulatif.Fields["TauxUniteMobile"].Value = rstSoum.Fields["TauxUniteMobile"].Value;
                    rstSoumCumulatif.Fields["Transport"].Value = rstSoum.Fields["Transport"].Value;
                    rstSoumCumulatif.Fields["Profit"].Value = rstSoum.Fields["Profit"].Value;
                    rstSoumCumulatif.Fields["imprevue"].Value = rstSoum.Fields["imprevue"].Value;
                    rstSoumCumulatif.Fields["commission"].Value = rstSoum.Fields["commission"].Value;
                    rstSoum.Close();
                    rstSoumCumulatif.Fields["Description"].Value = "Cumulatif de " + Gauche(txtNoProjSoum.Text, 6);
                    rstEmploye = new Recordset();
                    rstEmploye.Open(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT * FROM employés WHERE loginname = '", IdLoginEmploye), "'"), odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                    rstSoumCumulatif.Fields["creer"].Value = ConvertDate(DateTime.Today);
                    rstSoumCumulatif.Fields["creer_par"].Value = rstEmploye.Fields["NoEmploye"].Value;
                    rstEmploye.Close();
                    rstEmploye = default;
                    rstSoumCumulatif.Update();
                    rstProjSoum = new Recordset();
                    rstProjSoum.Open("SELECT * FROM ProjSoum", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    rstProjSoum.AddNew();
                    rstProjSoum.Fields["IDProjSoum"].Value = sNoCumulatif;
                    rstProjSoum.Fields["NoClient"].Value = rstSoumCumulatif.Fields["IDClient"].Value;
                    rstProjSoum.Fields["Description"].Value = rstSoumCumulatif.Fields["Description"].Value;
                    rstProjSoum.Fields["DateOuverture"].Value = ConvertDate(DateTime.Today);
                    rstProjSoum.Fields["Ouvert"].Value = true;
                    rstProjSoum.Fields["Verrouillé"].Value = true;
                    rstProjSoum.Fields["Type"].Value = "S";
                    rstProjSoum.Update();
                    rstProjSoum.Close();
                    rstProjSoum = default;
                }
                else
                {
                    bCumulatifExiste = true;
                }
                rstSoum.CursorLocation = CursorLocationEnum.adUseClient;
                rstSoum.Open("SELECT * FROM SoumissionMec WHERE LEFT(IDSoumission, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDSoumission, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                if (rstSoum.RecordCount == 1)
                {
                    rstSoumCumulatif.Fields["NbreManuel"].Value = rstSoum.Fields["NbreManuel"].Value;
                    rstSoumCumulatif.Fields["TempsDessin"].Value = rstSoum.Fields["TempsDessin"].Value;
                    if (rstSoum.Fields["SansTemps"].Value == false)
                    {
                        rstSoumCumulatif.Fields["TempsFabrication"].Value = rstSoum.Fields["TempsFabrication"].Value;
                    }
                    else
                    {
                        rstSoumCumulatif.Fields["TempsFabrication"].Value = 0;
                    }
                    rstSoumCumulatif.Fields["TempsAssemblage"].Value = rstSoum.Fields["TempsAssemblage"].Value;
                    rstSoumCumulatif.Fields["TempsProgInterface"].Value = rstSoum.Fields["TempsProgInterface"].Value;
                    rstSoumCumulatif.Fields["TempsProgAutomate"].Value = rstSoum.Fields["TempsProgAutomate"].Value;
                    rstSoumCumulatif.Fields["TempsProgRobot"].Value = rstSoum.Fields["TempsProgRobot"].Value;
                    rstSoumCumulatif.Fields["TempsVision"].Value = rstSoum.Fields["TempsVision"].Value;
                    rstSoumCumulatif.Fields["TempsTest"].Value = rstSoum.Fields["TempsTest"].Value;
                    rstSoumCumulatif.Fields["TempsInstallation"].Value = rstSoum.Fields["TempsInstallation"].Value;
                    rstSoumCumulatif.Fields["TempsMiseService"].Value = rstSoum.Fields["TempsMiseService"].Value;
                    rstSoumCumulatif.Fields["TempsFormation"].Value = rstSoum.Fields["TempsFormation"].Value;
                    rstSoumCumulatif.Fields["TempsGestion"].Value = rstSoum.Fields["TempsGestion"].Value;
                    rstSoumCumulatif.Fields["TempsShipping"].Value = rstSoum.Fields["TempsShipping"].Value;
                    rstSoumCumulatif.Fields["NbrePersonne"].Value = rstSoum.Fields["NbrePersonne"].Value;
                    rstSoumCumulatif.Fields["TempsHebergement"].Value = rstSoum.Fields["TempsHebergement"].Value;
                    rstSoumCumulatif.Fields["TempsRepas"].Value = rstSoum.Fields["TempsRepas"].Value;
                    rstSoumCumulatif.Fields["TempsTransport"].Value = rstSoum.Fields["TempsTransport"].Value;
                    rstSoumCumulatif.Fields["TempsUniteMobile"].Value = rstSoum.Fields["TempsUniteMobile"].Value;
                    rstSoumCumulatif.Fields["TotalHebergement"].Value = rstSoum.Fields["TotalHebergement"].Value;
                    rstSoumCumulatif.Fields["TotalRepas"].Value = rstSoum.Fields["TotalRepas"].Value;
                    rstSoumCumulatif.Fields["PrixEmballage"].Value = rstSoum.Fields["PrixEmballage"].Value;
                    rstSoumCumulatif.Fields["total_manuel"].Value = rstSoum.Fields["total_manuel"].Value;
                    rstSoumCumulatif.Fields["MontantForfait"].Value = rstSoum.Fields["MontantForfait"].Value;
                }
                else
                {
                    while (!rstSoum.EOF)
                    {
                        if (!(rstSoum.Fields["NbreManuel"].Value is DBNull))
                        {
                            dblNbreManuel += (double)rstSoum.Fields["NbreManuel"].Value;
                        }
                        if (!(rstSoum.Fields["TempsDessin"].Value is DBNull))
                        {
                            dblTempsDessin = (double)rstSoum.Fields["TempsDessin"].Value;
                        }
                        if (rstSoum.Fields["SansTemps"].Value == false)
                        {
                            if (!(rstSoum.Fields["TempsFabrication"].Value is DBNull))
                            {
                                dblTempsFabrication += (double)rstSoum.Fields["TempsFabrication"].Value;
                            }
                        }
                        if (!(rstSoum.Fields["TempsAssemblage"].Value is DBNull))
                        {
                            dblTempsAssemblage = dblTempsAssemblage + (double)rstSoum.Fields["TempsAssemblage"].Value;
                        }
                        if (!(rstSoum.Fields["TempsProgInterface"].Value is DBNull))
                        {
                            dblTempsProgInterface = dblTempsProgInterface + (double)rstSoum.Fields["TempsProgInterface"].Value;
                        }
                        if (!(rstSoum.Fields["TempsProgAutomate"].Value is DBNull))
                        {
                            dblTempsProgAutomate = dblTempsProgAutomate + (double)rstSoum.Fields["TempsProgAutomate"].Value;
                        }
                        if (!(rstSoum.Fields["TempsProgRobot"].Value is DBNull))
                        {
                            dblTempsProgRobot = dblTempsProgRobot + (double)rstSoum.Fields["TempsProgRobot"].Value;
                        }
                        if (!(rstSoum.Fields["TempsVision"].Value is DBNull))
                        {
                            dblTempsVision = dblTempsVision + (double)rstSoum.Fields["TempsVision"].Value;
                        }
                        if (!(rstSoum.Fields["TempsTest"].Value is DBNull))
                        {
                            dblTempsTest = dblTempsTest + (double)rstSoum.Fields["TempsTest"].Value;
                        }
                        if (!(rstSoum.Fields["TempsInstallation"].Value is DBNull))
                        {
                            dblTempsInstallation = dblTempsInstallation + (double)rstSoum.Fields["TempsInstallation"].Value;
                        }
                        if (!(rstSoum.Fields["TempsMiseService"].Value is DBNull))
                        {
                            dblTempsMiseService = dblTempsMiseService + (double)rstSoum.Fields["TempsMiseService"].Value;
                        }
                        if (!(rstSoum.Fields["TempsFormation"].Value is DBNull))
                        {
                            dblTempsFormation = dblTempsFormation + (double)rstSoum.Fields["TempsFormation"].Value;
                        }
                        if (!(rstSoum.Fields["TempsGestion"].Value is DBNull))
                        {
                            dblTempsGestion = dblTempsGestion + (double)rstSoum.Fields["TempsGestion"].Value;
                        }
                        if (!(rstSoum.Fields["TempsShipping"].Value is DBNull))
                        {
                            dblTempsShipping = dblTempsShipping + (double)rstSoum.Fields["TempsShipping"].Value;
                        }
                        if (!(rstSoum.Fields["TempsTransport"].Value is DBNull))
                        {
                            dblTempsTransport += (double)rstSoum.Fields["TempsTransport"].Value;
                        }
                        if (!(rstSoum.Fields["TempsUniteMobile"].Value is DBNull))
                        {
                            dblTempsUniteMobile += (double)rstSoum.Fields["TempsUniteMobile"].Value;
                        }
                        if (!(rstSoum.Fields["TotalHebergement"].Value is DBNull))
                        {
                            dblTotalHebergement += (double)rstSoum.Fields["TotalHebergement"].Value;
                        }
                        if (!(rstSoum.Fields["TotalRepas"].Value is DBNull))
                        {
                            dblTotalRepas += (double)rstSoum.Fields["TotalRepas"].Value;
                        }
                        if (!(rstSoum.Fields["PrixEmballage"].Value is DBNull))
                        {
                            dblPrixEmballage += (double)rstSoum.Fields["PrixEmballage"].Value;
                        }
                        if (!(rstSoum.Fields["total_manuel"].Value is DBNull))
                        {
                            dblTotalManuel += (double)rstSoum.Fields["total_manuel"].Value;
                        }
                        if (!(rstSoum.Fields["MontantForfait"].Value is DBNull))
                        {
                            if (IsNumeric(rstSoum.Fields["MontantForfait"].Value))
                            {
                                dblForfait += (double)rstSoum.Fields["MontantForfait"].Value;
                            }
                        }
                        rstSoum.MoveNext();
                    }
                    rstSoumCumulatif.Fields["NbreManuel"].Value = dblNbreManuel;
                    rstSoumCumulatif.Fields["TempsDessin"].Value = dblTempsDessin;
                    rstSoumCumulatif.Fields["TempsFabrication"].Value = dblTempsFabrication;
                    rstSoumCumulatif.Fields["TempsAssemblage"].Value = dblTempsAssemblage;
                    rstSoumCumulatif.Fields["TempsProgInterface"].Value = dblTempsProgInterface;
                    rstSoumCumulatif.Fields["TempsProgAutomate"].Value = dblTempsProgAutomate;
                    rstSoumCumulatif.Fields["TempsProgRobot"].Value = dblTempsProgRobot;
                    rstSoumCumulatif.Fields["TempsVision"].Value = dblTempsVision;
                    rstSoumCumulatif.Fields["TempsTest"].Value = dblTempsTest;
                    rstSoumCumulatif.Fields["TempsInstallation"].Value = dblTempsInstallation;
                    rstSoumCumulatif.Fields["TempsMiseService"].Value = dblTempsMiseService;
                    rstSoumCumulatif.Fields["TempsFormation"].Value = dblTempsFormation;
                    rstSoumCumulatif.Fields["TempsGestion"].Value = dblTempsGestion;
                    rstSoumCumulatif.Fields["TempsShipping"].Value = dblTempsShipping;
                    rstSoumCumulatif.Fields["TempsTransport"].Value = dblTempsTransport;
                    rstSoumCumulatif.Fields["TempsUniteMobile"].Value = dblTempsUniteMobile;
                    rstSoumCumulatif.Fields["TotalHebergement"].Value = dblTotalHebergement;
                    rstSoumCumulatif.Fields["TotalRepas"].Value = dblTotalRepas;
                    rstSoumCumulatif.Fields["PrixEmballage"].Value = dblPrixEmballage;
                    rstSoumCumulatif.Fields["total_manuel"].Value = dblTotalManuel;
                    rstSoumCumulatif.Fields["MontantForfait"].Value = dblForfait;
                }
                rstSoumCumulatif.Update();
                rstSoumCumulatif.Close();
                rstSoum.Close();
                rstPiecesCumulatif.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatif + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                if (bCumulatifExiste == true)
                {
                    UpdateSQL("DELETE FROM Soumission_Pieces WHERE IDSoumission = '" + sNoCumulatif + "' AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                    rstPieces.Open("SELECT * FROM Soumission_Pieces WHERE IDSoumission = '" + txtNoProjSoum.Text + "' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                }
                else
                {
                    rstPieces.Open("SELECT * FROM Soumission_Pieces WHERE LEFT(IDSoumission, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDSoumission, 2) <> '99' ORDER BY CInt(OrdreSection), NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                }
                while (!rstPieces.EOF)
                {
                    rstPiecesCumulatif.AddNew();
                    rstPiecesCumulatif.Fields["IDSoumission"].Value = sNoCumulatif;
                    rstPiecesCumulatif.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                    rstPiecesCumulatif.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                    rstPiecesCumulatif.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                    rstPiecesCumulatif.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                    rstPiecesCumulatif.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                    rstPiecesCumulatif.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                    rstPiecesCumulatif.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                    rstPiecesCumulatif.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                    rstPiecesCumulatif.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                    rstPiecesCumulatif.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                    rstPiecesCumulatif.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                    rstPiecesCumulatif.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                    rstPiecesCumulatif.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                    rstPiecesCumulatif.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                    rstPiecesCumulatif.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                    rstPiecesCumulatif.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                    rstPiecesCumulatif.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                    rstPiecesCumulatif.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                    rstPiecesCumulatif.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                    rstPiecesCumulatif.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                    rstPiecesCumulatif.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                    rstPiecesCumulatif.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                    rstPiecesCumulatif.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDSoumission"].Value, 2);
                    rstPiecesCumulatif.Update();
                    rstPieces.MoveNext();
                }
                rstPiecesCumulatif.Close();
                rstPieces.Close();
                rstSoum = default;
                rstPieces = default;
                rstSoumCumulatif = default;
                rstPiecesCumulatif = default;
                CalculerTotalRecordset(sNoCumulatif);
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("FrmProjSoumMec", "AjouterSoumissionAuCumulatif", ex);
            }
        }
        private void RecreerProjetCumulatif()
        {
            try
            {
                string sNoCumulatif;
                ADODB.Recordset rstProjSoum;
                var dblNbreManuel = default(double);
                var dblPrixEmballage = default(double);
                var dblTotalManuel = default(double);
                var dblForfait = default(double);
                var bSupprimer = default(bool);
                sNoCumulatif = Gauche(txtNoProjSoum.Text, 7) + "99";
                ADODB.Recordset rstProj = new ADODB.Recordset();
                ADODB.Recordset rstPieces = new ADODB.Recordset();
                ADODB.Recordset rstProjCumulatif = new ADODB.Recordset();
                ADODB.Recordset rstPiecesCumulatif = new ADODB.Recordset();
                rstProj.CursorLocation = CursorLocationEnum.adUseClient;
                rstProj.Open("SELECT * FROM ProjetMec WHERE LEFT(IDProjet, 6) = '" + Gauche(txtNoProjSoum.Text, 6) + "' AND RIGHT(IDProjet, 2) <> '99'", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                if (rstProj.EOF)
                {
                    UpdateSQL("DELETE FROM ProjSoum WHERE IDProjSoum = '" + sNoCumulatif + "'");
                    UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatif + "' AND Type = 'E'");
                    UpdateSQL("DELETE FROM ProjetMec WHERE IDProjet = '" + sNoCumulatif + "'");
                    bSupprimer = true;
                }
                else
                {
                    rstProjCumulatif.Open("SELECT * FROM ProjetMec WHERE IDProjet = '" + sNoCumulatif + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                    if (rstProj.RecordCount == 1)
                    {
                        rstProjCumulatif.Fields["NbreManuel"].Value = rstProj.Fields["NbreManuel"].Value;
                        rstProjCumulatif.Fields["PrixEmballage"].Value = rstProj.Fields["PrixEmballage"].Value;
                        rstProjCumulatif.Fields["total_manuel"].Value = rstProj.Fields["total_manuel"].Value;
                        rstProjCumulatif.Fields["MontantForfait"].Value = rstProj.Fields["MontantForfait"].Value;
                    }
                    else
                    {
                        while (!rstProj.EOF)
                        {
                            if (!(rstProj.Fields["NbreManuel"].Value is DBNull))
                            {
                                dblNbreManuel += (double)rstProj.Fields["NbreManuel"].Value;
                            }
                            if (!(rstProj.Fields["PrixEmballage"].Value is DBNull))
                            {
                                dblPrixEmballage += (double)rstProj.Fields["PrixEmballage"].Value;
                            }
                            if (!(rstProj.Fields["total_manuel"].Value is DBNull))
                            {
                                dblTotalManuel += (double)rstProj.Fields["total_manuel"].Value;
                            }
                            if (!(rstProj.Fields["MontantForfait"].Value is DBNull))
                            {
                                if (IsNumeric(rstProj.Fields["MontantForfait"].Value))
                                {
                                    dblForfait += (double)rstProj.Fields["MontantForfait"].Value;
                                }
                            }
                            rstProj.MoveNext();
                        }
                        rstProjCumulatif.Fields["NbreManuel"].Value = dblNbreManuel;
                        rstProjCumulatif.Fields["PrixEmballage"].Value = dblPrixEmballage;
                        rstProjCumulatif.Fields["total_manuel"].Value = dblTotalManuel;
                        rstProjCumulatif.Fields["MontantForfait"].Value = dblForfait;
                    }
                    rstProj.Close();
                    rstProjCumulatif.Update();
                    rstProjCumulatif.Close();
                }
                rstPiecesCumulatif.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatif + "'", odbc, CursorTypeEnum.adOpenDynamic, LockTypeEnum.adLockOptimistic);
                UpdateSQL("DELETE FROM Projet_Pieces WHERE IDProjet = '" + sNoCumulatif + "' AND Provenance = '" + Droite(txtNoProjSoum.Text, 2) + "'");
                rstPieces.Open("SELECT * FROM Projet_Pieces WHERE IDProjet = '" + txtNoProjSoum.Text + "' AND Provenance Is Null OR Provenance = '' ORDER BY NuméroLigne", odbc, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockReadOnly);
                while (!rstPieces.EOF)
                {
                    rstPiecesCumulatif.AddNew();
                    rstPiecesCumulatif.Fields["IDProjet"].Value = sNoCumulatif;
                    rstPiecesCumulatif.Fields["IDSection"].Value = rstPieces.Fields["IDSection"].Value;
                    rstPiecesCumulatif.Fields["NumItem"].Value = rstPieces.Fields["NumItem"].Value;
                    rstPiecesCumulatif.Fields["Qté"].Value = rstPieces.Fields["Qté"].Value;
                    rstPiecesCumulatif.Fields["Desc_FR"].Value = rstPieces.Fields["Desc_FR"].Value;
                    rstPiecesCumulatif.Fields["Desc_EN"].Value = rstPieces.Fields["Desc_EN"].Value;
                    rstPiecesCumulatif.Fields["Manufact"].Value = rstPieces.Fields["Manufact"].Value;
                    rstPiecesCumulatif.Fields["Prix_list"].Value = rstPieces.Fields["Prix_list"].Value;
                    rstPiecesCumulatif.Fields["Escompte"].Value = rstPieces.Fields["Escompte"].Value;
                    rstPiecesCumulatif.Fields["Prix_net"].Value = rstPieces.Fields["Prix_net"].Value;
                    rstPiecesCumulatif.Fields["IDFRS"].Value = rstPieces.Fields["IDFRS"].Value;
                    rstPiecesCumulatif.Fields["Temps"].Value = rstPieces.Fields["Temps"].Value;
                    rstPiecesCumulatif.Fields["Temps_Total"].Value = rstPieces.Fields["Temps_Total"].Value;
                    rstPiecesCumulatif.Fields["Prix_total"].Value = rstPieces.Fields["Prix_total"].Value;
                    rstPiecesCumulatif.Fields["Profit_Argent"].Value = rstPieces.Fields["Profit_Argent"].Value;
                    rstPiecesCumulatif.Fields["SousSection"].Value = rstPieces.Fields["SousSection"].Value;
                    rstPiecesCumulatif.Fields["OrdreSection"].Value = rstPieces.Fields["OrdreSection"].Value;
                    rstPiecesCumulatif.Fields["NuméroLigne"].Value = rstPieces.Fields["NuméroLigne"].Value;
                    rstPiecesCumulatif.Fields["PrixOrigine"].Value = rstPieces.Fields["PrixOrigine"].Value;
                    rstPiecesCumulatif.Fields["Type"].Value = rstPieces.Fields["Type"].Value;
                    rstPiecesCumulatif.Fields[".Visible"].Value = rstPieces.Fields[".Visible"].Value;
                    rstPiecesCumulatif.Fields["Commentaire"].Value = rstPieces.Fields["Commentaire"].Value;
                    rstPiecesCumulatif.Fields["Devise"].Value = rstPieces.Fields["Devise"].Value;
                    rstPiecesCumulatif.Fields["Provenance"].Value = Droite(rstPieces.Fields["IDProjet"].Value, 2);
                    rstPiecesCumulatif.Update();
                    rstPieces.MoveNext();
                }
                rstPiecesCumulatif.Close();
                rstPieces.Close();
                rstProj = default;
                rstPieces = default;
                rstProjCumulatif = default;
                rstPiecesCumulatif = default;
                if (bSupprimer == false)
                {
                    CalculerTotalRecordset(sNoCumulatif);
                }
                return;
            }
            catch (Exception ex)
            {
                AfficherErreur("FrmProjSoumMec", "AjouterProjetAuCumulatif", ex);
            }
        }
        private object ExportdansExcel(ADODB.Recordset oRecordset)
        {
            short iCount;
            Application oXLApp = new Application();
            Workbook oXLBook = oXLApp.Workbooks.Add();
            Worksheet oXLSheet = oXLBook.Worksheets[1];
            oXLSheet.Columns[1].ColumnWidth = 10;
            oXLSheet.Columns[2].ColumnWidth = 8;
            oXLSheet.Columns[3].ColumnWidth = 20;
            oXLSheet.Columns[4].ColumnWidth = 45;
            oXLSheet.Columns[5].ColumnWidth = 20;
            oXLSheet.Columns[6].ColumnWidth = 12;
            oXLSheet.Columns[7].ColumnWidth = 12;
            oXLSheet.Columns[8].ColumnWidth = 12;
            oXLSheet.Columns[9].ColumnWidth = 12;
            oXLSheet.Columns[10].ColumnWidth = 30;
            oXLSheet.Columns[11].ColumnWidth = 20;
            oXLSheet.Columns[12].ColumnWidth = 20;
            oXLSheet.Range["A1: N1"].Font.Bold = true;
            {
                ref var withBlock = ref oXLSheet;
                var loopTo = oRecordset.Fields.Count - 1;
                for (iCount = 0; iCount <= loopTo; iCount++)
                    withBlock.Cells[1, iCount + 1] = oRecordset.Fields[iCount].Name;
                withBlock.Range["A2"].CopyFromRecordset(oRecordset);
            }
            oXLApp.Visible = true;
            oXLSheet = default;
            oXLBook = default;
            oXLApp = default;
            return default;
        }
    }
}